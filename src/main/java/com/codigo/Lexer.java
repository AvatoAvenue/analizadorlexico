// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/scanner.flex


package com.codigo;
@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\0\1\5\3\0\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\17\1\24\1\17\1\25\1\17\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\0\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\45\1\54"+
    "\1\55\1\56\1\57\1\60\2\45\1\61\1\45\1\62"+
    "\1\63\1\64\1\0\1\65\1\0\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\1\0\1\121\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\2\6"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\6"+
    "\1\13\1\6\16\14\1\15\1\16\30\14\1\17\1\20"+
    "\1\0\1\21\1\0\1\13\1\0\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\64\14\1\32\15\14"+
    "\1\33\13\14\1\34\11\14\1\35\1\14\1\36\1\37"+
    "\16\14\1\40\1\14\1\41\37\14\1\0\1\42\1\43"+
    "\2\14\1\44\2\14\1\45\4\14\1\46\4\14\1\47"+
    "\7\14\1\33\42\14\1\41\24\14\1\34\1\50\21\14"+
    "\1\51\5\14\1\33\2\14\1\52\15\14\1\51\3\14"+
    "\1\53\6\14\1\54\1\55\2\14\1\56\1\14\1\57"+
    "\2\14\1\41\5\14\1\60\13\14\1\61\1\14\1\62"+
    "\10\14\1\63\13\14\1\64\14\14\1\65\10\14\1\0"+
    "\7\14\1\66\16\14\1\67\7\14\1\70\1\14\1\71"+
    "\1\72\21\14\1\73\4\14\1\74\1\14\1\75\1\14"+
    "\1\76\1\14\1\77\1\14\1\100\4\14\1\101\10\14"+
    "\2\102\3\14\1\103\2\14\1\104\6\14\1\105\4\14"+
    "\1\106\1\107\2\14\1\110\10\14\1\111\3\14\1\112"+
    "\1\14\1\113\1\14\1\114\1\115\6\14\1\116\1\117"+
    "\11\14\1\120\2\14\1\121\7\14\1\0\11\14\1\122"+
    "\14\14\1\123\13\14\1\124\4\14\1\125\1\14\1\0"+
    "\1\126\2\14\1\127\2\14\1\130\1\14\1\131\3\14"+
    "\1\132\3\14\1\133\14\14\1\76\11\14\1\134\6\14"+
    "\1\135\1\136\1\14\1\137\1\14\1\140\1\141\1\14"+
    "\1\0\7\14\1\142\1\143\2\14\1\144\1\145\5\14"+
    "\1\146\1\147\5\14\1\150\6\14\1\151\32\14\1\152"+
    "\2\14\1\0\4\14\1\153\12\14\1\154\4\14\1\0"+
    "\3\14\1\155\1\156\2\14\1\157\1\160\3\14\1\161"+
    "\1\162\1\0\1\163\22\14\1\164\14\14\1\165\3\14"+
    "\1\166\4\14\2\0\3\14\1\167\3\14\1\170\1\171"+
    "\1\14\1\172\1\14\1\173\1\14\1\174\2\14\1\175"+
    "\1\176\2\14\1\177\2\14\1\151\1\200\4\14\1\201"+
    "\1\14\1\202\1\203\1\14\1\204\2\14\1\205\4\14"+
    "\1\206\1\14\1\207\3\14\1\210\2\14\1\211\1\0"+
    "\1\14\1\212\2\14\1\213\1\214\1\215\1\216\1\217"+
    "\1\220\1\14\1\105\1\221\1\35\3\14\2\0\1\14"+
    "\1\222\1\14\1\223\6\14\1\0\11\14\1\224\1\225"+
    "\12\14\1\226\1\14\1\227\1\230\3\14\1\231\2\14"+
    "\2\0\1\14\1\232\1\233\2\14\1\234\1\14\1\235"+
    "\3\14\1\236\4\14\1\237\1\14\1\123\1\240\1\14"+
    "\1\241\1\14\1\242\1\243\4\14\1\62\10\14\2\0"+
    "\2\14\1\244\1\14\1\245\3\14\2\0\2\14\1\246"+
    "\1\14\1\247\2\14\1\250\1\251\3\14\1\252\7\14"+
    "\2\0\1\253\1\254\1\255\1\256\1\14\1\257\3\14"+
    "\1\260\1\261\2\14\1\146\1\262\1\263\1\264\5\14"+
    "\2\0\2\14\1\265\1\266\2\14\2\0\2\14\1\267"+
    "\2\14\1\270\3\14\1\271\2\14\1\272\1\273\3\0"+
    "\1\14\1\37\1\274\1\275\4\14\1\276\2\0\1\14"+
    "\1\277\2\14\2\0\1\300\2\14\1\301\1\14\1\302"+
    "\1\14\3\0\1\303\1\304\3\14\2\0\1\14\1\305"+
    "\1\14\1\46\1\0\1\306\2\14\1\307\2\0\3\14"+
    "\1\310\1\0\3\14\1\311\2\0\1\14\1\312\1\0"+
    "\3\14\1\313\1\0\1\314\1\315\1\222\2\14\1\0"+
    "\2\14\1\0\2\14\1\0\1\316\1\14\1\317\7\14"+
    "\1\320";

  private static int [] zzUnpackAction() {
    int [] result = new int[1137];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\122\0\244\0\366\0\122\0\122\0\122"+
    "\0\u0148\0\122\0\u019a\0\u01ec\0\122\0\u023e\0\122\0\122"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c\0\u075e"+
    "\0\u07b0\0\u0802\0\122\0\122\0\u0854\0\u08a6\0\u08f8\0\u094a"+
    "\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda"+
    "\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6\0\u0e18\0\u0e6a"+
    "\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2\0\122\0\122\0\366\0\122"+
    "\0\u1004\0\122\0\u1056\0\122\0\122\0\122\0\122\0\122"+
    "\0\122\0\u10a8\0\122\0\u10fa\0\u114c\0\u119e\0\u11f0\0\u1242"+
    "\0\u1294\0\u12e6\0\u1338\0\u138a\0\u13dc\0\u142e\0\u1480\0\u14d2"+
    "\0\u1524\0\u1576\0\u15c8\0\u161a\0\u166c\0\u16be\0\u1710\0\u1762"+
    "\0\u17b4\0\u1806\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0\0\u19f2"+
    "\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82"+
    "\0\u1cd4\0\u1d26\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\u1f12"+
    "\0\u1f64\0\u1fb6\0\u2008\0\u205a\0\u20ac\0\u20fe\0\u2150\0\u21a2"+
    "\0\u21f4\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u2432"+
    "\0\u2484\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2"+
    "\0\u2714\0\u2766\0\u27b8\0\u280a\0\u285c\0\u28ae\0\u2900\0\u2952"+
    "\0\u29a4\0\u047c\0\u29f6\0\u2a48\0\u2a9a\0\u2aec\0\u2b3e\0\u2b90"+
    "\0\u2be2\0\u2c34\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20"+
    "\0\u2e72\0\u2ec4\0\u2f16\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0"+
    "\0\u3102\0\u3154\0\u31a6\0\u31f8\0\u324a\0\u047c\0\u329c\0\u32ee"+
    "\0\u3340\0\u3392\0\u33e4\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e"+
    "\0\u35d0\0\u3622\0\u3674\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u380e"+
    "\0\u3860\0\u38b2\0\u3904\0\u3956\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e"+
    "\0\u3af0\0\u3b42\0\u3b94\0\u3be6\0\u3c38\0\u3c8a\0\u3cdc\0\u3d2e"+
    "\0\122\0\122\0\u3d80\0\u3dd2\0\u047c\0\u3e24\0\u3e76\0\u047c"+
    "\0\u3ec8\0\u3f1a\0\u3f6c\0\u3fbe\0\u047c\0\u4010\0\u4062\0\u40b4"+
    "\0\u4106\0\u047c\0\u4158\0\u41aa\0\u41fc\0\u424e\0\u42a0\0\u42f2"+
    "\0\u4344\0\u047c\0\u4396\0\u43e8\0\u443a\0\u448c\0\u44de\0\u4530"+
    "\0\u4582\0\u45d4\0\u4626\0\u4678\0\u46ca\0\u471c\0\u476e\0\u47c0"+
    "\0\u4812\0\u4864\0\u48b6\0\u4908\0\u495a\0\u49ac\0\u49fe\0\u4a50"+
    "\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea\0\u4c3c\0\u4c8e\0\u4ce0"+
    "\0\u4d32\0\u4d84\0\u4dd6\0\u4e28\0\u047c\0\u4e7a\0\u4ecc\0\u4f1e"+
    "\0\u4f70\0\u4fc2\0\u5014\0\u5066\0\u50b8\0\u510a\0\u515c\0\u51ae"+
    "\0\u5200\0\u5252\0\u52a4\0\u52f6\0\u5348\0\u539a\0\u53ec\0\u543e"+
    "\0\u5490\0\u54e2\0\u5534\0\u5586\0\u55d8\0\u562a\0\u567c\0\u56ce"+
    "\0\u5720\0\u5772\0\u57c4\0\u5816\0\u5868\0\u58ba\0\u590c\0\u595e"+
    "\0\u59b0\0\u5a02\0\u5a54\0\u5aa6\0\u047c\0\u5af8\0\u5b4a\0\u5b9c"+
    "\0\u5bee\0\u5c40\0\u5c92\0\u5ce4\0\u5d36\0\u047c\0\u5d88\0\u5dda"+
    "\0\u5e2c\0\u5e7e\0\u5ed0\0\u5f22\0\u5f74\0\u5fc6\0\u6018\0\u606a"+
    "\0\u60bc\0\u610e\0\u6160\0\u61b2\0\u6204\0\u6256\0\u62a8\0\u047c"+
    "\0\u62fa\0\u634c\0\u639e\0\u63f0\0\u6442\0\u6494\0\u047c\0\u64e6"+
    "\0\u6538\0\u658a\0\u65dc\0\u662e\0\u047c\0\u6680\0\u66d2\0\u6724"+
    "\0\u6776\0\u67c8\0\u681a\0\u686c\0\u68be\0\u047c\0\u6910\0\u6962"+
    "\0\u69b4\0\u6a06\0\u6a58\0\u6aaa\0\u6afc\0\u6b4e\0\u6ba0\0\u6bf2"+
    "\0\u6c44\0\u6c96\0\u6ce8\0\u6d3a\0\u6d8c\0\u6dde\0\u6e30\0\u6e82"+
    "\0\u6ed4\0\u6f26\0\u6f78\0\u6fca\0\u047c\0\u701c\0\u706e\0\u70c0"+
    "\0\u7112\0\u7164\0\u71b6\0\u7208\0\u725a\0\u72ac\0\u72fe\0\u7350"+
    "\0\u047c\0\u73a2\0\u73f4\0\u7446\0\u7498\0\u74ea\0\u753c\0\u758e"+
    "\0\u75e0\0\u7632\0\u7684\0\u76d6\0\u7728\0\u047c\0\u777a\0\u77cc"+
    "\0\u781e\0\u7870\0\u78c2\0\u7914\0\u7966\0\u79b8\0\u7a0a\0\u7a5c"+
    "\0\u7aae\0\u7b00\0\u7b52\0\u7ba4\0\u7bf6\0\u7c48\0\u047c\0\u7c9a"+
    "\0\u7cec\0\u7d3e\0\u7d90\0\u7de2\0\u7e34\0\u7e86\0\u7ed8\0\u7f2a"+
    "\0\u7f7c\0\u7fce\0\u8020\0\u8072\0\u80c4\0\u047c\0\u8116\0\u8168"+
    "\0\u81ba\0\u820c\0\u825e\0\u82b0\0\u8302\0\u047c\0\u8354\0\u047c"+
    "\0\u047c\0\u83a6\0\u83f8\0\u844a\0\u849c\0\u84ee\0\u8540\0\u8592"+
    "\0\u85e4\0\u8636\0\u8688\0\u86da\0\u872c\0\u877e\0\u87d0\0\u8822"+
    "\0\u8874\0\u88c6\0\u047c\0\u8918\0\u896a\0\u89bc\0\u8a0e\0\u047c"+
    "\0\u8a60\0\u047c\0\u8ab2\0\u8b04\0\u8b56\0\u047c\0\u8ba8\0\u047c"+
    "\0\u8bfa\0\u8c4c\0\u8c9e\0\u8cf0\0\u8d42\0\u8d94\0\u8de6\0\u8e38"+
    "\0\u8e8a\0\u8edc\0\u8f2e\0\u8f80\0\u8fd2\0\u2cd8\0\u047c\0\u9024"+
    "\0\u9076\0\u90c8\0\u047c\0\u911a\0\u916c\0\u047c\0\u91be\0\u9210"+
    "\0\u9262\0\u92b4\0\u9306\0\u9358\0\u047c\0\u93aa\0\u93fc\0\u944e"+
    "\0\u94a0\0\u047c\0\u047c\0\u94f2\0\u9544\0\u047c\0\u9596\0\u95e8"+
    "\0\u963a\0\u968c\0\u96de\0\u9730\0\u9782\0\u97d4\0\u047c\0\u9826"+
    "\0\u9878\0\u98ca\0\u047c\0\u991c\0\u047c\0\u996e\0\u047c\0\u047c"+
    "\0\u99c0\0\u9a12\0\u9a64\0\u9ab6\0\u9b08\0\u9b5a\0\u047c\0\u047c"+
    "\0\u9bac\0\u9bfe\0\u9c50\0\u9ca2\0\u9cf4\0\u9d46\0\u9d98\0\u9dea"+
    "\0\u9e3c\0\u047c\0\u9e8e\0\u9ee0\0\u047c\0\u9f32\0\u9f84\0\u9fd6"+
    "\0\ua028\0\ua07a\0\ua0cc\0\ua11e\0\ua170\0\ua1c2\0\ua214\0\ua266"+
    "\0\ua2b8\0\ua30a\0\ua35c\0\ua3ae\0\ua400\0\ua452\0\u047c\0\ua4a4"+
    "\0\ua4f6\0\ua548\0\ua59a\0\ua5ec\0\ua63e\0\ua690\0\ua6e2\0\ua734"+
    "\0\ua786\0\ua7d8\0\ua82a\0\ua87c\0\ua8ce\0\ua920\0\ua972\0\ua9c4"+
    "\0\uaa16\0\uaa68\0\uaaba\0\uab0c\0\uab5e\0\uabb0\0\uac02\0\u047c"+
    "\0\uac54\0\uaca6\0\uacf8\0\uad4a\0\u047c\0\uad9c\0\uadee\0\u047c"+
    "\0\uae40\0\uae92\0\u047c\0\uaee4\0\uaf36\0\u047c\0\uaf88\0\u047c"+
    "\0\uafda\0\ub02c\0\ub07e\0\u047c\0\ub0d0\0\ub122\0\ub174\0\u047c"+
    "\0\ub1c6\0\ub218\0\ub26a\0\ub2bc\0\ub30e\0\ub360\0\ub3b2\0\ub404"+
    "\0\ub456\0\ub4a8\0\ub4fa\0\ub54c\0\u047c\0\ub59e\0\ub5f0\0\ub642"+
    "\0\ub694\0\ub6e6\0\ub738\0\ub78a\0\ub7dc\0\ub82e\0\u047c\0\ub880"+
    "\0\ub8d2\0\ub924\0\ub976\0\ub9c8\0\uba1a\0\u047c\0\u047c\0\uba6c"+
    "\0\u047c\0\ubabe\0\u047c\0\ubb10\0\ubb62\0\ubbb4\0\ubc06\0\ubc58"+
    "\0\ubcaa\0\ubcfc\0\ubd4e\0\ubda0\0\ubdf2\0\u047c\0\u047c\0\ube44"+
    "\0\ube96\0\u047c\0\u047c\0\ubee8\0\ubf3a\0\ubf8c\0\ubfde\0\uc030"+
    "\0\uc082\0\u047c\0\uc0d4\0\uc126\0\uc178\0\uc1ca\0\uc21c\0\u047c"+
    "\0\uc26e\0\uc2c0\0\uc312\0\uc364\0\uc3b6\0\uc408\0\uc45a\0\uc4ac"+
    "\0\uc4fe\0\uc550\0\uc5a2\0\uc5f4\0\uc646\0\uc698\0\uc6ea\0\uc73c"+
    "\0\uc78e\0\uc7e0\0\uc832\0\uc884\0\uc8d6\0\uc928\0\uc97a\0\uc9cc"+
    "\0\uca1e\0\uca70\0\ucac2\0\ucb14\0\ucb66\0\ucbb8\0\ucc0a\0\ucc5c"+
    "\0\uccae\0\u047c\0\ucd00\0\ucd52\0\ucda4\0\ucdf6\0\uce48\0\uce9a"+
    "\0\uceec\0\u047c\0\ucf3e\0\ucf90\0\ucfe2\0\ud034\0\ud086\0\ud0d8"+
    "\0\ud12a\0\ud17c\0\ud1ce\0\ud220\0\u047c\0\ud272\0\ud2c4\0\ud316"+
    "\0\ud368\0\ud3ba\0\ud40c\0\ud45e\0\ud4b0\0\u047c\0\u047c\0\ud502"+
    "\0\ud554\0\u047c\0\u047c\0\ud5a6\0\ud5f8\0\ud64a\0\u047c\0\u047c"+
    "\0\ud69c\0\u047c\0\ud6ee\0\ud740\0\ud792\0\ud7e4\0\ud836\0\ud888"+
    "\0\ud8da\0\ud92c\0\ud97e\0\ud9d0\0\uda22\0\uda74\0\udac6\0\udb18"+
    "\0\udb6a\0\udbbc\0\udc0e\0\udc60\0\u047c\0\udcb2\0\udd04\0\udd56"+
    "\0\udda8\0\uddfa\0\ude4c\0\ude9e\0\udef0\0\udf42\0\udf94\0\udfe6"+
    "\0\ue038\0\u047c\0\ue08a\0\ue0dc\0\ue12e\0\u047c\0\ue180\0\ue1d2"+
    "\0\ue224\0\ue276\0\ue2c8\0\ue31a\0\ue36c\0\ue3be\0\ue410\0\ue462"+
    "\0\ue4b4\0\ue506\0\ue558\0\u047c\0\u047c\0\ue5aa\0\u047c\0\ue5fc"+
    "\0\u047c\0\ue64e\0\u047c\0\ue6a0\0\ue6f2\0\u047c\0\u047c\0\ue744"+
    "\0\ue796\0\u047c\0\ue7e8\0\ue83a\0\u047c\0\u047c\0\ue88c\0\ue8de"+
    "\0\ue930\0\ue982\0\u047c\0\ue9d4\0\u047c\0\u047c\0\uea26\0\u047c"+
    "\0\uea78\0\ueaca\0\u047c\0\ueb1c\0\ueb6e\0\uebc0\0\uec12\0\u047c"+
    "\0\uec64\0\u047c\0\uecb6\0\ued08\0\ued5a\0\u047c\0\uedac\0\uedfe"+
    "\0\u047c\0\uee50\0\ueea2\0\u047c\0\ueef4\0\uef46\0\u047c\0\u047c"+
    "\0\u047c\0\u047c\0\u047c\0\u047c\0\uef98\0\uefea\0\u047c\0\u047c"+
    "\0\uf03c\0\uf08e\0\uf0e0\0\uf132\0\uf184\0\uf1d6\0\uf228\0\uf27a"+
    "\0\u047c\0\uf2cc\0\uf31e\0\uf370\0\uf3c2\0\uf414\0\uf466\0\uf4b8"+
    "\0\uf50a\0\uf55c\0\uf5ae\0\uf600\0\uf652\0\uf6a4\0\uf6f6\0\uf748"+
    "\0\uf79a\0\u047c\0\u047c\0\uf7ec\0\uf83e\0\uf890\0\uf8e2\0\uf934"+
    "\0\uf986\0\uf9d8\0\uefea\0\ufa2a\0\ufa7c\0\u047c\0\uface\0\u047c"+
    "\0\u047c\0\ufb20\0\ufb72\0\ufbc4\0\u047c\0\ufc16\0\ufc68\0\ufcba"+
    "\0\ufd0c\0\ufd5e\0\u047c\0\ufdb0\0\ufe02\0\ufe54\0\u047c\0\ufea6"+
    "\0\u047c\0\ufef8\0\uff4a\0\uff9c\0\u047c\0\uffee\1\100\1\222"+
    "\1\344\0\u047c\1\u0136\0\u047c\0\u047c\1\u0188\0\u047c\1\u01da"+
    "\0\u047c\0\u047c\1\u022c\1\u027e\1\u02d0\1\u0322\0\122\1\u0374"+
    "\1\u03c6\1\u0418\1\u046a\1\u04bc\1\u050e\1\u0560\1\u05b2\1\u0604"+
    "\1\u0656\1\u06a8\1\u06fa\0\u047c\1\u074c\0\u047c\1\u079e\1\u07f0"+
    "\1\u0842\1\u0894\1\u08e6\1\u0938\1\u098a\0\u047c\1\u09dc\0\u047c"+
    "\1\u0a2e\1\u0a80\0\u047c\0\u047c\1\u0ad2\1\u0b24\1\u0b76\0\u047c"+
    "\1\u0bc8\1\u0c1a\1\u0c6c\1\u0cbe\1\u0d10\1\u0d62\1\u0db4\1\u0e06"+
    "\1\u0e58\0\u047c\0\122\1\u0eaa\0\u047c\1\u0efc\0\u047c\1\u0f4e"+
    "\1\u0fa0\1\u0ff2\0\u047c\0\u047c\1\u1044\1\u1096\0\u047c\0\u047c"+
    "\0\u047c\0\u047c\1\u10e8\1\u113a\1\u118c\1\u11de\1\u1230\1\u1282"+
    "\1\u12d4\1\u1326\1\u1378\0\u047c\0\u047c\1\u13ca\1\u141c\1\u146e"+
    "\1\u14c0\1\u1512\1\u1564\0\u047c\1\u15b6\1\u1608\0\u047c\1\u165a"+
    "\1\u16ac\1\u16fe\0\u047c\1\u1750\1\u17a2\0\u047c\0\u047c\1\u17f4"+
    "\1\u1846\1\u1898\1\u18ea\0\u047c\0\u047c\0\u047c\1\u193c\1\u198e"+
    "\1\u19e0\1\u1a32\0\u047c\1\u1a84\1\u1ad6\1\u1b28\0\u047c\1\u1b7a"+
    "\1\u1bcc\1\u1c1e\1\u1c70\0\u047c\1\u1cc2\1\u1d14\0\u047c\1\u1d66"+
    "\0\u047c\1\u1db8\1\u1e0a\1\u1e5c\1\u1eae\0\u047c\0\u047c\1\u1f00"+
    "\1\u1f52\1\u1fa4\1\u1ff6\1\u2048\1\u209a\0\u047c\1\u20ec\0\122"+
    "\1\u213e\0\u047c\1\u2190\1\u21e2\0\122\1\u2234\1\u2286\1\u22d8"+
    "\1\u232a\1\u237c\0\122\1\u23ce\1\u2420\1\u2472\1\u24c4\0\u047c"+
    "\1\u2516\1\u2568\1\u25ba\0\u047c\1\u260c\1\u265e\1\u26b0\1\u2702"+
    "\0\122\1\u2754\0\u047c\0\122\0\u047c\1\u27a6\1\u27f8\1\u284a"+
    "\1\u289c\1\u28ee\1\u2940\1\u2992\1\u29e4\1\u2a36\0\u047c\1\u2a88"+
    "\0\122\1\u2ada\1\u2b2c\1\u2b7e\1\u2bd0\1\u2c22\1\u2c74\1\u2cc6"+
    "\0\u047c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1137];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\12\7\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\27\1\34\3\27\1\35"+
    "\1\36\1\27\1\37\1\40\1\41\1\42\3\27\1\43"+
    "\1\2\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\27\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\27\1\74\1\27\1\75\1\76\124\0"+
    "\1\3\117\0\5\77\1\100\55\77\1\101\36\77\11\0"+
    "\1\12\20\0\1\102\102\0\1\103\140\0\1\104\106\0"+
    "\7\16\125\0\1\102\1\105\120\0\1\106\1\107\120\0"+
    "\1\102\1\110\104\0\1\111\15\0\1\112\26\0\1\113"+
    "\56\0\7\27\6\0\1\27\1\114\1\115\1\116\1\27"+
    "\1\117\5\27\1\120\12\27\3\0\22\27\1\121\10\27"+
    "\21\0\7\27\6\0\4\27\1\122\3\27\1\123\2\27"+
    "\1\124\2\27\1\125\7\27\3\0\11\27\1\126\21\27"+
    "\21\0\7\27\6\0\26\27\3\0\33\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\127\21\27\21\0\7\27"+
    "\6\0\15\27\1\130\2\27\1\131\1\132\2\27\1\133"+
    "\1\27\3\0\30\27\1\134\2\27\21\0\7\27\6\0"+
    "\1\135\7\27\1\136\5\27\1\137\7\27\3\0\1\27"+
    "\1\140\31\27\21\0\7\27\6\0\4\27\1\141\21\27"+
    "\3\0\33\27\21\0\7\27\6\0\26\27\3\0\16\27"+
    "\1\142\14\27\21\0\7\27\6\0\26\27\3\0\1\27"+
    "\1\143\3\27\1\144\11\27\1\145\13\27\21\0\7\27"+
    "\6\0\26\27\3\0\17\27\1\146\13\27\21\0\7\27"+
    "\6\0\16\27\1\147\1\27\1\150\5\27\3\0\33\27"+
    "\21\0\7\27\6\0\4\27\1\151\21\27\3\0\33\27"+
    "\21\0\7\27\6\0\26\27\3\0\20\27\1\152\3\27"+
    "\1\153\6\27\21\0\7\27\6\0\20\27\1\154\5\27"+
    "\3\0\1\27\1\155\6\27\1\156\11\27\1\157\10\27"+
    "\21\0\7\27\6\0\1\160\1\161\1\162\1\163\2\27"+
    "\1\164\1\27\1\165\4\27\1\166\3\27\1\167\1\170"+
    "\3\27\3\0\10\27\1\171\7\27\1\172\12\27\21\0"+
    "\7\27\6\0\26\27\3\0\2\27\1\173\1\27\1\174"+
    "\7\27\1\175\1\27\1\176\3\27\1\177\1\200\1\27"+
    "\1\201\1\27\1\202\3\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\203\3\27\1\204\11\27\1\205\2\27"+
    "\1\206\6\27\1\207\1\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\210\6\27\1\211\3\27\1\212\2\27"+
    "\1\213\13\27\21\0\7\27\6\0\26\27\3\0\1\27"+
    "\1\214\3\27\1\215\11\27\1\216\11\27\1\217\1\27"+
    "\21\0\7\27\6\0\26\27\3\0\14\27\1\220\1\221"+
    "\1\222\2\27\1\223\1\224\3\27\1\225\1\27\1\226"+
    "\2\27\21\0\5\27\1\227\1\27\6\0\26\27\3\0"+
    "\11\27\1\230\2\27\1\231\1\27\1\232\1\233\2\27"+
    "\1\234\2\27\1\235\5\27\21\0\7\27\6\0\26\27"+
    "\3\0\5\27\1\236\6\27\1\237\2\27\1\240\2\27"+
    "\1\241\10\27\21\0\7\27\6\0\26\27\3\0\11\27"+
    "\1\242\21\27\21\0\3\27\1\243\3\27\6\0\26\27"+
    "\3\0\6\27\1\244\6\27\1\245\1\246\4\27\1\247"+
    "\7\27\21\0\7\27\6\0\26\27\3\0\17\27\1\250"+
    "\13\27\21\0\7\27\6\0\26\27\3\0\1\27\1\251"+
    "\3\27\1\252\3\27\1\253\5\27\1\254\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\255\2\27\1\256"+
    "\12\27\1\257\13\27\21\0\7\27\6\0\26\27\3\0"+
    "\1\27\1\260\3\27\1\261\3\27\1\262\5\27\1\263"+
    "\5\27\1\264\5\27\21\0\7\27\6\0\26\27\3\0"+
    "\2\27\1\265\13\27\1\266\1\27\1\267\1\27\1\270"+
    "\2\27\1\271\1\272\4\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\273\20\27\1\274\2\27\1\275\5\27"+
    "\21\0\7\27\6\0\26\27\3\0\25\27\1\276\5\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\277\3\27"+
    "\1\300\25\27\21\0\7\27\6\0\26\27\3\0\2\27"+
    "\1\301\1\302\1\27\1\303\2\27\1\304\1\305\12\27"+
    "\1\306\1\307\1\27\1\310\1\27\1\311\1\27\21\0"+
    "\7\27\6\0\26\27\3\0\10\27\1\312\11\27\1\313"+
    "\6\27\1\314\1\27\21\0\3\27\1\243\3\27\6\0"+
    "\26\27\3\0\11\27\1\315\2\27\1\316\1\27\1\317"+
    "\4\27\1\320\7\27\21\0\7\27\6\0\26\27\3\0"+
    "\1\27\1\321\7\27\1\322\5\27\1\323\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\324\6\27\1\325"+
    "\1\326\21\27\21\0\7\27\6\0\26\27\3\0\11\27"+
    "\1\327\21\27\7\0\1\77\10\0\1\77\44\0\1\77"+
    "\3\0\1\77\3\0\1\77\7\0\1\77\3\0\1\77"+
    "\1\0\1\77\1\330\22\0\1\331\137\0\1\332\107\0"+
    "\7\27\6\0\4\27\1\333\21\27\3\0\33\27\21\0"+
    "\7\27\6\0\2\27\1\334\23\27\3\0\33\27\21\0"+
    "\7\27\6\0\3\27\1\335\20\27\1\336\1\27\3\0"+
    "\33\27\21\0\7\27\6\0\22\27\1\337\3\27\3\0"+
    "\33\27\21\0\7\27\6\0\13\27\1\340\12\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\7\27\1\341"+
    "\23\27\21\0\7\27\6\0\6\27\1\342\4\27\1\343"+
    "\12\27\3\0\33\27\21\0\7\27\6\0\15\27\1\344"+
    "\4\27\1\345\3\27\3\0\33\27\21\0\7\27\6\0"+
    "\1\346\25\27\3\0\33\27\21\0\7\27\6\0\22\27"+
    "\1\347\3\27\3\0\33\27\21\0\7\27\6\0\26\27"+
    "\3\0\7\27\1\350\23\27\21\0\7\27\6\0\26\27"+
    "\3\0\3\27\1\351\27\27\21\0\7\27\6\0\3\27"+
    "\1\352\16\27\1\353\3\27\3\0\33\27\21\0\7\27"+
    "\6\0\1\354\25\27\3\0\33\27\21\0\7\27\6\0"+
    "\2\27\1\355\23\27\3\0\33\27\21\0\7\27\6\0"+
    "\1\356\25\27\3\0\33\27\21\0\7\27\6\0\26\27"+
    "\3\0\3\27\1\357\27\27\21\0\7\27\6\0\13\27"+
    "\1\360\12\27\3\0\33\27\21\0\7\27\6\0\20\27"+
    "\1\361\5\27\3\0\33\27\21\0\7\27\6\0\20\27"+
    "\1\362\5\27\3\0\33\27\21\0\7\27\6\0\26\27"+
    "\3\0\14\27\1\363\16\27\21\0\7\27\6\0\15\27"+
    "\1\364\10\27\3\0\33\27\21\0\7\27\6\0\26\27"+
    "\3\0\24\27\1\365\1\27\1\366\4\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\367\21\27\21\0\7\27"+
    "\6\0\26\27\3\0\15\27\1\370\15\27\21\0\7\27"+
    "\6\0\26\27\3\0\16\27\1\371\14\27\21\0\7\27"+
    "\6\0\26\27\3\0\16\27\1\372\14\27\21\0\7\27"+
    "\6\0\21\27\1\373\4\27\3\0\33\27\21\0\7\27"+
    "\6\0\4\27\1\374\11\27\1\375\7\27\3\0\33\27"+
    "\21\0\7\27\6\0\2\27\1\376\14\27\1\377\6\27"+
    "\3\0\33\27\21\0\7\27\6\0\26\27\3\0\1\27"+
    "\1\u0100\31\27\21\0\7\27\6\0\26\27\3\0\1\27"+
    "\1\u0101\31\27\21\0\7\27\6\0\23\27\1\u0102\2\27"+
    "\3\0\33\27\21\0\7\27\6\0\26\27\3\0\23\27"+
    "\1\u0103\7\27\21\0\7\27\6\0\26\27\3\0\22\27"+
    "\1\u0104\10\27\21\0\7\27\6\0\26\27\3\0\25\27"+
    "\1\u0105\5\27\21\0\7\27\6\0\26\27\3\0\14\27"+
    "\1\u0106\16\27\21\0\7\27\6\0\26\27\3\0\11\27"+
    "\1\u0107\5\27\1\u0108\13\27\21\0\7\27\6\0\26\27"+
    "\3\0\17\27\1\u0109\13\27\21\0\7\27\6\0\26\27"+
    "\3\0\5\27\1\u010a\25\27\21\0\7\27\6\0\26\27"+
    "\3\0\5\27\1\u010b\25\27\21\0\7\27\6\0\26\27"+
    "\3\0\15\27\1\u010c\15\27\21\0\7\27\6\0\26\27"+
    "\3\0\17\27\1\u010d\13\27\21\0\7\27\6\0\26\27"+
    "\3\0\24\27\1\u010e\6\27\21\0\7\27\6\0\26\27"+
    "\3\0\10\27\1\u010f\22\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\u0110\31\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\u0111\31\27\21\0\7\27\6\0\26\27"+
    "\3\0\23\27\1\u0112\7\27\21\0\7\27\6\0\26\27"+
    "\3\0\4\27\1\335\26\27\21\0\7\27\6\0\26\27"+
    "\3\0\11\27\1\u0113\2\27\1\u0114\16\27\21\0\7\27"+
    "\6\0\26\27\3\0\4\27\1\u0115\26\27\21\0\7\27"+
    "\6\0\26\27\3\0\7\27\1\u0116\23\27\21\0\7\27"+
    "\6\0\26\27\3\0\3\27\1\u0117\17\27\1\u0118\5\27"+
    "\1\u0119\1\27\21\0\7\27\6\0\26\27\3\0\24\27"+
    "\1\u011a\6\27\21\0\7\27\6\0\26\27\3\0\1\27"+
    "\1\u011b\31\27\21\0\7\27\6\0\26\27\3\0\23\27"+
    "\1\u011c\7\27\21\0\7\27\6\0\26\27\3\0\7\27"+
    "\1\u011d\23\27\21\0\7\27\6\0\26\27\3\0\17\27"+
    "\1\u011e\13\27\21\0\7\27\6\0\26\27\3\0\5\27"+
    "\1\u011f\25\27\21\0\7\27\6\0\26\27\3\0\24\27"+
    "\1\u0120\6\27\21\0\7\27\6\0\26\27\3\0\23\27"+
    "\1\u0121\1\u0122\6\27\21\0\7\27\6\0\26\27\3\0"+
    "\1\27\1\u0123\3\27\1\u0124\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\1\27\1\u0125\31\27\21\0\7\27\6\0"+
    "\26\27\3\0\16\27\1\u0126\14\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u0127\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\2\27\1\u0128\1\u0129\2\27\1\u012a\5\27"+
    "\1\u012b\5\27\1\u012c\1\u012d\7\27\21\0\7\27\6\0"+
    "\26\27\3\0\25\27\1\u012e\5\27\21\0\7\27\6\0"+
    "\26\27\3\0\16\27\1\u012f\14\27\21\0\7\27\6\0"+
    "\26\27\3\0\11\27\1\u0130\11\27\1\u0131\7\27\21\0"+
    "\7\27\6\0\26\27\3\0\2\27\1\u0132\30\27\21\0"+
    "\7\27\6\0\26\27\3\0\4\27\1\u0133\16\27\1\u0134"+
    "\1\27\1\u0135\5\27\21\0\7\27\6\0\26\27\3\0"+
    "\25\27\1\u0136\5\27\21\0\7\27\6\0\26\27\3\0"+
    "\22\27\1\u0137\10\27\21\0\7\27\6\0\26\27\3\0"+
    "\1\27\1\u0138\3\27\1\u0139\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\3\27\1\u013a\14\27\1\u013b\3\27\1\u013c"+
    "\6\27\21\0\4\27\1\u013d\2\27\6\0\26\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\5\27\1\u013e"+
    "\6\27\1\u013f\1\27\1\u0140\11\27\1\u0141\2\27\21\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u0142\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\22\27\1\u0143\10\27\21\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u0144\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u0145\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u0146\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u0147\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\14\27\1\237\7\27\1\u0148"+
    "\6\27\21\0\7\27\6\0\26\27\3\0\17\27\1\u0149"+
    "\13\27\21\0\7\27\6\0\26\27\3\0\4\27\1\u014a"+
    "\26\27\21\0\2\27\1\u013d\4\27\6\0\26\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\4\27\1\u014b"+
    "\11\27\1\u014c\14\27\21\0\7\27\6\0\26\27\3\0"+
    "\20\27\1\u014d\12\27\21\0\7\27\6\0\26\27\3\0"+
    "\3\27\1\u014e\1\u014f\1\27\1\u0150\2\27\1\u0151\2\27"+
    "\1\u0152\6\27\1\u0153\1\u0154\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u0155\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\11\27\1\u0156\21\27\21\0\7\27\6\0"+
    "\26\27\3\0\15\27\1\u0157\15\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u0158\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\16\27\1\u0159\14\27\21\0\7\27\6\0"+
    "\26\27\3\0\3\27\1\u015a\12\27\1\u015b\1\u015c\13\27"+
    "\21\0\7\27\6\0\26\27\3\0\16\27\1\u015d\5\27"+
    "\1\u015e\6\27\21\0\7\27\6\0\26\27\3\0\17\27"+
    "\1\u015f\13\27\21\0\7\27\6\0\26\27\3\0\4\27"+
    "\1\u0160\26\27\21\0\7\27\6\0\26\27\3\0\15\27"+
    "\1\u0161\6\27\1\u0162\6\27\21\0\7\27\6\0\26\27"+
    "\3\0\27\27\1\u0163\1\u0164\2\27\21\0\7\27\6\0"+
    "\26\27\3\0\14\27\1\u0165\1\27\1\u0166\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u0167\5\27\1\u0168"+
    "\6\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u0169"+
    "\2\27\1\u016a\16\27\21\0\7\27\6\0\26\27\3\0"+
    "\12\27\1\u016b\20\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u016c\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\4\27\1\u016d\26\27\21\0\7\27\6\0\26\27\3\0"+
    "\24\27\1\u016e\6\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u016f\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\3\27\1\u0170\16\27\1\u0171\1\u0172\7\27\21\0\7\27"+
    "\6\0\26\27\3\0\1\27\1\u0173\7\27\1\u0174\5\27"+
    "\1\u0175\13\27\21\0\7\27\6\0\26\27\3\0\2\27"+
    "\1\u0176\30\27\21\0\7\27\6\0\26\27\3\0\1\27"+
    "\1\u0177\31\27\21\0\7\27\6\0\26\27\3\0\11\27"+
    "\1\u0178\21\27\21\0\7\27\6\0\26\27\3\0\1\27"+
    "\1\u0179\1\27\1\u017a\1\u017b\1\27\1\u017c\1\u017d\5\27"+
    "\1\u017e\3\27\1\u017f\1\27\1\u0180\1\u0181\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\31\27\1\207\1\27\21\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u0182\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u0183\12\27\1\u0184"+
    "\7\27\1\u0185\6\27\21\0\7\27\6\0\26\27\3\0"+
    "\17\27\1\u0186\13\27\21\0\7\27\6\0\26\27\3\0"+
    "\7\27\1\u0187\22\27\1\u0188\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\u0189\20\27\1\u018a\10\27\21\0\7\27"+
    "\6\0\26\27\3\0\20\27\1\u018b\12\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\u018c\21\27\21\0\7\27"+
    "\6\0\26\27\3\0\16\27\1\u018d\14\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\u018e\10\27\1\u018f\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u0190\27\27"+
    "\1\u0191\1\27\21\0\7\27\6\0\26\27\3\0\20\27"+
    "\1\u0192\12\27\21\0\7\27\6\0\26\27\3\0\16\27"+
    "\1\u0193\14\27\21\0\7\27\6\0\26\27\3\0\17\27"+
    "\1\u0194\13\27\21\0\7\27\6\0\26\27\3\0\3\27"+
    "\1\u0195\1\u0196\4\27\1\u0197\2\27\1\u0198\1\u0199\5\27"+
    "\1\u019a\1\u019b\6\27\21\0\7\27\6\0\26\27\3\0"+
    "\10\27\1\304\1\u019c\21\27\21\0\7\27\6\0\26\27"+
    "\3\0\14\27\1\u019d\5\27\1\u019e\10\27\21\0\7\27"+
    "\6\0\26\27\3\0\22\27\1\u019f\10\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\u01a0\2\27\1\u01a1\16\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u01a2\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u01a3\3\27"+
    "\1\u01a4\21\27\21\0\7\27\6\0\26\27\3\0\24\27"+
    "\1\u01a5\6\27\21\0\7\27\6\0\26\27\3\0\5\27"+
    "\1\u01a6\25\27\21\0\7\u01a7\6\0\6\u01a7\24\0\6\u01a7"+
    "\45\0\7\27\6\0\15\27\1\u01a8\10\27\3\0\33\27"+
    "\21\0\7\27\6\0\4\27\1\u01a9\21\27\3\0\33\27"+
    "\21\0\7\27\6\0\1\u01aa\25\27\3\0\33\27\21\0"+
    "\7\27\6\0\4\27\1\u01ab\21\27\3\0\33\27\21\0"+
    "\7\27\6\0\10\27\1\u01ac\15\27\3\0\25\27\1\u01ad"+
    "\5\27\21\0\7\27\6\0\10\27\1\u01ae\15\27\3\0"+
    "\33\27\21\0\7\27\6\0\13\27\1\u01af\12\27\3\0"+
    "\33\27\21\0\7\27\6\0\1\u01b0\25\27\3\0\33\27"+
    "\21\0\7\27\6\0\15\27\1\u01b1\10\27\3\0\33\27"+
    "\21\0\7\27\6\0\22\27\1\u01b2\3\27\3\0\33\27"+
    "\21\0\7\27\6\0\10\27\1\u01b3\15\27\3\0\33\27"+
    "\21\0\7\27\6\0\26\27\3\0\24\27\1\u01b4\6\27"+
    "\21\0\7\27\6\0\20\27\1\u01b5\5\27\3\0\33\27"+
    "\21\0\7\27\6\0\21\27\1\u01b6\4\27\3\0\33\27"+
    "\21\0\7\27\6\0\1\u01b7\25\27\3\0\33\27\21\0"+
    "\7\27\6\0\13\27\1\u01b8\12\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u01b9\25\27\21\0"+
    "\7\27\6\0\21\27\1\u0102\4\27\3\0\33\27\21\0"+
    "\7\27\6\0\21\27\1\u01ba\4\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\23\27\1\u0105\7\27\21\0"+
    "\7\27\6\0\4\27\1\u01bb\21\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u01bc\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u01bd\31\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u01be\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u01bf\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\11\27\1\u01c0\21\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u0165\25\27\21\0"+
    "\7\27\6\0\10\27\1\u01c1\15\27\3\0\33\27\21\0"+
    "\7\27\6\0\24\27\1\u01c2\1\27\3\0\33\27\21\0"+
    "\7\27\6\0\2\27\1\u01c3\23\27\3\0\33\27\21\0"+
    "\7\27\6\0\16\27\1\u01c4\7\27\3\0\33\27\21\0"+
    "\7\27\6\0\13\27\1\u01c5\12\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u01c6\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\3\27\1\u01c7\27\27\21\0"+
    "\7\27\6\0\4\27\1\u01c8\21\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\13\27\1\u01c9\17\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u01ca\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u01c8\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\11\27\1\u01cb\21\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u01cc\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u01cd\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\15\27\1\u01ce\15\27\21\0"+
    "\7\27\6\0\26\27\3\0\3\27\1\u01cf\27\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u01d0\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u01d1\31\27\21\0"+
    "\7\27\6\0\26\27\3\0\22\27\1\u01d2\10\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u01d3\31\27\21\0"+
    "\7\27\6\0\26\27\3\0\22\27\1\u01d4\10\27\21\0"+
    "\7\27\6\0\26\27\3\0\23\27\1\u01d5\7\27\21\0"+
    "\7\27\6\0\26\27\3\0\3\27\1\u01d6\27\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u01d7\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u01d8\5\27\1\u01d9"+
    "\23\27\21\0\7\27\6\0\26\27\3\0\17\27\1\u01da"+
    "\13\27\21\0\7\27\6\0\26\27\3\0\23\27\1\u01db"+
    "\1\27\1\u01dc\5\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u01dd\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u01de\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\16\27\1\u01df\14\27\21\0\7\27\6\0\26\27\3\0"+
    "\17\27\1\u01e0\13\27\21\0\7\27\6\0\26\27\3\0"+
    "\11\27\1\u01e1\21\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u01e2\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\11\27\1\u01e3\21\27\21\0\7\27\6\0\26\27\3\0"+
    "\14\27\1\u01e4\16\27\21\0\7\27\6\0\26\27\3\0"+
    "\1\27\1\u01e5\31\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u013d\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u01e6\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\3\27\1\u01e7\27\27\21\0\7\27\6\0\26\27\3\0"+
    "\22\27\1\u01e8\10\27\21\0\7\27\6\0\26\27\3\0"+
    "\3\27\1\u01e9\27\27\21\0\7\27\6\0\26\27\3\0"+
    "\23\27\1\u01ea\7\27\21\0\7\27\6\0\26\27\3\0"+
    "\23\27\1\u01eb\1\u01ec\6\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\u01ed\31\27\21\0\7\27\6\0\26\27"+
    "\3\0\25\27\1\u01ee\5\27\21\0\7\27\6\0\26\27"+
    "\3\0\11\27\1\u01ef\21\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\u01f0\7\27\1\u01f1\21\27\21\0\7\27"+
    "\6\0\26\27\3\0\5\27\1\u01f2\25\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\u01f3\21\27\21\0\7\27"+
    "\6\0\26\27\3\0\3\27\1\u0117\27\27\21\0\7\27"+
    "\6\0\26\27\3\0\2\27\1\u01f4\30\27\21\0\7\27"+
    "\6\0\26\27\3\0\1\27\1\u01f5\31\27\21\0\7\27"+
    "\6\0\26\27\3\0\6\27\1\u01f6\24\27\21\0\7\27"+
    "\6\0\26\27\3\0\5\27\1\u01f7\25\27\21\0\7\27"+
    "\6\0\26\27\3\0\5\27\1\u01f8\25\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\u01f9\21\27\21\0\7\27"+
    "\6\0\26\27\3\0\25\27\1\u01fa\5\27\21\0\7\27"+
    "\6\0\26\27\3\0\15\27\1\u01fb\15\27\21\0\7\27"+
    "\6\0\26\27\3\0\1\27\1\u01fc\31\27\21\0\7\27"+
    "\6\0\26\27\3\0\17\27\1\u01fd\13\27\21\0\7\27"+
    "\6\0\26\27\3\0\14\27\1\u01fe\16\27\21\0\7\27"+
    "\6\0\26\27\3\0\16\27\1\u01ff\14\27\21\0\7\27"+
    "\6\0\26\27\3\0\5\27\1\u0200\25\27\21\0\7\27"+
    "\6\0\26\27\3\0\14\27\1\u0201\2\27\1\u0202\13\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u0203\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\14\27\1\u0204\16\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u0205\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u0206\31\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u0207\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u0193\31\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u0208\3\27"+
    "\1\u0209\7\27\1\u020a\15\27\21\0\7\27\6\0\26\27"+
    "\3\0\15\27\1\u020b\15\27\21\0\7\27\6\0\26\27"+
    "\3\0\3\27\1\u020c\27\27\21\0\7\27\6\0\26\27"+
    "\3\0\2\27\1\u020d\30\27\21\0\7\27\6\0\26\27"+
    "\3\0\17\27\1\u020e\13\27\21\0\7\27\6\0\26\27"+
    "\3\0\25\27\1\u020f\5\27\21\0\7\27\6\0\26\27"+
    "\3\0\11\27\1\u0210\21\27\21\0\7\27\6\0\26\27"+
    "\3\0\5\27\1\u0211\25\27\21\0\7\27\6\0\26\27"+
    "\3\0\4\27\1\u014b\26\27\21\0\7\27\6\0\26\27"+
    "\3\0\14\27\1\u0212\2\27\1\u0213\13\27\21\0\7\27"+
    "\6\0\26\27\3\0\14\27\1\u0214\16\27\21\0\7\27"+
    "\6\0\26\27\3\0\5\27\1\u0215\25\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\u0216\21\27\21\0\7\27"+
    "\6\0\26\27\3\0\24\27\1\u0217\6\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\u0218\21\27\21\0\7\27"+
    "\6\0\26\27\3\0\24\27\1\u0219\6\27\21\0\7\27"+
    "\6\0\26\27\3\0\5\27\1\u021a\11\27\1\u021b\13\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u021c\31\27"+
    "\21\0\7\27\6\0\26\27\3\0\16\27\1\u021d\14\27"+
    "\21\0\7\27\6\0\26\27\3\0\2\27\1\u021e\30\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u021f\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\13\27\1\u0220\17\27"+
    "\21\0\7\27\6\0\26\27\3\0\7\27\1\u013d\23\27"+
    "\21\0\7\27\6\0\26\27\3\0\20\27\1\362\12\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u0221\31\27"+
    "\21\0\7\27\6\0\26\27\3\0\3\27\1\u0222\27\27"+
    "\21\0\7\27\6\0\26\27\3\0\25\27\1\u0223\5\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u0224\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\11\27\1\u0225\21\27"+
    "\21\0\7\27\6\0\26\27\3\0\24\27\1\u0226\6\27"+
    "\21\0\7\27\6\0\26\27\3\0\24\27\1\u0227\6\27"+
    "\21\0\7\27\6\0\26\27\3\0\24\27\1\u0228\6\27"+
    "\21\0\7\27\6\0\26\27\3\0\14\27\1\u0229\16\27"+
    "\21\0\7\27\6\0\26\27\3\0\16\27\1\u022a\14\27"+
    "\21\0\7\27\6\0\26\27\3\0\16\27\1\u0166\14\27"+
    "\21\0\7\27\6\0\26\27\3\0\14\27\1\u0165\16\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u022b\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u022c\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u022d\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u022e\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\13\27\1\u022f\17\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u0230\22\27"+
    "\1\u0231\6\27\21\0\7\27\6\0\26\27\3\0\23\27"+
    "\1\u0232\7\27\21\0\7\27\6\0\26\27\3\0\7\27"+
    "\1\u0233\23\27\21\0\7\27\6\0\26\27\3\0\26\27"+
    "\1\u0234\4\27\21\0\7\27\6\0\26\27\3\0\3\27"+
    "\1\u0235\14\27\1\u0236\3\27\1\u0237\6\27\21\0\7\27"+
    "\6\0\26\27\3\0\14\27\1\u0238\16\27\21\0\7\27"+
    "\6\0\26\27\3\0\14\27\1\u0239\16\27\21\0\7\27"+
    "\6\0\26\27\3\0\23\27\1\u023a\7\27\21\0\7\27"+
    "\6\0\26\27\3\0\4\27\1\u023b\26\27\21\0\7\27"+
    "\6\0\26\27\3\0\17\27\1\u023c\13\27\21\0\7\27"+
    "\6\0\26\27\3\0\17\27\1\u0227\13\27\6\0\1\u023d"+
    "\12\0\7\27\6\0\26\27\3\0\33\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\u023e\21\27\21\0\7\27"+
    "\6\0\26\27\3\0\17\27\1\u023f\13\27\21\0\7\27"+
    "\6\0\26\27\3\0\25\27\1\u0240\5\27\21\0\7\27"+
    "\6\0\26\27\3\0\24\27\1\u0241\6\27\21\0\7\27"+
    "\6\0\26\27\3\0\22\27\1\u0242\2\27\1\u0243\5\27"+
    "\21\0\7\27\6\0\26\27\3\0\20\27\1\u0244\12\27"+
    "\21\0\7\27\6\0\26\27\3\0\14\27\1\u0245\16\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u0246\1\u0247"+
    "\24\27\21\0\7\27\6\0\26\27\3\0\22\27\1\u0193"+
    "\10\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u0248"+
    "\14\27\21\0\7\27\6\0\26\27\3\0\5\27\1\u0249"+
    "\25\27\21\0\7\27\6\0\26\27\3\0\3\27\1\u024a"+
    "\20\27\1\u024b\6\27\21\0\7\27\6\0\26\27\3\0"+
    "\11\27\1\u024c\13\27\1\u024d\5\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u024e\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u024f\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\3\27\1\u0250\27\27\21\0\7\27\6\0"+
    "\26\27\3\0\23\27\1\u0247\7\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u0251\11\27\1\u0252\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u0253\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u0254\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u013d\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u015b\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\10\27\1\u0255\22\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u0256\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u0257\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u0258\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u0259\31\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u025a\7\27\1\u025b"+
    "\21\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u025c"+
    "\21\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u025d"+
    "\14\27\21\0\7\27\6\0\26\27\3\0\25\27\1\u025e"+
    "\5\27\21\0\7\27\6\0\26\27\3\0\24\27\1\u025f"+
    "\6\27\21\0\7\27\6\0\26\27\3\0\4\27\1\u0260"+
    "\26\27\21\0\7\27\6\0\26\27\3\0\1\27\1\u0261"+
    "\31\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u0262"+
    "\14\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u01e6"+
    "\3\27\1\u0263\10\27\21\0\7\27\6\0\26\27\3\0"+
    "\14\27\1\u0264\16\27\21\0\7\27\6\0\26\27\3\0"+
    "\10\27\1\u0265\22\27\21\0\7\27\6\0\26\27\3\0"+
    "\14\27\1\u0266\16\27\21\0\7\u0267\6\0\6\u0267\24\0"+
    "\6\u0267\45\0\7\27\6\0\3\27\1\u0268\22\27\3\0"+
    "\33\27\21\0\7\27\6\0\21\27\1\u0269\4\27\3\0"+
    "\33\27\21\0\7\27\6\0\15\27\1\u026a\10\27\3\0"+
    "\33\27\21\0\7\27\6\0\20\27\1\u026b\5\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\24\27\1\u026c"+
    "\6\27\21\0\7\27\6\0\26\27\3\0\15\27\1\u026d"+
    "\15\27\21\0\7\27\6\0\15\27\1\u026e\10\27\3\0"+
    "\33\27\21\0\7\27\6\0\20\27\1\u026f\5\27\3\0"+
    "\33\27\21\0\7\27\6\0\12\27\1\u0270\13\27\3\0"+
    "\33\27\21\0\7\27\6\0\16\27\1\u0271\7\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u0272"+
    "\14\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u0273"+
    "\21\27\21\0\7\27\6\0\25\27\1\u01be\3\0\33\27"+
    "\21\0\7\27\6\0\4\27\1\u0274\21\27\3\0\33\27"+
    "\21\0\7\27\6\0\17\27\1\u0275\6\27\3\0\33\27"+
    "\21\0\7\27\6\0\23\27\1\u0276\2\27\3\0\33\27"+
    "\21\0\7\27\6\0\26\27\3\0\20\27\1\u0277\12\27"+
    "\21\0\7\27\6\0\22\27\1\u0278\3\27\3\0\33\27"+
    "\21\0\7\27\6\0\20\27\1\u0279\5\27\3\0\33\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u027a\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\14\27\1\u027b\16\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u027c\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\24\27\1\u027d\6\27"+
    "\21\0\7\27\6\0\22\27\1\u027e\3\27\3\0\33\27"+
    "\21\0\7\27\6\0\10\27\1\u027f\15\27\3\0\33\27"+
    "\21\0\7\27\6\0\4\27\1\u0280\21\27\3\0\33\27"+
    "\21\0\7\27\6\0\20\27\1\u0281\5\27\3\0\33\27"+
    "\21\0\7\27\6\0\1\u0282\25\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\13\27\1\u0283\17\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u0284\31\27\21\0"+
    "\7\27\6\0\26\27\3\0\7\27\1\u01d9\23\27\21\0"+
    "\7\27\6\0\10\27\1\315\15\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\14\27\1\u0285\16\27\21\0"+
    "\7\27\6\0\26\27\3\0\20\27\1\u0286\12\27\21\0"+
    "\7\27\6\0\26\27\3\0\11\27\1\u0287\21\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u0288\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\7\27\1\u0289\23\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u028a\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u028b\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u0251\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\u028c\32\27\21\0\7\27"+
    "\6\0\26\27\3\0\13\27\1\u028d\17\27\21\0\7\27"+
    "\6\0\26\27\3\0\22\27\1\u028e\10\27\21\0\7\27"+
    "\6\0\26\27\3\0\23\27\1\u028f\7\27\21\0\7\27"+
    "\6\0\26\27\3\0\16\27\1\u0290\14\27\21\0\7\27"+
    "\6\0\26\27\3\0\27\27\1\u0291\3\27\21\0\7\27"+
    "\6\0\26\27\3\0\15\27\1\u0292\15\27\21\0\7\27"+
    "\6\0\26\27\3\0\16\27\1\u0293\14\27\21\0\7\27"+
    "\6\0\26\27\3\0\15\27\1\u0294\4\27\1\u0295\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\3\27\1\u0296\27\27"+
    "\21\0\7\27\6\0\26\27\3\0\24\27\1\u0297\6\27"+
    "\21\0\7\27\6\0\26\27\3\0\16\27\1\u026e\14\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u0298\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\13\27\1\u0299\17\27"+
    "\21\0\7\27\6\0\26\27\3\0\10\27\1\u0191\22\27"+
    "\21\0\7\27\6\0\26\27\3\0\13\27\1\u029a\17\27"+
    "\21\0\7\27\6\0\26\27\3\0\23\27\1\u029b\7\27"+
    "\21\0\7\27\6\0\26\27\3\0\24\27\1\u029c\6\27"+
    "\21\0\7\27\6\0\26\27\3\0\11\27\1\u029d\21\27"+
    "\6\0\1\u029e\12\0\7\27\6\0\26\27\3\0\33\27"+
    "\21\0\7\27\6\0\26\27\3\0\7\27\1\u029f\23\27"+
    "\21\0\7\27\6\0\26\27\3\0\15\27\1\u02a0\15\27"+
    "\21\0\7\27\6\0\26\27\3\0\25\27\1\u02a1\5\27"+
    "\21\0\7\27\6\0\26\27\3\0\16\27\1\u02a2\14\27"+
    "\21\0\7\27\6\0\26\27\3\0\7\27\1\u02a3\23\27"+
    "\21\0\7\27\6\0\26\27\3\0\26\27\1\u02a4\4\27"+
    "\21\0\7\27\6\0\26\27\3\0\14\27\1\u0120\16\27"+
    "\21\0\7\27\6\0\26\27\3\0\15\27\1\u02a5\15\27"+
    "\21\0\7\27\6\0\26\27\3\0\4\27\1\u02a6\26\27"+
    "\21\0\7\27\6\0\26\27\3\0\6\27\1\u02a7\24\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u02a8\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\14\27\1\u02a9\16\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u02aa\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\24\27\1\u02ab\6\27"+
    "\21\0\7\27\6\0\26\27\3\0\20\27\1\u02ac\12\27"+
    "\21\0\7\27\6\0\26\27\3\0\11\27\1\u02ad\21\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u02ae\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\16\27\1\u02af\3\27"+
    "\1\u02b0\10\27\21\0\7\27\6\0\26\27\3\0\4\27"+
    "\1\u02ab\26\27\21\0\7\27\6\0\26\27\3\0\14\27"+
    "\1\u02b1\16\27\21\0\7\27\6\0\26\27\3\0\4\27"+
    "\1\u02b2\26\27\21\0\7\27\6\0\26\27\3\0\14\27"+
    "\1\u02b3\16\27\21\0\7\27\6\0\26\27\3\0\1\27"+
    "\1\u02b4\7\27\1\u02b5\21\27\21\0\7\27\6\0\26\27"+
    "\3\0\24\27\1\u02b6\6\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\u02b7\31\27\21\0\7\27\6\0\26\27"+
    "\3\0\20\27\1\u02b8\12\27\21\0\7\27\6\0\26\27"+
    "\3\0\16\27\1\u02b9\14\27\21\0\7\27\6\0\26\27"+
    "\3\0\6\27\1\u01f7\24\27\21\0\7\27\6\0\26\27"+
    "\3\0\5\27\1\u02ba\3\27\1\u02bb\21\27\21\0\7\27"+
    "\6\0\26\27\3\0\22\27\1\u02bc\10\27\21\0\7\27"+
    "\6\0\26\27\3\0\25\27\1\u02bd\5\27\21\0\7\27"+
    "\6\0\26\27\3\0\30\27\1\u02be\2\27\21\0\7\27"+
    "\6\0\26\27\3\0\30\27\1\u02bf\2\27\21\0\7\27"+
    "\6\0\26\27\3\0\16\27\1\u02c0\14\27\21\0\7\27"+
    "\6\0\26\27\3\0\1\27\1\u02c1\31\27\21\0\7\27"+
    "\6\0\26\27\3\0\22\27\1\u02c2\10\27\21\0\7\27"+
    "\6\0\26\27\3\0\16\27\1\u02c3\14\27\21\0\7\27"+
    "\6\0\26\27\3\0\4\27\1\u02c4\26\27\21\0\7\27"+
    "\6\0\26\27\3\0\7\27\1\u02c5\23\27\21\0\7\27"+
    "\6\0\26\27\3\0\10\27\1\u01e6\22\27\21\0\7\27"+
    "\6\0\26\27\3\0\14\27\1\u02c6\16\27\21\0\7\27"+
    "\6\0\26\27\3\0\17\27\1\u02c7\3\27\1\u02c8\7\27"+
    "\21\0\7\27\6\0\26\27\3\0\26\27\1\u02c9\4\27"+
    "\21\0\7\27\6\0\26\27\3\0\31\27\1\u02ca\1\27"+
    "\21\0\7\27\6\0\26\27\3\0\17\27\1\u02cb\13\27"+
    "\21\0\7\27\6\0\26\27\3\0\25\27\1\u02cc\5\27"+
    "\21\0\7\27\6\0\26\27\3\0\3\27\1\u02cd\27\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u02ce\31\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u02cf\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u02d0\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u02d1\31\27"+
    "\21\0\7\27\6\0\26\27\3\0\15\27\1\u02d2\15\27"+
    "\21\0\7\27\6\0\26\27\3\0\11\27\1\u02d3\21\27"+
    "\21\0\7\27\6\0\26\27\3\0\15\27\1\u02d4\15\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u02d5\31\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u02d6\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u02d7\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\11\27\1\u02d8\21\27"+
    "\21\0\7\27\6\0\26\27\3\0\11\27\1\u02d9\21\27"+
    "\21\0\7\27\6\0\26\27\3\0\5\27\1\u02da\25\27"+
    "\21\0\7\27\6\0\26\27\3\0\17\27\1\u02db\13\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u02dc\10\27"+
    "\104\0\1\u02dd\36\0\7\27\6\0\26\27\3\0\23\27"+
    "\1\u02de\7\27\21\0\7\27\6\0\26\27\3\0\26\27"+
    "\1\u02df\4\27\21\0\7\27\6\0\26\27\3\0\11\27"+
    "\1\u02e0\21\27\21\0\7\27\6\0\26\27\3\0\22\27"+
    "\1\u02e1\10\27\21\0\7\27\6\0\26\27\3\0\31\27"+
    "\1\u02e2\1\27\21\0\7\27\6\0\26\27\3\0\22\27"+
    "\1\u02e3\10\27\21\0\7\27\6\0\26\27\3\0\5\27"+
    "\1\u02e4\25\27\21\0\7\27\6\0\26\27\3\0\5\27"+
    "\1\u02e5\25\27\21\0\7\27\6\0\26\27\3\0\3\27"+
    "\1\u02e6\27\27\21\0\7\27\6\0\26\27\3\0\5\27"+
    "\1\u02e7\25\27\21\0\7\27\6\0\26\27\3\0\17\27"+
    "\1\u02e8\13\27\21\0\7\27\6\0\26\27\3\0\13\27"+
    "\1\u02e9\17\27\21\0\7\27\6\0\26\27\3\0\11\27"+
    "\1\u02ea\21\27\21\0\7\27\6\0\26\27\3\0\16\27"+
    "\1\u02eb\14\27\21\0\7\27\6\0\26\27\3\0\3\27"+
    "\1\u02ec\27\27\21\0\7\27\6\0\26\27\3\0\22\27"+
    "\1\u02ed\10\27\21\0\7\27\6\0\26\27\3\0\3\27"+
    "\1\u02ee\27\27\21\0\7\27\6\0\26\27\3\0\10\27"+
    "\1\u02ef\22\27\21\0\7\27\6\0\26\27\3\0\1\27"+
    "\1\u02f0\31\27\21\0\7\27\6\0\26\27\3\0\27\27"+
    "\1\u02da\3\27\21\0\7\27\6\0\26\27\3\0\23\27"+
    "\1\u02f1\7\27\6\0\1\u02f2\12\0\7\27\6\0\26\27"+
    "\3\0\4\27\1\u02f3\12\27\1\u02f4\13\27\21\0\7\27"+
    "\6\0\26\27\3\0\5\27\1\u02f5\25\27\21\0\7\27"+
    "\6\0\26\27\3\0\6\27\1\u02f6\24\27\21\0\7\27"+
    "\6\0\26\27\3\0\16\27\1\u02f7\14\27\21\0\7\27"+
    "\6\0\26\27\3\0\23\27\1\u02f8\7\27\21\0\7\27"+
    "\6\0\26\27\3\0\16\27\1\u015d\14\27\21\0\7\27"+
    "\6\0\26\27\3\0\6\27\1\u02f9\24\27\21\0\7\27"+
    "\6\0\26\27\3\0\7\27\1\u0187\23\27\21\0\7\27"+
    "\6\0\26\27\3\0\14\27\1\362\16\27\21\0\7\27"+
    "\6\0\26\27\3\0\7\27\1\u02fa\23\27\21\0\7\27"+
    "\6\0\26\27\3\0\5\27\1\u02fb\25\27\21\0\7\27"+
    "\6\0\26\27\3\0\25\27\1\u02fc\5\27\21\0\7\27"+
    "\6\0\26\27\3\0\24\27\1\u02fd\6\27\21\0\7\27"+
    "\6\0\26\27\3\0\11\27\1\u02fe\21\27\21\0\7\27"+
    "\6\0\26\27\3\0\5\27\1\u02ff\25\27\21\0\7\27"+
    "\6\0\26\27\3\0\5\27\1\362\25\27\21\0\7\27"+
    "\6\0\26\27\3\0\4\27\1\u0300\26\27\21\0\7\u0301"+
    "\6\0\6\u0301\24\0\6\u0301\45\0\7\27\6\0\21\27"+
    "\1\u0302\4\27\3\0\33\27\21\0\7\27\6\0\2\27"+
    "\1\u0303\23\27\3\0\33\27\21\0\7\27\6\0\26\27"+
    "\3\0\5\27\1\u0304\25\27\21\0\7\27\6\0\26\27"+
    "\3\0\5\27\1\u0305\25\27\21\0\7\27\6\0\25\27"+
    "\1\u0306\3\0\33\27\21\0\7\27\6\0\14\27\1\u0278"+
    "\11\27\3\0\33\27\21\0\7\27\6\0\26\27\3\0"+
    "\24\27\1\u0307\6\27\21\0\7\27\6\0\26\27\3\0"+
    "\17\27\1\u0308\13\27\21\0\7\27\6\0\4\27\1\u0299"+
    "\21\27\3\0\33\27\21\0\7\27\6\0\1\u0309\25\27"+
    "\3\0\33\27\21\0\7\27\6\0\26\27\3\0\24\27"+
    "\1\u030a\6\27\21\0\7\27\6\0\1\u030b\25\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\14\27\1\u030c"+
    "\16\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u030d"+
    "\21\27\21\0\7\27\6\0\26\27\3\0\31\27\1\u01c6"+
    "\1\27\21\0\7\27\6\0\26\27\3\0\17\27\1\u030e"+
    "\13\27\21\0\7\27\6\0\10\27\1\u030f\15\27\3\0"+
    "\33\27\21\0\7\27\6\0\16\27\1\u0310\7\27\3\0"+
    "\33\27\21\0\7\27\6\0\4\27\1\u0311\21\27\3\0"+
    "\33\27\21\0\7\27\6\0\3\27\1\u0312\22\27\3\0"+
    "\33\27\21\0\7\27\6\0\2\27\1\u0313\23\27\3\0"+
    "\33\27\21\0\7\27\6\0\22\27\1\u0314\3\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\4\27\1\u0315"+
    "\26\27\21\0\7\27\6\0\26\27\3\0\14\27\1\u0316"+
    "\16\27\21\0\7\27\6\0\26\27\3\0\15\27\1\u0317"+
    "\15\27\21\0\7\27\6\0\26\27\3\0\22\27\1\u0318"+
    "\10\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u0319"+
    "\21\27\21\0\7\27\6\0\26\27\3\0\24\27\1\u031a"+
    "\6\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u031b"+
    "\21\27\21\0\7\27\6\0\26\27\3\0\5\27\1\u031c"+
    "\3\27\1\u031d\21\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u031e\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\1\27\1\u031f\31\27\21\0\7\27\6\0\26\27\3\0"+
    "\1\27\1\u0320\15\27\1\u0321\13\27\21\0\7\27\6\0"+
    "\26\27\3\0\23\27\1\u0322\7\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u0323\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\4\27\1\u0324\26\27\21\0\7\27\6\0"+
    "\26\27\3\0\2\27\1\u0325\30\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u0326\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\1\27\1\u0327\31\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u0328\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u0329\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\16\27\1\u032a\14\27\75\0\1\u032b\2\0"+
    "\1\u032c\42\0\7\27\6\0\26\27\3\0\7\27\1\u032d"+
    "\23\27\21\0\7\27\6\0\26\27\3\0\1\27\1\u032e"+
    "\31\27\21\0\7\27\6\0\26\27\3\0\14\27\1\u032f"+
    "\16\27\21\0\7\27\6\0\26\27\3\0\5\27\1\u0330"+
    "\25\27\21\0\7\27\6\0\26\27\3\0\1\27\1\u0331"+
    "\31\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u0332"+
    "\21\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u0333"+
    "\21\27\21\0\7\27\6\0\26\27\3\0\5\27\1\u0334"+
    "\25\27\21\0\7\27\6\0\26\27\3\0\23\27\1\u0335"+
    "\7\27\21\0\7\27\6\0\26\27\3\0\24\27\1\u0191"+
    "\6\27\21\0\7\27\6\0\26\27\3\0\3\27\1\u0336"+
    "\27\27\21\0\7\27\6\0\26\27\3\0\24\27\1\u0337"+
    "\6\27\21\0\7\27\6\0\26\27\3\0\4\27\1\u0338"+
    "\26\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u0339"+
    "\14\27\21\0\7\27\6\0\26\27\3\0\14\27\1\u033a"+
    "\16\27\21\0\7\27\6\0\26\27\3\0\14\27\1\u033b"+
    "\16\27\21\0\7\27\6\0\26\27\3\0\3\27\1\u033c"+
    "\27\27\21\0\7\27\6\0\26\27\3\0\7\27\1\u02b0"+
    "\23\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u033d"+
    "\21\27\21\0\7\27\6\0\26\27\3\0\14\27\1\u033e"+
    "\16\27\21\0\7\27\6\0\26\27\3\0\7\27\1\u033f"+
    "\23\27\21\0\7\27\6\0\26\27\3\0\15\27\1\u0340"+
    "\15\27\21\0\7\27\6\0\26\27\3\0\3\27\1\u0341"+
    "\27\27\21\0\7\27\6\0\26\27\3\0\24\27\1\u0342"+
    "\6\27\21\0\7\27\6\0\26\27\3\0\4\27\1\u0343"+
    "\26\27\21\0\7\27\6\0\26\27\3\0\5\27\1\u0344"+
    "\25\27\21\0\7\27\6\0\26\27\3\0\14\27\1\u0345"+
    "\5\27\1\u0345\10\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u0346\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\16\27\1\u0347\14\27\21\0\7\27\6\0\26\27\3\0"+
    "\6\27\1\u0348\7\27\1\u0349\14\27\21\0\7\27\6\0"+
    "\26\27\3\0\3\27\1\u034a\27\27\21\0\7\27\6\0"+
    "\26\27\3\0\1\27\1\u034b\31\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u034c\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u034d\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\6\27\1\u034e\24\27\21\0\7\27\6\0"+
    "\26\27\3\0\20\27\1\u034f\12\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u0350\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\20\27\1\u0351\12\27\21\0\7\27\6\0"+
    "\26\27\3\0\3\27\1\u020d\27\27\21\0\7\27\6\0"+
    "\26\27\3\0\14\27\1\u0352\16\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u0353\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u0354\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\2\27\1\u0355\30\27\21\0\7\27\6\0"+
    "\26\27\3\0\11\27\1\u0356\21\27\21\0\7\27\6\0"+
    "\26\27\3\0\7\27\1\u0357\23\27\21\0\7\27\6\0"+
    "\26\27\3\0\23\27\1\u0358\7\27\21\0\7\27\6\0"+
    "\26\27\3\0\1\27\1\u0359\31\27\21\0\7\27\6\0"+
    "\26\27\3\0\1\27\1\u035a\31\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u035b\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\22\27\1\u035c\10\27\21\0\7\27\6\0"+
    "\26\27\3\0\3\27\1\u035d\27\27\21\0\7\27\6\0"+
    "\26\27\3\0\3\27\1\u035e\27\27\21\0\7\27\6\0"+
    "\26\27\3\0\6\27\1\u035f\24\27\21\0\7\27\6\0"+
    "\26\27\3\0\16\27\1\u0360\14\27\21\0\7\27\6\0"+
    "\26\27\3\0\4\27\1\u0361\26\27\114\0\1\u0362\26\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u0363\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u0364\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\22\27\1\u0365\10\27\21\0"+
    "\7\27\6\0\26\27\3\0\11\27\1\u0366\21\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u0367\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\4\27\1\u0368\26\27\21\0"+
    "\7\27\6\0\26\27\3\0\4\27\1\u0369\26\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u036a\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\4\27\1\u036b\26\27\21\0"+
    "\7\27\6\0\26\27\3\0\6\27\1\u036c\24\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u036d\31\27\21\0"+
    "\7\27\6\0\26\27\3\0\3\27\1\u036e\27\27\21\0"+
    "\7\27\6\0\26\27\3\0\7\27\1\u036f\23\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u02f7\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\10\27\1\u0370\22\27\21\0"+
    "\7\27\6\0\26\27\3\0\22\27\1\u0371\10\27\21\0"+
    "\7\27\6\0\26\27\3\0\4\27\1\u0372\26\27\21\0"+
    "\7\27\6\0\26\27\3\0\11\27\1\u0373\21\27\75\0"+
    "\1\u0374\2\0\1\u0375\42\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u0376\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\6\27\1\u0377\24\27\21\0\7\27\6\0\26\27\3\0"+
    "\3\27\1\u0378\27\27\21\0\7\27\6\0\26\27\3\0"+
    "\23\27\1\u01f7\7\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u0379\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\1\27\1\u037a\31\27\21\0\7\27\6\0\26\27\3\0"+
    "\11\27\1\u037b\21\27\21\0\7\27\6\0\26\27\3\0"+
    "\16\27\1\u037c\14\27\21\0\7\77\6\0\6\77\24\0"+
    "\6\77\45\0\7\27\6\0\10\27\1\u037d\15\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\22\27\1\u037e"+
    "\10\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u037f"+
    "\14\27\16\0\1\u0380\2\0\7\27\6\0\26\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\5\27\1\u0381"+
    "\25\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u0382"+
    "\14\27\21\0\7\27\6\0\22\27\1\u0383\3\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u0384"+
    "\21\27\21\0\7\27\6\0\22\27\1\u0385\3\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\17\27\1\u0386"+
    "\13\27\21\0\7\27\6\0\26\27\3\0\4\27\1\u0387"+
    "\26\27\21\0\7\27\6\0\26\27\3\0\22\27\1\u0220"+
    "\10\27\21\0\7\27\6\0\16\27\1\u0388\7\27\3\0"+
    "\33\27\21\0\7\27\6\0\23\27\1\u0389\2\27\3\0"+
    "\33\27\21\0\7\27\6\0\3\27\1\u038a\22\27\3\0"+
    "\33\27\21\0\7\27\6\0\21\27\1\u038b\4\27\3\0"+
    "\33\27\21\0\7\27\6\0\10\27\1\u038c\15\27\3\0"+
    "\33\27\21\0\7\27\6\0\26\27\3\0\22\27\1\u038d"+
    "\10\27\21\0\7\27\6\0\26\27\3\0\5\27\1\u038e"+
    "\25\27\21\0\7\27\6\0\26\27\3\0\1\27\1\u038f"+
    "\31\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u0390"+
    "\21\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u0391"+
    "\14\27\21\0\7\27\6\0\26\27\3\0\25\27\1\u0392"+
    "\5\27\21\0\7\27\6\0\26\27\3\0\3\27\1\u0393"+
    "\27\27\21\0\7\27\6\0\26\27\3\0\15\27\1\u0394"+
    "\15\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u0395"+
    "\14\27\21\0\7\27\6\0\26\27\3\0\4\27\1\u0396"+
    "\26\27\21\0\7\27\6\0\26\27\3\0\3\27\1\u0397"+
    "\27\27\21\0\7\27\6\0\26\27\3\0\23\27\1\u0398"+
    "\7\27\21\0\7\27\6\0\26\27\3\0\6\27\1\u0399"+
    "\24\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u039a"+
    "\14\27\21\0\7\27\6\0\26\27\3\0\11\27\1\u039b"+
    "\21\27\21\0\7\27\6\0\26\27\3\0\14\27\1\u039c"+
    "\16\27\21\0\7\27\6\0\26\27\3\0\16\27\1\u0285"+
    "\14\27\21\0\7\27\6\0\26\27\3\0\4\27\1\u039d"+
    "\26\27\21\0\7\27\6\0\26\27\3\0\30\27\1\u039e"+
    "\2\27\21\0\7\27\6\0\26\27\3\0\25\27\1\u039f"+
    "\5\27\70\0\1\u03a0\136\0\1\u03a1\35\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u03a2\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\14\27\1\u013d\16\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u03a3\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\4\27\1\u03a4\26\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u03a5\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\16\27\1\u03a6\14\27\21\0\7\27\6\0"+
    "\26\27\3\0\3\27\1\u03a7\27\27\21\0\7\27\6\0"+
    "\26\27\3\0\11\27\1\u03a8\21\27\21\0\7\27\6\0"+
    "\26\27\3\0\23\27\1\u03a9\7\27\21\0\7\27\6\0"+
    "\26\27\3\0\31\27\1\u0191\1\27\21\0\7\27\6\0"+
    "\26\27\3\0\10\27\1\362\22\27\21\0\7\27\6\0"+
    "\26\27\3\0\17\27\1\u03aa\13\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u03ab\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\11\27\1\u03ac\21\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u03ad\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\22\27\1\u02ab\10\27\21\0\7\27\6\0"+
    "\26\27\3\0\3\27\1\u03ae\27\27\21\0\7\27\6\0"+
    "\26\27\3\0\1\27\1\u03af\31\27\21\0\7\27\6\0"+
    "\26\27\3\0\1\27\1\u03b0\31\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u03b1\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\4\27\1\u03b2\26\27\21\0\7\27\6\0"+
    "\26\27\3\0\1\27\1\u03b3\31\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u03b4\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\14\27\1\u03b5\16\27\21\0\7\27\6\0"+
    "\26\27\3\0\17\27\1\u03b6\13\27\21\0\7\27\6\0"+
    "\26\27\3\0\31\27\1\u03b7\1\27\21\0\7\27\6\0"+
    "\26\27\3\0\4\27\1\u03b8\26\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u03b9\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\14\27\1\u03ba\16\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u035e\25\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u03bb\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u03bc\6\27\21\0\7\27\6\0"+
    "\26\27\3\0\11\27\1\u03bd\21\27\21\0\7\27\6\0"+
    "\26\27\3\0\14\27\1\u03be\16\27\113\0\1\u03bf\27\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u03c0\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u03c1\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\3\27\1\u03c2\27\27\21\0"+
    "\7\27\6\0\26\27\3\0\14\27\1\u03c3\16\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\u03c4\32\27\21\0\7\27"+
    "\6\0\26\27\3\0\17\27\1\u03c5\13\27\21\0\7\27"+
    "\6\0\26\27\3\0\1\u03c6\32\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u03c7\25\27\70\0\1\u03c8\136\0"+
    "\1\u03c9\35\0\7\27\6\0\26\27\3\0\6\27\1\u03b4"+
    "\24\27\21\0\7\27\6\0\26\27\3\0\1\u03ca\32\27"+
    "\21\0\7\27\6\0\26\27\3\0\13\27\1\u03cb\17\27"+
    "\21\0\7\27\6\0\26\27\3\0\14\27\1\u03cc\16\27"+
    "\21\0\7\27\6\0\26\27\3\0\14\27\1\u03cd\16\27"+
    "\21\0\7\27\6\0\26\27\3\0\7\27\1\u03ce\23\27"+
    "\21\0\7\27\6\0\15\27\1\u03cf\10\27\3\0\33\27"+
    "\21\0\7\27\6\0\26\27\3\0\1\27\1\u03d0\31\27"+
    "\21\0\7\27\6\0\26\27\3\0\24\27\1\u03d1\6\27"+
    "\40\0\1\u03d2\16\0\1\u03d3\63\0\7\27\6\0\26\27"+
    "\3\0\7\27\1\u03d4\23\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\u03d5\31\27\21\0\7\27\6\0\4\27"+
    "\1\u03d6\21\27\3\0\33\27\21\0\7\27\6\0\26\27"+
    "\3\0\17\27\1\u03d7\13\27\21\0\7\27\6\0\4\27"+
    "\1\u03d8\21\27\3\0\33\27\21\0\7\27\6\0\26\27"+
    "\3\0\3\27\1\u03d9\27\27\21\0\7\27\6\0\16\27"+
    "\1\u03da\7\27\3\0\33\27\21\0\7\27\6\0\15\27"+
    "\1\u03db\10\27\3\0\33\27\21\0\7\27\6\0\21\27"+
    "\1\u03dc\4\27\3\0\33\27\21\0\7\27\6\0\15\27"+
    "\1\u03dd\10\27\3\0\33\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\u03de\31\27\21\0\7\27\6\0\26\27"+
    "\3\0\30\27\1\u013d\2\27\21\0\7\27\6\0\26\27"+
    "\3\0\14\27\1\u03df\16\27\21\0\7\27\6\0\26\27"+
    "\3\0\3\27\1\u03e0\27\27\21\0\7\27\6\0\26\27"+
    "\3\0\1\27\1\u03e1\31\27\21\0\7\27\6\0\26\27"+
    "\3\0\22\27\1\u03e2\10\27\21\0\7\27\6\0\26\27"+
    "\3\0\2\27\1\u03e3\30\27\21\0\7\27\6\0\26\27"+
    "\3\0\3\27\1\u03e4\27\27\21\0\7\27\6\0\26\27"+
    "\3\0\24\27\1\u0369\6\27\21\0\7\27\6\0\26\27"+
    "\3\0\24\27\1\u03e5\6\27\21\0\7\27\6\0\26\27"+
    "\3\0\16\27\1\u03e6\14\27\21\0\7\27\6\0\26\27"+
    "\3\0\31\27\1\u034d\1\27\21\0\7\27\6\0\26\27"+
    "\3\0\20\27\1\u03e7\12\27\21\0\7\27\6\0\26\27"+
    "\3\0\5\27\1\u020e\25\27\104\0\1\u03e8\127\0\1\u03e9"+
    "\30\0\7\27\6\0\26\27\3\0\22\27\1\u03ea\10\27"+
    "\21\0\7\27\5\0\1\u03eb\26\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u01c6\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\7\27\1\u03ec\23\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u03ed\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\232\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u03ee\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u03ef\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u03f0\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\3\27\1\u03a5\27\27\21\0"+
    "\7\27\6\0\26\27\3\0\14\27\1\u035e\16\27\21\0"+
    "\7\27\6\0\16\27\1\u03f1\7\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\3\27\1\u03f2\27\27\21\0"+
    "\7\27\6\0\26\27\3\0\22\27\1\u03f3\10\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u03f4\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\31\27\1\u02ab\1\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u03f5\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u03f6\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\31\27\1\u03f7\1\27\21\0"+
    "\7\27\6\0\26\27\3\0\22\27\1\u03f8\10\27\21\0"+
    "\7\27\6\0\26\27\3\0\4\27\1\u03f9\26\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u03fa\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\14\27\1\u03fb\16\27\21\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u03fc\31\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u03fd\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\14\27\1\u03fe\16\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u03ff\14\27\104\0"+
    "\1\u0400\127\0\1\u0401\30\0\7\27\6\0\26\27\3\0"+
    "\25\27\1\u0402\5\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u0403\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u0404\25\27\21\0\7\27\6\0\6\27\1\u0405"+
    "\17\27\3\0\33\27\21\0\7\27\6\0\26\27\3\0"+
    "\24\27\1\u0406\6\27\21\0\7\27\6\0\4\27\1\u0407"+
    "\21\27\3\0\33\27\45\0\1\u0408\121\0\1\u0409\75\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u040a\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\22\27\1\u040b\10\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u040c\14\27\21\0"+
    "\7\27\6\0\26\27\3\0\13\27\1\u040d\17\27\21\0"+
    "\7\27\6\0\26\27\3\0\20\27\1\u040e\12\27\21\0"+
    "\7\27\6\0\6\27\1\u040f\17\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\3\27\1\u0410\27\27\21\0"+
    "\1\27\1\u0411\1\27\1\243\1\27\1\227\1\27\6\0"+
    "\26\27\3\0\33\27\21\0\7\27\6\0\26\27\3\0"+
    "\22\27\1\u0412\10\27\21\0\7\27\6\0\26\27\3\0"+
    "\16\27\1\u0413\14\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u0414\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\14\27\1\u0415\16\27\21\0\7\27\6\0\26\27\3\0"+
    "\23\27\1\u0416\7\27\21\0\7\27\6\0\26\27\3\0"+
    "\7\27\1\u03b7\23\27\21\0\7\27\6\0\26\27\3\0"+
    "\22\27\1\u0417\10\27\100\0\1\u0418\134\0\1\u0419\14\0"+
    "\1\u041a\12\0\7\27\6\0\26\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u041b\6\27\21\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u03f1\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\6\27\1\u041c\24\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u041d\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\4\27\1\u035e\26\27\21\0"+
    "\7\27\6\0\26\27\3\0\4\27\1\u041e\26\27\21\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u041f\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\23\27\1\u0420\7\27\21\0"+
    "\7\27\6\0\26\27\3\0\11\27\1\u0421\21\27\21\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u0422\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\24\27\1\u0423\6\27\100\0"+
    "\1\u0424\134\0\1\u0425\27\0\7\27\6\0\26\27\3\0"+
    "\16\27\1\u0426\14\27\21\0\7\27\6\0\26\27\3\0"+
    "\4\27\1\u0427\26\27\21\0\7\27\6\0\26\27\3\0"+
    "\17\27\1\u0428\13\27\21\0\7\27\6\0\26\27\3\0"+
    "\30\27\1\u0429\2\27\36\0\1\u042a\137\0\1\u042b\66\0"+
    "\7\27\6\0\26\27\3\0\22\27\1\u013d\10\27\21\0"+
    "\7\27\6\0\26\27\3\0\31\27\1\u042c\1\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u042d\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u042e\25\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u042f\25\27\21\0"+
    "\2\27\1\u0430\4\27\6\0\26\27\3\0\33\27\21\0"+
    "\7\27\6\0\26\27\3\0\31\27\1\u013d\1\27\21\0"+
    "\7\27\6\0\26\27\3\0\4\27\1\u0431\26\27\21\0"+
    "\7\27\6\0\26\27\3\0\25\27\1\u0432\5\27\103\0"+
    "\1\u0433\106\0\1\u0434\131\0\1\u0435\42\0\7\27\6\0"+
    "\26\27\3\0\23\27\1\u0436\7\27\21\0\7\27\6\0"+
    "\26\27\3\0\3\27\1\u0437\27\27\21\0\7\27\6\0"+
    "\26\27\3\0\23\27\1\u0438\7\27\21\0\7\27\6\0"+
    "\26\27\3\0\32\27\1\u0439\21\0\7\27\6\0\26\27"+
    "\3\0\3\27\1\u043a\27\27\103\0\1\u043b\106\0\1\u043c"+
    "\52\0\7\27\6\0\26\27\3\0\21\27\1\u043d\11\27"+
    "\21\0\7\27\6\0\26\27\3\0\22\27\1\u043e\10\27"+
    "\21\0\7\27\6\0\26\27\3\0\3\27\1\u043f\27\27"+
    "\56\0\1\u0440\121\0\1\u0441\64\0\7\27\6\0\26\27"+
    "\3\0\4\27\1\u0442\26\27\21\0\7\27\6\0\26\27"+
    "\3\0\22\27\1\u0443\10\27\21\0\6\27\1\u013d\6\0"+
    "\26\27\3\0\33\27\21\0\7\27\6\0\26\27\3\0"+
    "\4\27\1\u0444\26\27\120\0\1\u0445\106\0\1\u0446\121\0"+
    "\1\u0447\35\0\7\27\6\0\26\27\3\0\5\27\1\u0448"+
    "\25\27\21\0\7\27\6\0\26\27\3\0\5\27\1\u0449"+
    "\25\27\21\0\7\27\6\0\26\27\3\0\1\27\1\u044a"+
    "\31\27\120\0\1\u044b\106\0\1\u044c\35\0\7\27\6\0"+
    "\26\27\3\0\25\27\1\u044d\5\27\21\0\7\27\6\0"+
    "\26\27\3\0\5\27\1\u044e\25\27\60\0\1\u0440\62\0"+
    "\7\27\6\0\26\27\3\0\1\27\1\u044f\31\27\21\0"+
    "\7\27\6\0\26\27\3\0\5\27\1\u0450\25\27\72\0"+
    "\1\u0451\141\0\1\u0452\30\0\7\27\6\0\26\27\3\0"+
    "\22\27\1\u0453\10\27\21\0\7\27\6\0\26\27\3\0"+
    "\4\27\1\u0220\26\27\21\0\7\27\6\0\26\27\3\0"+
    "\14\27\1\u0454\16\27\72\0\1\u0455\50\0\7\27\6\0"+
    "\26\27\3\0\1\27\1\u0456\31\27\21\0\7\27\6\0"+
    "\26\27\3\0\20\27\1\u0457\12\27\21\0\7\27\6\0"+
    "\26\27\3\0\24\27\1\u0458\6\27\74\0\1\u0459\140\0"+
    "\1\u045a\27\0\7\27\6\0\26\27\3\0\24\27\1\u045b"+
    "\6\27\74\0\1\u045c\46\0\7\27\6\0\26\27\3\0"+
    "\14\27\1\u045d\16\27\21\0\7\27\6\0\26\27\3\0"+
    "\24\27\1\u045e\6\27\21\0\7\27\6\0\26\27\3\0"+
    "\11\27\1\u045f\21\27\70\0\1\u0460\52\0\7\27\6\0"+
    "\26\27\3\0\11\27\1\u0461\21\27\21\0\7\27\6\0"+
    "\26\27\3\0\17\27\1\u0462\13\27\105\0\1\u0463\35\0"+
    "\7\27\6\0\26\27\3\0\17\27\1\u0464\13\27\21\0"+
    "\7\27\6\0\26\27\3\0\16\27\1\u0465\14\27\72\0"+
    "\1\u0466\50\0\7\27\6\0\26\27\3\0\16\27\1\u0467"+
    "\14\27\21\0\7\27\6\0\4\27\1\u0468\21\27\3\0"+
    "\33\27\74\0\1\u0469\46\0\7\27\6\0\26\27\3\0"+
    "\30\27\1\u046a\2\27\21\0\7\27\6\0\26\27\3\0"+
    "\3\27\1\u046b\27\27\21\0\7\27\6\0\26\27\3\0"+
    "\5\27\1\u046c\25\27\21\0\7\27\6\0\26\27\3\0"+
    "\20\27\1\u046d\12\27\21\0\7\27\6\0\26\27\3\0"+
    "\24\27\1\u046e\6\27\21\0\7\27\6\0\26\27\3\0"+
    "\11\27\1\u046f\21\27\21\0\7\27\6\0\26\27\3\0"+
    "\17\27\1\u0470\13\27\21\0\7\27\6\0\26\27\3\0"+
    "\16\27\1\u0471\14\27\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[77080];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\3\11\1\1\1\11\2\1\1\11"+
    "\1\1\2\11\22\1\2\11\30\1\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\6\11\1\1\1\11\214\1\1\0"+
    "\2\11\314\1\1\0\225\1\1\0\51\1\1\0\66\1"+
    "\1\0\76\1\1\0\24\1\1\0\16\1\1\0\51\1"+
    "\2\0\65\1\1\0\21\1\2\0\12\1\1\0\37\1"+
    "\2\0\35\1\1\11\10\1\2\0\10\1\2\0\24\1"+
    "\2\0\1\1\1\11\24\1\2\0\6\1\2\0\16\1"+
    "\3\0\11\1\2\0\4\1\2\0\7\1\3\0\5\1"+
    "\2\0\3\1\1\11\1\0\3\1\1\11\2\0\3\1"+
    "\1\11\1\0\4\1\2\0\2\1\1\0\3\1\1\11"+
    "\1\0\1\1\1\11\3\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1137];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public class Token {
        public String token;
        public String valor;
        public boolean MultiLex;

        public Token(String token, String valor, Boolean MultiLex) {
            this.token = token;
            this.valor = valor;
            this.MultiLex = MultiLex;
        }
    }
    java.util.List<Token> listaDeTokens = new java.util.ArrayList<>();
    private java.util.HashMap<String, Integer> identificadores = new java.util.HashMap<>();
    private int contadorId = 0;
    public java.util.List<Token> getTokens() {
        return listaDeTokens;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { Token t = new Token("Error", yytext(), true);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 209: break;
          case 2:
            { /* ignorar */
            }
          // fall through
          case 210: break;
          case 3:
            { Token t = new Token("operador_referencia", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 211: break;
          case 4:
            { Token t = new Token("ParentesisAbierto", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 212: break;
          case 5:
            { Token t = new Token("ParentesisCerrado", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 213: break;
          case 6:
            { Token t = new Token("operador_aritmetico", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 214: break;
          case 7:
            { Token t = new Token("Punto", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 215: break;
          case 8:
            { Token t = new Token("Numerico", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 216: break;
          case 9:
            { Token t = new Token("puntodoble", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 217: break;
          case 10:
            { Token t = new Token("puntocoma", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 218: break;
          case 11:
            { Token t = new Token("operador_comparacion", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 219: break;
          case 12:
            { String text = yytext();
    int numero = identificadores.computeIfAbsent(text, k -> contadorId++);
    Token t = new Token("Identificador", String.valueOf(numero), true);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 220: break;
          case 13:
            { Token t = new Token("CorcheteAbierto", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 221: break;
          case 14:
            { Token t = new Token("CorcheteCerrado", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 222: break;
          case 15:
            { Token t = new Token("LlaveAbierta", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 223: break;
          case 16:
            { Token t = new Token("LlaveCerrada", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 224: break;
          case 17:
            { Token t = new Token("Literal", yytext(), false);
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 225: break;
          case 18:
            { Token t = new Token("operador_apuntador", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 226: break;
          case 19:
            { Token t = new Token("operador_diferencia", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 227: break;
          case 20:
            { Token t = new Token("operador", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 228: break;
          case 21:
            { Token t = new Token("Igualador", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 229: break;
          case 22:
            { Token t = new Token("operador_desplazamiento", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 230: break;
          case 23:
            { Token t = new Token("acceso_miembro_nulable", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 231: break;
          case 24:
            { Token t = new Token("operador_nulo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 232: break;
          case 25:
            { Token t = new Token("acceso_indexado_nulable", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 233: break;
          case 26:
            { Token t = new Token("conversion_tipo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 234: break;
          case 27:
            { Token t = new Token("ciclo", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 235: break;
          case 28:
            { Token t = new Token("declaracion_funcion", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 236: break;
          case 29:
            { Token t = new Token("pregunta", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 237: break;
          case 30:
            { Token t = new Token("parametro_entrada", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 238: break;
          case 31:
            { Token t = new Token("verificacion_tipo", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 239: break;
          case 32:
            { Token t = new Token("condicion_combinacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 240: break;
          case 33:
            { Token t = new Token("operador_logico", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 241: break;
          case 34:
            { Token t = new Token("separador", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 242: break;
          case 35:
            { Token t = new Token("asignacion_fusion_nulos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 243: break;
          case 36:
            { Token t = new Token("operador_agregacion", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 244: break;
          case 37:
            { Token t = new Token("cuantificador", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 245: break;
          case 38:
            { Token t = new Token("tipo_binario", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 246: break;
          case 39:
            { Token t = new Token("bloque_fin", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 247: break;
          case 40:
            { Token t = new Token("eliminacion_referencia", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 248: break;
          case 41:
            { Token t = new Token("tipo_numerico", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 249: break;
          case 42:
            { Token t = new Token("acceso_propiedad", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 250: break;
          case 43:
            { Token t = new Token("declaracion_variable", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 251: break;
          case 44:
            { Token t = new Token("bloque_monadico", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 252: break;
          case 45:
            { Token t = new Token("operador_modulo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 253: break;
          case 46:
            { Token t = new Token("instanciacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 254: break;
          case 47:
            { Token t = new Token("literal_referencia", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 255: break;
          case 48:
            { Token t = new Token("parametro_salida", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 256: break;
          case 49:
            { Token t = new Token("recursion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 257: break;
          case 50:
            { Token t = new Token("modificador_referencia", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 258: break;
          case 51:
            { Token t = new Token("asignacion_propiedad", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 259: break;
          case 52:
            { Token t = new Token("manejo_excepciones", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 260: break;
          case 53:
            { Token t = new Token("tipo_inferido", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 261: break;
          case 54:
            { Token t = new Token("notificacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 262: break;
          case 55:
            { Token t = new Token("punto_entrada", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 263: break;
          case 56:
            { Token t = new Token("tipo_referencia", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 264: break;
          case 57:
            { Token t = new Token("literal_booleano", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 265: break;
          case 58:
            { Token t = new Token("tipo_asincrono", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 266: break;
          case 59:
            { Token t = new Token("parametro_programa", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 267: break;
          case 60:
            { Token t = new Token("inferencia_tipo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 268: break;
          case 61:
            { Token t = new Token("referencia_clase_base", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 269: break;
          case 62:
            { Token t = new Token("tipo_logico", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 270: break;
          case 63:
            { Token t = new Token("patron_coincidencia", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 271: break;
          case 64:
            { Token t = new Token("tipo_caracter", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 272: break;
          case 65:
            { Token t = new Token("definicion_datos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 273: break;
          case 66:
            { Token t = new Token("sino", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 274: break;
          case 67:
            { Token t = new Token("tipo_enumeracion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 275: break;
          case 68:
            { Token t = new Token("evaluacion_codigo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 276: break;
          case 69:
            { Token t = new Token("modificador_alcance", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 277: break;
          case 70:
            { Token t = new Token("entrada_datos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 278: break;
          case 71:
            { Token t = new Token("origen_datos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 279: break;
          case 72:
            { Token t = new Token("salto", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 280: break;
          case 73:
            { Token t = new Token("inicializacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 281: break;
          case 74:
            { Token t = new Token("continuacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 282: break;
          case 75:
            { Token t = new Token("combinacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 283: break;
          case 76:
            { Token t = new Token("control_linea", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 284: break;
          case 77:
            { Token t = new Token("sincronizacion", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 285: break;
          case 78:
            { Token t = new Token("control_iteracion", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 286: break;
          case 79:
            { Token t = new Token("tipo_nativo", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 287: break;
          case 80:
            { Token t = new Token("operacion_nula", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 288: break;
          case 81:
            { Token t = new Token("definicion_procedimiento", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 289: break;
          case 82:
            { Token t = new Token("referencia_instancia", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 290: break;
          case 83:
            { Token t = new Token("definicion_tipo", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 291: break;
          case 84:
            { Token t = new Token("tipo_retorno", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 292: break;
          case 85:
            { Token t = new Token("inicializacion_objeto", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 293: break;
          case 86:
            { Token t = new Token("terminacion_anormal", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 294: break;
          case 87:
            { Token t = new Token("temporizacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 295: break;
          case 88:
            { Token t = new Token("bloque_inicio", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 296: break;
          case 89:
            { Token t = new Token("valor_vacio", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 297: break;
          case 90:
            { Token t = new Token("operacion_limpieza", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 298: break;
          case 91:
            { Token t = new Token("seleccion_elemento", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 299: break;
          case 92:
            { Token t = new Token("definicion_alias", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 300: break;
          case 93:
            { Token t = new Token("programacion_asincrona", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 301: break;
          case 94:
            { Token t = new Token("espera_asincrona", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 302: break;
          case 95:
            { Token t = new Token("alto", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 303: break;
          case 96:
            { Token t = new Token("clase", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 304: break;
          case 97:
            { Token t = new Token("modificador_constante", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 305: break;
          case 98:
            { Token t = new Token("incrustacion_recurso", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 306: break;
          case 99:
            { Token t = new Token("sino_fin", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 307: break;
          case 100:
            { Token t = new Token("error_compilacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 308: break;
          case 101:
            { Token t = new Token("miembro_clase", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 309: break;
          case 102:
            { Token t = new Token("modificador_inmutabilidad", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 310: break;
          case 103:
            { Token t = new Token("anclaje_memoria", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 311: break;
          case 104:
            { Token t = new Token("agrupacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 312: break;
          case 105:
            { Token t = new Token("definicion_operador", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 313: break;
          case 106:
            { Token t = new Token("lanzamiento_excepcion", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 314: break;
          case 107:
            { Token t = new Token("reintento", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 315: break;
          case 108:
            { Token t = new Token("referencia_clase_padre", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 316: break;
          case 109:
            { Token t = new Token("macro_eliminacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 317: break;
          case 110:
            { Token t = new Token("tipo_compuesto", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 318: break;
          case 111:
            { Token t = new Token("gestion_recursos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 319: break;
          case 112:
            { Token t = new Token("contexto_asignacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 320: break;
          case 113:
            { Token t = new Token("filtro", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 321: break;
          case 114:
            { Token t = new Token("generador", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 322: break;
          case 115:
            { Token t = new Token("acceso", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 323: break;
          case 116:
            { Token t = new Token("gestion_hilos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 324: break;
          case 117:
            { Token t = new Token("modificador_permiso", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 325: break;
          case 118:
            { Token t = new Token("verificacion_condicion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 326: break;
          case 119:
            { Token t = new Token("macro_definicion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 327: break;
          case 120:
            { Token t = new Token("garantia_ejecucion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 328: break;
          case 121:
            { Token t = new Token("comparacion_igualdad", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 329: break;
          case 122:
            { Token t = new Token("exportacion_codigo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 330: break;
          case 123:
            { Token t = new Token("interoperabilidad", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 331: break;
          case 124:
            { Token t = new Token("cuantificador_universal", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 332: break;
          case 125:
            { Token t = new Token("ambito_variable", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 333: break;
          case 126:
            { Token t = new Token("exclusion_importacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 334: break;
          case 127:
            { Token t = new Token("inclusion_codigo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 335: break;
          case 128:
            { Token t = new Token("optimizacion_codigo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 336: break;
          case 129:
            { Token t = new Token("funcion_anonima", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 337: break;
          case 130:
            { Token t = new Token("unidad_compilacion", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 338: break;
          case 131:
            { Token t = new Token("metadato_nombre", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 339: break;
          case 132:
            { Token t = new Token("funcion_nativa", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 340: break;
          case 133:
            { Token t = new Token("tipo_base", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 341: break;
          case 134:
            { Token t = new Token("parametro_variable", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 342: break;
          case 135:
            { Token t = new Token("directiva_compilador", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 343: break;
          case 136:
            { Token t = new Token("modificador_acceso", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 344: break;
          case 137:
            { Token t = new Token("tipo_estructura", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 345: break;
          case 138:
            { Token t = new Token("operador_eliminacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 346: break;
          case 139:
            { Token t = new Token("retorno", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 347: break;
          case 140:
            { Token t = new Token("modificador_vida_util", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 348: break;
          case 141:
            { Token t = new Token("modificador_clase", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 349: break;
          case 142:
            { Token t = new Token("proyeccion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 350: break;
          case 143:
            { Token t = new Token("modificador_signo", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 351: break;
          case 144:
            { Token t = new Token("metadato_tamano", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 352: break;
          case 145:
            { Token t = new Token("tipo_cadena", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 353: break;
          case 146:
            { Token t = new Token("reflexion_tipo", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 354: break;
          case 147:
            { Token t = new Token("contexto_no_seguro", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 355: break;
          case 148:
            { Token t = new Token("proceder", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 356: break;
          case 149:
            { Token t = new Token("gestion_datos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 357: break;
          case 150:
            { Token t = new Token("empaquetado_estructura", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 358: break;
          case 151:
            { Token t = new Token("alineacion_memoria", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 359: break;
          case 152:
            { Token t = new Token("metadato_alineacion", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 360: break;
          case 153:
            { Token t = new Token("contexto_verificacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 361: break;
          case 154:
            { Token t = new Token("valor_predeterminado", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 362: break;
          case 155:
            { Token t = new Token("verificacion_macro", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 363: break;
          case 156:
            { Token t = new Token("tipo_dinamico", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 364: break;
          case 157:
            { Token t = new Token("herencia_clase", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 365: break;
          case 158:
            { Token t = new Token("inclusion_archivo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 366: break;
          case 159:
            { Token t = new Token("gestion_memoria", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 367: break;
          case 160:
            { Token t = new Token("restriccion_tipo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 368: break;
          case 161:
            { Token t = new Token("ordenamiento", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 369: break;
          case 162:
            { Token t = new Token("agrupacion_codigo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 370: break;
          case 163:
            { Token t = new Token("definicion_parcial", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 371: break;
          case 164:
            { Token t = new Token("modificador_herencia", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 372: break;
          case 165:
            { Token t = new Token("advertencia_compilacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 373: break;
          case 166:
            { Token t = new Token("evaluacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 374: break;
          case 167:
            { Token t = new Token("generacion_codigo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 375: break;
          case 168:
            { Token t = new Token("posicionamiento", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 376: break;
          case 169:
            { Token t = new Token("referencia_anterior", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 377: break;
          case 170:
            { Token t = new Token("seleccion_generica", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 378: break;
          case 171:
            { Token t = new Token("depuracion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 379: break;
          case 172:
            { Token t = new Token("verificacion_existencia", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 380: break;
          case 173:
            { Token t = new Token("generacion_automatica", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 381: break;
          case 174:
            { Token t = new Token("conversion_explicita", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 382: break;
          case 175:
            { Token t = new Token("conversion_implicita", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 383: break;
          case 176:
            { Token t = new Token("sobrecarga_operador", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 384: break;
          case 177:
            { Token t = new Token("redefinicion_miembro", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 385: break;
          case 178:
            { Token t = new Token("sugerencia_almacenamiento", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 386: break;
          case 179:
            { Token t = new Token("modificador_inicializacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 387: break;
          case 180:
            { Token t = new Token("modificador_optimizacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 388: break;
          case 181:
            { Token t = new Token("modificador_hilos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 389: break;
          case 182:
            { Token t = new Token("avanzar", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 390: break;
          case 183:
            { Token t = new Token("tipo_excepcion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 391: break;
          case 184:
            { Token t = new Token("sustitucion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 392: break;
          case 185:
            { Token t = new Token("modificador_funcion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 393: break;
          case 186:
            { Token t = new Token("parametros_funcion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 394: break;
          case 187:
            { Token t = new Token("expresion_constante", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 395: break;
          case 188:
            { Token t = new Token("agrupacion_logica", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 396: break;
          case 189:
            { Token t = new Token("calificacion_nombre", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 397: break;
          case 190:
            { Token t = new Token("modificador_serializacion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 398: break;
          case 191:
            { Token t = new Token("contexto_no_verificado", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 399: break;
          case 192:
            { Token t = new Token("tipo_coleccion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 400: break;
          case 193:
            { Token t = new Token("informacion_depuracion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 401: break;
          case 194:
            { Token t = new Token("verificacion_recurso", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 402: break;
          case 195:
            { Token t = new Token("implementacion_interfaz", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 403: break;
          case 196:
            { Token t = new Token("asignacion_pila", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 404: break;
          case 197:
            { Token t = new Token("iteracion_argumentos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 405: break;
          case 198:
            { Token t = new Token("operacion_atomica", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 406: break;
          case 199:
            { Token t = new Token("agrupacion_datos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 407: break;
          case 200:
            { Token t = new Token("agrupacion_tipos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 408: break;
          case 201:
            { Token t = new Token("verificacion_inclusion", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 409: break;
          case 202:
            { Token t = new Token("almacenamiento_hilo", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 410: break;
          case 203:
            { Token t = new Token("instancia_datos", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 411: break;
          case 204:
            { Token t = new Token("verificacion_compilacion", yytext(), true); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 412: break;
          case 205:
            { Token t = new Token("instancia_tipo", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 413: break;
          case 206:
            { Token t = new Token("excepcion_argumento", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 414: break;
          case 207:
            { Token t = new Token("instancia_generada", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 415: break;
          case 208:
            { Token t = new Token("excepcion_estado", yytext(), false); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 416: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

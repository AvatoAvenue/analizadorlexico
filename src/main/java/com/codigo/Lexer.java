// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/scanner.flex


package com.codigo;
@SuppressWarnings("fallthrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\5\0\1\5\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\11\1\15\1\16\1\17\1\20\1\21"+
    "\1\15\1\22\1\15\1\23\1\15\2\0\1\24\1\25"+
    "\1\26\1\27\1\0\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\41\1\50\1\51\1\52\1\53"+
    "\1\54\2\41\1\55\1\41\1\56\1\0\1\57\1\0"+
    "\1\60\1\0\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\0\1\114\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\7\1\10\1\11\1\7\1\11\1\7\16\12"+
    "\1\13\1\14\30\12\1\15\1\16\1\6\1\11\1\0"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\62\12\1\27\15\12\1\30\13\12\1\31\11\12\1\32"+
    "\1\12\1\33\1\34\16\12\1\35\1\12\1\36\37\12"+
    "\1\37\1\40\2\12\1\41\2\12\1\42\4\12\1\43"+
    "\4\12\1\44\7\12\1\30\40\12\1\36\24\12\1\31"+
    "\1\45\21\12\1\46\5\12\1\30\2\12\1\47\15\12"+
    "\1\46\3\12\1\50\6\12\1\51\1\52\2\12\1\53"+
    "\1\12\1\54\2\12\1\36\5\12\1\55\13\12\1\56"+
    "\1\12\1\57\10\12\1\60\13\12\1\61\14\12\1\62"+
    "\17\12\1\63\16\12\1\64\7\12\1\65\1\12\1\66"+
    "\1\67\21\12\1\70\4\12\1\71\1\12\1\72\1\12"+
    "\1\73\1\12\1\74\1\12\1\75\4\12\1\76\10\12"+
    "\2\77\3\12\1\100\2\12\1\101\6\12\1\102\4\12"+
    "\1\103\1\104\2\12\1\105\10\12\1\106\3\12\1\107"+
    "\1\12\1\110\1\12\1\111\1\112\6\12\1\113\1\114"+
    "\11\12\1\115\2\12\1\116\7\12\1\0\11\12\1\117"+
    "\14\12\1\120\13\12\1\121\4\12\1\122\1\12\1\123"+
    "\2\12\1\124\2\12\1\125\1\12\1\126\3\12\1\127"+
    "\3\12\1\130\14\12\1\73\11\12\1\131\6\12\1\132"+
    "\1\133\1\12\1\134\1\12\1\6\1\135\1\12\1\0"+
    "\7\12\1\136\1\137\2\12\1\140\1\141\5\12\1\142"+
    "\1\143\5\12\1\144\6\12\1\145\32\12\1\146\2\12"+
    "\1\0\4\12\1\147\12\12\1\150\4\12\1\0\3\12"+
    "\1\151\1\152\2\12\1\153\1\154\3\12\1\155\1\156"+
    "\1\157\22\12\1\160\14\12\1\161\3\12\1\162\4\12"+
    "\2\0\3\12\1\163\3\12\1\164\1\165\1\12\1\166"+
    "\1\12\1\167\1\12\1\170\2\12\1\171\1\172\2\12"+
    "\1\173\2\12\1\145\1\174\4\12\1\175\1\12\1\176"+
    "\1\177\1\12\1\200\2\12\1\201\4\12\1\202\1\12"+
    "\1\203\3\12\1\204\2\12\1\205\1\0\1\12\1\206"+
    "\2\12\1\207\1\210\1\211\1\212\1\213\1\214\1\12"+
    "\1\102\1\215\1\32\3\12\2\0\1\12\1\216\1\12"+
    "\1\217\6\12\1\0\11\12\1\220\1\221\12\12\1\222"+
    "\1\12\1\223\1\224\3\12\1\225\2\12\2\0\1\12"+
    "\1\226\1\227\2\12\1\230\1\12\1\231\3\12\1\232"+
    "\4\12\1\233\1\12\1\120\1\234\1\12\1\235\1\12"+
    "\1\236\1\237\4\12\1\57\10\12\2\0\2\12\1\240"+
    "\1\12\1\241\3\12\2\0\2\12\1\242\1\12\1\243"+
    "\2\12\1\244\1\245\3\12\1\246\7\12\2\0\1\247"+
    "\1\250\1\251\1\252\1\12\1\253\3\12\1\254\1\255"+
    "\2\12\1\142\1\256\1\257\1\260\5\12\2\0\2\12"+
    "\1\261\1\262\2\12\2\0\2\12\1\263\2\12\1\264"+
    "\3\12\1\265\2\12\1\266\1\267\3\0\1\12\1\34"+
    "\1\270\1\271\4\12\1\272\2\0\1\12\1\273\2\12"+
    "\2\0\1\274\2\12\1\275\1\12\1\276\1\12\3\0"+
    "\1\277\1\300\3\12\2\0\1\12\1\301\1\12\1\43"+
    "\1\0\1\302\2\12\1\303\2\0\3\12\1\304\1\0"+
    "\3\12\1\305\2\0\1\12\1\306\1\0\3\12\1\307"+
    "\1\0\1\310\1\311\1\216\2\12\1\0\2\12\1\0"+
    "\2\12\1\0\1\312\1\12\1\313\7\12\1\314";

  private static int [] zzUnpackAction() {
    int [] result = new int[1123];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\115\0\232\0\115\0\115\0\115\0\347"+
    "\0\115\0\u0134\0\u0181\0\115\0\u01ce\0\u021b\0\u0268\0\u02b5"+
    "\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483\0\u04d0\0\u051d"+
    "\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb\0\115\0\115"+
    "\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953"+
    "\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb"+
    "\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23"+
    "\0\115\0\115\0\115\0\115\0\u0e70\0\115\0\115\0\115"+
    "\0\115\0\115\0\115\0\u0ebd\0\115\0\u0f0a\0\u0f57\0\u0fa4"+
    "\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u1125\0\u1172\0\u11bf\0\u120c"+
    "\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427\0\u1474"+
    "\0\u14c1\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc"+
    "\0\u1729\0\u1776\0\u17c3\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944"+
    "\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac"+
    "\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14"+
    "\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c"+
    "\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u22e4"+
    "\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c"+
    "\0\u2599\0\u039c\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767"+
    "\0\u27b4\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf"+
    "\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37"+
    "\0\u2c84\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u039c\0\u2e05\0\u2e52"+
    "\0\u2e9f\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba"+
    "\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u323b\0\u3288\0\u32d5\0\u3322"+
    "\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u353d\0\u358a"+
    "\0\u35d7\0\u3624\0\u3671\0\u36be\0\u370b\0\u3758\0\u37a5\0\115"+
    "\0\115\0\u37f2\0\u383f\0\u039c\0\u388c\0\u38d9\0\u039c\0\u3926"+
    "\0\u3973\0\u39c0\0\u3a0d\0\u039c\0\u3a5a\0\u3aa7\0\u3af4\0\u3b41"+
    "\0\u039c\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2\0\u3d0f\0\u3d5c"+
    "\0\u039c\0\u3da9\0\u3df6\0\u3e43\0\u3e90\0\u3edd\0\u3f2a\0\u3f77"+
    "\0\u3fc4\0\u4011\0\u405e\0\u40ab\0\u40f8\0\u4145\0\u4192\0\u41df"+
    "\0\u422c\0\u4279\0\u42c6\0\u4313\0\u4360\0\u43ad\0\u43fa\0\u4447"+
    "\0\u4494\0\u44e1\0\u452e\0\u457b\0\u45c8\0\u4615\0\u4662\0\u46af"+
    "\0\u46fc\0\u039c\0\u4749\0\u4796\0\u47e3\0\u4830\0\u487d\0\u48ca"+
    "\0\u4917\0\u4964\0\u49b1\0\u49fe\0\u4a4b\0\u4a98\0\u4ae5\0\u4b32"+
    "\0\u4b7f\0\u4bcc\0\u4c19\0\u4c66\0\u4cb3\0\u4d00\0\u4d4d\0\u4d9a"+
    "\0\u4de7\0\u4e34\0\u4e81\0\u4ece\0\u4f1b\0\u4f68\0\u4fb5\0\u5002"+
    "\0\u504f\0\u509c\0\u50e9\0\u5136\0\u5183\0\u51d0\0\u521d\0\u526a"+
    "\0\u52b7\0\u039c\0\u5304\0\u5351\0\u539e\0\u53eb\0\u5438\0\u5485"+
    "\0\u54d2\0\u551f\0\u039c\0\u556c\0\u55b9\0\u5606\0\u5653\0\u56a0"+
    "\0\u56ed\0\u573a\0\u5787\0\u57d4\0\u5821\0\u586e\0\u58bb\0\u5908"+
    "\0\u5955\0\u59a2\0\u59ef\0\u5a3c\0\u039c\0\u5a89\0\u5ad6\0\u5b23"+
    "\0\u5b70\0\u5bbd\0\u5c0a\0\u039c\0\u5c57\0\u5ca4\0\u5cf1\0\u5d3e"+
    "\0\u5d8b\0\u039c\0\u5dd8\0\u5e25\0\u5e72\0\u5ebf\0\u5f0c\0\u5f59"+
    "\0\u5fa6\0\u5ff3\0\u039c\0\u6040\0\u608d\0\u60da\0\u6127\0\u6174"+
    "\0\u61c1\0\u620e\0\u625b\0\u62a8\0\u62f5\0\u6342\0\u638f\0\u63dc"+
    "\0\u6429\0\u6476\0\u64c3\0\u6510\0\u655d\0\u65aa\0\u65f7\0\u6644"+
    "\0\u6691\0\u039c\0\u66de\0\u672b\0\u6778\0\u67c5\0\u6812\0\u685f"+
    "\0\u68ac\0\u68f9\0\u6946\0\u6993\0\u69e0\0\u039c\0\u6a2d\0\u6a7a"+
    "\0\u6ac7\0\u6b14\0\u6b61\0\u6bae\0\u6bfb\0\u6c48\0\u6c95\0\u6ce2"+
    "\0\u6d2f\0\u6d7c\0\u039c\0\u6dc9\0\u6e16\0\u6e63\0\u6eb0\0\u6efd"+
    "\0\u6f4a\0\u6f97\0\u6fe4\0\u7031\0\u707e\0\u70cb\0\u7118\0\u7165"+
    "\0\u71b2\0\u71ff\0\u039c\0\u724c\0\u7299\0\u72e6\0\u7333\0\u7380"+
    "\0\u73cd\0\u741a\0\u7467\0\u74b4\0\u7501\0\u754e\0\u759b\0\u75e8"+
    "\0\u7635\0\u039c\0\u7682\0\u76cf\0\u771c\0\u7769\0\u77b6\0\u7803"+
    "\0\u7850\0\u039c\0\u789d\0\u039c\0\u039c\0\u78ea\0\u7937\0\u7984"+
    "\0\u79d1\0\u7a1e\0\u7a6b\0\u7ab8\0\u7b05\0\u7b52\0\u7b9f\0\u7bec"+
    "\0\u7c39\0\u7c86\0\u7cd3\0\u7d20\0\u7d6d\0\u7dba\0\u039c\0\u7e07"+
    "\0\u7e54\0\u7ea1\0\u7eee\0\u039c\0\u7f3b\0\u039c\0\u7f88\0\u7fd5"+
    "\0\u8022\0\u039c\0\u806f\0\u039c\0\u80bc\0\u8109\0\u8156\0\u81a3"+
    "\0\u81f0\0\u823d\0\u828a\0\u82d7\0\u8324\0\u8371\0\u83be\0\u840b"+
    "\0\u8458\0\u289b\0\u039c\0\u84a5\0\u84f2\0\u853f\0\u039c\0\u858c"+
    "\0\u85d9\0\u039c\0\u8626\0\u8673\0\u86c0\0\u870d\0\u875a\0\u87a7"+
    "\0\u039c\0\u87f4\0\u8841\0\u888e\0\u88db\0\u039c\0\u039c\0\u8928"+
    "\0\u8975\0\u039c\0\u89c2\0\u8a0f\0\u8a5c\0\u8aa9\0\u8af6\0\u8b43"+
    "\0\u8b90\0\u8bdd\0\u039c\0\u8c2a\0\u8c77\0\u8cc4\0\u039c\0\u8d11"+
    "\0\u039c\0\u8d5e\0\u039c\0\u039c\0\u8dab\0\u8df8\0\u8e45\0\u8e92"+
    "\0\u8edf\0\u8f2c\0\u039c\0\u039c\0\u8f79\0\u8fc6\0\u9013\0\u9060"+
    "\0\u90ad\0\u90fa\0\u9147\0\u9194\0\u91e1\0\u039c\0\u922e\0\u927b"+
    "\0\u039c\0\u92c8\0\u9315\0\u9362\0\u93af\0\u93fc\0\u9449\0\u9496"+
    "\0\u94e3\0\u9530\0\u957d\0\u95ca\0\u9617\0\u9664\0\u96b1\0\u96fe"+
    "\0\u974b\0\u9798\0\u039c\0\u97e5\0\u9832\0\u987f\0\u98cc\0\u9919"+
    "\0\u9966\0\u99b3\0\u9a00\0\u9a4d\0\u9a9a\0\u9ae7\0\u9b34\0\u9b81"+
    "\0\u9bce\0\u9c1b\0\u9c68\0\u9cb5\0\u9d02\0\u9d4f\0\u9d9c\0\u9de9"+
    "\0\u9e36\0\u9e83\0\u9ed0\0\u039c\0\u9f1d\0\u9f6a\0\u9fb7\0\ua004"+
    "\0\u039c\0\ua051\0\u039c\0\ua09e\0\ua0eb\0\u039c\0\ua138\0\ua185"+
    "\0\u039c\0\ua1d2\0\u039c\0\ua21f\0\ua26c\0\ua2b9\0\u039c\0\ua306"+
    "\0\ua353\0\ua3a0\0\u039c\0\ua3ed\0\ua43a\0\ua487\0\ua4d4\0\ua521"+
    "\0\ua56e\0\ua5bb\0\ua608\0\ua655\0\ua6a2\0\ua6ef\0\ua73c\0\u039c"+
    "\0\ua789\0\ua7d6\0\ua823\0\ua870\0\ua8bd\0\ua90a\0\ua957\0\ua9a4"+
    "\0\ua9f1\0\u039c\0\uaa3e\0\uaa8b\0\uaad8\0\uab25\0\uab72\0\uabbf"+
    "\0\u039c\0\u039c\0\uac0c\0\u039c\0\uac59\0\u039c\0\uaca6\0\uacf3"+
    "\0\uad40\0\uad8d\0\uadda\0\uae27\0\uae74\0\uaec1\0\uaf0e\0\uaf5b"+
    "\0\u039c\0\u039c\0\uafa8\0\uaff5\0\u039c\0\u039c\0\ub042\0\ub08f"+
    "\0\ub0dc\0\ub129\0\ub176\0\ub1c3\0\u039c\0\ub210\0\ub25d\0\ub2aa"+
    "\0\ub2f7\0\ub344\0\u039c\0\ub391\0\ub3de\0\ub42b\0\ub478\0\ub4c5"+
    "\0\ub512\0\ub55f\0\ub5ac\0\ub5f9\0\ub646\0\ub693\0\ub6e0\0\ub72d"+
    "\0\ub77a\0\ub7c7\0\ub814\0\ub861\0\ub8ae\0\ub8fb\0\ub948\0\ub995"+
    "\0\ub9e2\0\uba2f\0\uba7c\0\ubac9\0\ubb16\0\ubb63\0\ubbb0\0\ubbfd"+
    "\0\ubc4a\0\ubc97\0\ubce4\0\ubd31\0\u039c\0\ubd7e\0\ubdcb\0\ube18"+
    "\0\ube65\0\ubeb2\0\ubeff\0\ubf4c\0\u039c\0\ubf99\0\ubfe6\0\uc033"+
    "\0\uc080\0\uc0cd\0\uc11a\0\uc167\0\uc1b4\0\uc201\0\uc24e\0\u039c"+
    "\0\uc29b\0\uc2e8\0\uc335\0\uc382\0\uc3cf\0\uc41c\0\uc469\0\uc4b6"+
    "\0\u039c\0\u039c\0\uc503\0\uc550\0\u039c\0\u039c\0\uc59d\0\uc5ea"+
    "\0\uc637\0\u039c\0\u039c\0\u039c\0\uc684\0\uc6d1\0\uc71e\0\uc76b"+
    "\0\uc7b8\0\uc805\0\uc852\0\uc89f\0\uc8ec\0\uc939\0\uc986\0\uc9d3"+
    "\0\uca20\0\uca6d\0\ucaba\0\ucb07\0\ucb54\0\ucba1\0\u039c\0\ucbee"+
    "\0\ucc3b\0\ucc88\0\uccd5\0\ucd22\0\ucd6f\0\ucdbc\0\uce09\0\uce56"+
    "\0\ucea3\0\ucef0\0\ucf3d\0\u039c\0\ucf8a\0\ucfd7\0\ud024\0\u039c"+
    "\0\ud071\0\ud0be\0\ud10b\0\ud158\0\ud1a5\0\ud1f2\0\ud23f\0\ud28c"+
    "\0\ud2d9\0\ud326\0\ud373\0\ud3c0\0\ud40d\0\u039c\0\u039c\0\ud45a"+
    "\0\u039c\0\ud4a7\0\u039c\0\ud4f4\0\u039c\0\ud541\0\ud58e\0\u039c"+
    "\0\u039c\0\ud5db\0\ud628\0\u039c\0\ud675\0\ud6c2\0\u039c\0\u039c"+
    "\0\ud70f\0\ud75c\0\ud7a9\0\ud7f6\0\u039c\0\ud843\0\u039c\0\u039c"+
    "\0\ud890\0\u039c\0\ud8dd\0\ud92a\0\u039c\0\ud977\0\ud9c4\0\uda11"+
    "\0\uda5e\0\u039c\0\udaab\0\u039c\0\udaf8\0\udb45\0\udb92\0\u039c"+
    "\0\udbdf\0\udc2c\0\u039c\0\udc79\0\udcc6\0\u039c\0\udd13\0\udd60"+
    "\0\u039c\0\u039c\0\u039c\0\u039c\0\u039c\0\u039c\0\uddad\0\uddfa"+
    "\0\u039c\0\u039c\0\ude47\0\ude94\0\udee1\0\udf2e\0\udf7b\0\udfc8"+
    "\0\ue015\0\ue062\0\u039c\0\ue0af\0\ue0fc\0\ue149\0\ue196\0\ue1e3"+
    "\0\ue230\0\ue27d\0\ue2ca\0\ue317\0\ue364\0\ue3b1\0\ue3fe\0\ue44b"+
    "\0\ue498\0\ue4e5\0\ue532\0\u039c\0\u039c\0\ue57f\0\ue5cc\0\ue619"+
    "\0\ue666\0\ue6b3\0\ue700\0\ue74d\0\uddfa\0\ue79a\0\ue7e7\0\u039c"+
    "\0\ue834\0\u039c\0\u039c\0\ue881\0\ue8ce\0\ue91b\0\u039c\0\ue968"+
    "\0\ue9b5\0\uea02\0\uea4f\0\uea9c\0\u039c\0\ueae9\0\ueb36\0\ueb83"+
    "\0\u039c\0\uebd0\0\u039c\0\uec1d\0\uec6a\0\uecb7\0\u039c\0\ued04"+
    "\0\ued51\0\ued9e\0\uedeb\0\u039c\0\uee38\0\u039c\0\u039c\0\uee85"+
    "\0\u039c\0\ueed2\0\u039c\0\u039c\0\uef1f\0\uef6c\0\uefb9\0\uf006"+
    "\0\115\0\uf053\0\uf0a0\0\uf0ed\0\uf13a\0\uf187\0\uf1d4\0\uf221"+
    "\0\uf26e\0\uf2bb\0\uf308\0\uf355\0\uf3a2\0\u039c\0\uf3ef\0\u039c"+
    "\0\uf43c\0\uf489\0\uf4d6\0\uf523\0\uf570\0\uf5bd\0\uf60a\0\u039c"+
    "\0\uf657\0\u039c\0\uf6a4\0\uf6f1\0\u039c\0\u039c\0\uf73e\0\uf78b"+
    "\0\uf7d8\0\u039c\0\uf825\0\uf872\0\uf8bf\0\uf90c\0\uf959\0\uf9a6"+
    "\0\uf9f3\0\ufa40\0\ufa8d\0\u039c\0\115\0\ufada\0\u039c\0\ufb27"+
    "\0\u039c\0\ufb74\0\ufbc1\0\ufc0e\0\u039c\0\u039c\0\ufc5b\0\ufca8"+
    "\0\u039c\0\u039c\0\u039c\0\u039c\0\ufcf5\0\ufd42\0\ufd8f\0\ufddc"+
    "\0\ufe29\0\ufe76\0\ufec3\0\uff10\0\uff5d\0\u039c\0\u039c\0\uffaa"+
    "\0\ufff7\1\104\1\221\1\336\1\u012b\0\u039c\1\u0178\1\u01c5"+
    "\0\u039c\1\u0212\1\u025f\1\u02ac\0\u039c\1\u02f9\1\u0346\0\u039c"+
    "\0\u039c\1\u0393\1\u03e0\1\u042d\1\u047a\0\u039c\0\u039c\0\u039c"+
    "\1\u04c7\1\u0514\1\u0561\1\u05ae\0\u039c\1\u05fb\1\u0648\1\u0695"+
    "\0\u039c\1\u06e2\1\u072f\1\u077c\1\u07c9\0\u039c\1\u0816\1\u0863"+
    "\0\u039c\1\u08b0\0\u039c\1\u08fd\1\u094a\1\u0997\1\u09e4\0\u039c"+
    "\0\u039c\1\u0a31\1\u0a7e\1\u0acb\1\u0b18\1\u0b65\1\u0bb2\0\u039c"+
    "\1\u0bff\0\115\1\u0c4c\0\u039c\1\u0c99\1\u0ce6\0\115\1\u0d33"+
    "\1\u0d80\1\u0dcd\1\u0e1a\1\u0e67\0\115\1\u0eb4\1\u0f01\1\u0f4e"+
    "\1\u0f9b\0\u039c\1\u0fe8\1\u1035\1\u1082\0\u039c\1\u10cf\1\u111c"+
    "\1\u1169\1\u11b6\0\115\1\u1203\0\u039c\0\115\0\u039c\1\u1250"+
    "\1\u129d\1\u12ea\1\u1337\1\u1384\1\u13d1\1\u141e\1\u146b\1\u14b8"+
    "\0\u039c\1\u1505\0\115\1\u1552\1\u159f\1\u15ec\1\u1639\1\u1686"+
    "\1\u16d3\1\u1720\0\u039c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1123];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\7\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\23\1\30\3\23\1\31\1\32\1\23\1\33\1\34"+
    "\1\35\1\36\3\23\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\23\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\23\1\70\1\23"+
    "\1\71\1\72\117\0\1\3\122\0\1\73\15\0\1\74"+
    "\100\0\1\75\130\0\1\76\113\0\1\74\1\77\113\0"+
    "\1\100\1\101\113\0\1\74\1\102\102\0\1\103\12\0"+
    "\1\104\26\0\1\105\53\0\7\23\4\0\1\23\1\106"+
    "\1\107\1\110\1\23\1\111\5\23\1\112\12\23\2\0"+
    "\22\23\1\113\10\23\17\0\7\23\4\0\4\23\1\114"+
    "\3\23\1\115\2\23\1\116\2\23\1\117\7\23\2\0"+
    "\11\23\1\120\21\23\17\0\7\23\4\0\26\23\2\0"+
    "\33\23\17\0\7\23\4\0\26\23\2\0\11\23\1\121"+
    "\21\23\17\0\7\23\4\0\15\23\1\122\2\23\1\123"+
    "\1\124\2\23\1\125\1\23\2\0\30\23\1\126\2\23"+
    "\17\0\7\23\4\0\1\127\7\23\1\130\5\23\1\131"+
    "\7\23\2\0\33\23\17\0\7\23\4\0\4\23\1\132"+
    "\21\23\2\0\33\23\17\0\7\23\4\0\26\23\2\0"+
    "\16\23\1\133\14\23\17\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\134\3\23\1\135\11\23\1\136\13\23\17\0"+
    "\7\23\4\0\26\23\2\0\17\23\1\137\13\23\17\0"+
    "\7\23\4\0\16\23\1\140\1\23\1\141\5\23\2\0"+
    "\33\23\17\0\7\23\4\0\4\23\1\142\21\23\2\0"+
    "\33\23\17\0\7\23\4\0\26\23\2\0\20\23\1\143"+
    "\3\23\1\144\6\23\17\0\7\23\4\0\20\23\1\145"+
    "\5\23\2\0\1\23\1\146\6\23\1\147\22\23\17\0"+
    "\7\23\4\0\1\150\1\151\1\152\1\153\2\23\1\154"+
    "\1\23\1\155\4\23\1\156\3\23\1\157\1\160\3\23"+
    "\2\0\10\23\1\161\7\23\1\162\12\23\17\0\7\23"+
    "\4\0\26\23\2\0\2\23\1\163\1\23\1\164\7\23"+
    "\1\165\1\23\1\166\3\23\1\167\1\170\1\23\1\171"+
    "\1\23\1\172\3\23\17\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\173\3\23\1\174\11\23\1\175\2\23\1\176"+
    "\6\23\1\177\1\23\17\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\200\6\23\1\201\3\23\1\202\2\23\1\203"+
    "\13\23\17\0\7\23\4\0\26\23\2\0\1\23\1\204"+
    "\3\23\1\205\11\23\1\206\11\23\1\207\1\23\17\0"+
    "\7\23\4\0\26\23\2\0\14\23\1\210\1\211\1\212"+
    "\2\23\1\213\1\214\3\23\1\215\1\23\1\216\2\23"+
    "\17\0\5\23\1\217\1\23\4\0\26\23\2\0\11\23"+
    "\1\220\2\23\1\221\1\23\1\222\1\223\2\23\1\224"+
    "\2\23\1\225\5\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\226\6\23\1\227\2\23\1\230\2\23\1\231"+
    "\10\23\17\0\7\23\4\0\26\23\2\0\11\23\1\232"+
    "\21\23\17\0\3\23\1\233\3\23\4\0\26\23\2\0"+
    "\6\23\1\234\6\23\1\235\1\236\4\23\1\237\7\23"+
    "\17\0\7\23\4\0\26\23\2\0\17\23\1\240\13\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\241\3\23"+
    "\1\242\3\23\1\243\5\23\1\244\13\23\17\0\7\23"+
    "\4\0\26\23\2\0\1\23\1\245\2\23\1\246\12\23"+
    "\1\247\13\23\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\250\3\23\1\251\3\23\1\252\5\23\1\253\5\23"+
    "\1\254\5\23\17\0\7\23\4\0\26\23\2\0\2\23"+
    "\1\255\13\23\1\256\1\23\1\257\1\23\1\260\2\23"+
    "\1\261\1\262\4\23\17\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\263\20\23\1\264\2\23\1\265\5\23\17\0"+
    "\7\23\4\0\26\23\2\0\25\23\1\266\5\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\267\3\23\1\270"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\2\23\1\271"+
    "\1\272\1\23\1\273\2\23\1\274\1\275\12\23\1\276"+
    "\1\277\1\23\1\300\1\23\1\301\1\23\17\0\7\23"+
    "\4\0\26\23\2\0\10\23\1\302\11\23\1\303\6\23"+
    "\1\304\1\23\17\0\3\23\1\233\3\23\4\0\26\23"+
    "\2\0\11\23\1\305\2\23\1\306\1\23\1\307\4\23"+
    "\1\310\7\23\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\311\7\23\1\312\5\23\1\313\13\23\17\0\7\23"+
    "\4\0\26\23\2\0\1\23\1\314\6\23\1\315\1\316"+
    "\21\23\17\0\7\23\4\0\26\23\2\0\11\23\1\317"+
    "\21\23\14\0\1\320\127\0\1\321\104\0\7\23\4\0"+
    "\4\23\1\322\21\23\2\0\33\23\17\0\7\23\4\0"+
    "\2\23\1\323\23\23\2\0\33\23\17\0\7\23\4\0"+
    "\3\23\1\324\20\23\1\325\1\23\2\0\33\23\17\0"+
    "\7\23\4\0\22\23\1\326\3\23\2\0\33\23\17\0"+
    "\7\23\4\0\13\23\1\327\12\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\7\23\1\330\23\23\17\0"+
    "\7\23\4\0\6\23\1\331\4\23\1\332\12\23\2\0"+
    "\33\23\17\0\7\23\4\0\15\23\1\333\4\23\1\334"+
    "\3\23\2\0\33\23\17\0\7\23\4\0\1\335\25\23"+
    "\2\0\33\23\17\0\7\23\4\0\22\23\1\336\3\23"+
    "\2\0\33\23\17\0\7\23\4\0\26\23\2\0\7\23"+
    "\1\337\23\23\17\0\7\23\4\0\26\23\2\0\3\23"+
    "\1\340\27\23\17\0\7\23\4\0\3\23\1\341\16\23"+
    "\1\342\3\23\2\0\33\23\17\0\7\23\4\0\1\343"+
    "\25\23\2\0\33\23\17\0\7\23\4\0\2\23\1\344"+
    "\23\23\2\0\33\23\17\0\7\23\4\0\1\345\25\23"+
    "\2\0\33\23\17\0\7\23\4\0\26\23\2\0\3\23"+
    "\1\346\27\23\17\0\7\23\4\0\13\23\1\347\12\23"+
    "\2\0\33\23\17\0\7\23\4\0\20\23\1\350\5\23"+
    "\2\0\33\23\17\0\7\23\4\0\20\23\1\351\5\23"+
    "\2\0\33\23\17\0\7\23\4\0\15\23\1\352\10\23"+
    "\2\0\33\23\17\0\7\23\4\0\26\23\2\0\24\23"+
    "\1\353\1\23\1\354\4\23\17\0\7\23\4\0\26\23"+
    "\2\0\11\23\1\355\21\23\17\0\7\23\4\0\26\23"+
    "\2\0\15\23\1\356\15\23\17\0\7\23\4\0\26\23"+
    "\2\0\16\23\1\357\14\23\17\0\7\23\4\0\26\23"+
    "\2\0\16\23\1\360\14\23\17\0\7\23\4\0\21\23"+
    "\1\361\4\23\2\0\33\23\17\0\7\23\4\0\4\23"+
    "\1\362\11\23\1\363\7\23\2\0\33\23\17\0\7\23"+
    "\4\0\2\23\1\364\14\23\1\365\6\23\2\0\33\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\366\31\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\367\31\23"+
    "\17\0\7\23\4\0\23\23\1\370\2\23\2\0\33\23"+
    "\17\0\7\23\4\0\26\23\2\0\23\23\1\371\7\23"+
    "\17\0\7\23\4\0\26\23\2\0\22\23\1\372\10\23"+
    "\17\0\7\23\4\0\26\23\2\0\14\23\1\373\16\23"+
    "\17\0\7\23\4\0\26\23\2\0\11\23\1\374\5\23"+
    "\1\375\13\23\17\0\7\23\4\0\26\23\2\0\17\23"+
    "\1\376\13\23\17\0\7\23\4\0\26\23\2\0\5\23"+
    "\1\377\25\23\17\0\7\23\4\0\26\23\2\0\5\23"+
    "\1\u0100\25\23\17\0\7\23\4\0\26\23\2\0\15\23"+
    "\1\u0101\15\23\17\0\7\23\4\0\26\23\2\0\17\23"+
    "\1\u0102\13\23\17\0\7\23\4\0\26\23\2\0\24\23"+
    "\1\u0103\6\23\17\0\7\23\4\0\26\23\2\0\10\23"+
    "\1\u0104\22\23\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\u0105\31\23\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\u0106\31\23\17\0\7\23\4\0\26\23\2\0\23\23"+
    "\1\u0107\7\23\17\0\7\23\4\0\26\23\2\0\4\23"+
    "\1\324\26\23\17\0\7\23\4\0\26\23\2\0\11\23"+
    "\1\u0108\2\23\1\u0109\16\23\17\0\7\23\4\0\26\23"+
    "\2\0\4\23\1\u010a\26\23\17\0\7\23\4\0\26\23"+
    "\2\0\7\23\1\u010b\23\23\17\0\7\23\4\0\26\23"+
    "\2\0\3\23\1\u010c\17\23\1\u010d\5\23\1\u010e\1\23"+
    "\17\0\7\23\4\0\26\23\2\0\24\23\1\u010f\6\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\u0110\31\23"+
    "\17\0\7\23\4\0\26\23\2\0\23\23\1\u0111\7\23"+
    "\17\0\7\23\4\0\26\23\2\0\7\23\1\u0112\23\23"+
    "\17\0\7\23\4\0\26\23\2\0\17\23\1\u0113\13\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u0114\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\24\23\1\u0115\6\23"+
    "\17\0\7\23\4\0\26\23\2\0\23\23\1\u0116\1\u0117"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\1\23\1\u0118"+
    "\3\23\1\u0119\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\u011a\31\23\17\0\7\23\4\0\26\23\2\0"+
    "\16\23\1\u011b\14\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u011c\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\2\23\1\u011d\1\u011e\2\23\1\u011f\5\23\1\u0120\5\23"+
    "\1\u0121\1\u0122\7\23\17\0\7\23\4\0\26\23\2\0"+
    "\25\23\1\u0123\5\23\17\0\7\23\4\0\26\23\2\0"+
    "\16\23\1\u0124\14\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u0125\11\23\1\u0126\7\23\17\0\7\23\4\0"+
    "\26\23\2\0\2\23\1\u0127\30\23\17\0\7\23\4\0"+
    "\26\23\2\0\4\23\1\u0128\16\23\1\u0129\1\23\1\u012a"+
    "\5\23\17\0\7\23\4\0\26\23\2\0\25\23\1\u012b"+
    "\5\23\17\0\7\23\4\0\26\23\2\0\22\23\1\u012c"+
    "\10\23\17\0\7\23\4\0\26\23\2\0\1\23\1\u012d"+
    "\3\23\1\u012e\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\3\23\1\u012f\14\23\1\u0130\3\23\1\u0131\6\23\17\0"+
    "\4\23\1\u0132\2\23\4\0\26\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u0133\6\23\1\u0134"+
    "\1\23\1\u0135\11\23\1\u0136\2\23\17\0\7\23\4\0"+
    "\26\23\2\0\17\23\1\u0137\13\23\17\0\7\23\4\0"+
    "\26\23\2\0\22\23\1\u0138\10\23\17\0\7\23\4\0"+
    "\26\23\2\0\17\23\1\u0139\13\23\17\0\7\23\4\0"+
    "\26\23\2\0\16\23\1\u013a\14\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u013b\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\17\23\1\u013c\13\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\227\7\23\1\u013d\6\23\17\0"+
    "\7\23\4\0\26\23\2\0\17\23\1\u013e\13\23\17\0"+
    "\7\23\4\0\26\23\2\0\4\23\1\u013f\26\23\17\0"+
    "\2\23\1\u0132\4\23\4\0\26\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\4\23\1\u0140\11\23\1\u0141"+
    "\14\23\17\0\7\23\4\0\26\23\2\0\20\23\1\u0142"+
    "\12\23\17\0\7\23\4\0\26\23\2\0\3\23\1\u0143"+
    "\1\u0144\1\23\1\u0145\2\23\1\u0146\2\23\1\u0147\6\23"+
    "\1\u0148\1\u0149\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u014a\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u014b\21\23\17\0\7\23\4\0\26\23\2\0"+
    "\15\23\1\u014c\15\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u014d\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\16\23\1\u014e\14\23\17\0\7\23\4\0\26\23\2\0"+
    "\3\23\1\u014f\12\23\1\u0150\1\u0151\13\23\17\0\7\23"+
    "\4\0\26\23\2\0\16\23\1\u0152\5\23\1\u0153\6\23"+
    "\17\0\7\23\4\0\26\23\2\0\17\23\1\u0154\13\23"+
    "\17\0\7\23\4\0\26\23\2\0\4\23\1\u0155\26\23"+
    "\17\0\7\23\4\0\26\23\2\0\15\23\1\u0156\6\23"+
    "\1\u0157\6\23\17\0\7\23\4\0\26\23\2\0\27\23"+
    "\1\u0158\1\u0159\2\23\17\0\7\23\4\0\26\23\2\0"+
    "\14\23\1\u015a\1\23\1\u015b\14\23\17\0\7\23\4\0"+
    "\26\23\2\0\16\23\1\u015c\5\23\1\u015d\6\23\17\0"+
    "\7\23\4\0\26\23\2\0\11\23\1\u015e\2\23\1\u015f"+
    "\16\23\17\0\7\23\4\0\26\23\2\0\12\23\1\u0160"+
    "\20\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u0161"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\4\23\1\u0162"+
    "\26\23\17\0\7\23\4\0\26\23\2\0\24\23\1\u0163"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u0164"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\3\23\1\u0165"+
    "\16\23\1\u0166\1\u0167\7\23\17\0\7\23\4\0\26\23"+
    "\2\0\1\23\1\u0168\7\23\1\u0169\5\23\1\u016a\13\23"+
    "\17\0\7\23\4\0\26\23\2\0\2\23\1\u016b\30\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\u016c\31\23"+
    "\17\0\7\23\4\0\26\23\2\0\11\23\1\u016d\21\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\u016e\1\23"+
    "\1\u016f\1\u0170\1\23\1\u0171\1\u0172\5\23\1\u0173\3\23"+
    "\1\u0174\1\23\1\u0175\1\u0176\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\31\23\1\177\1\23\17\0\7\23\4\0"+
    "\26\23\2\0\17\23\1\u0177\13\23\17\0\7\23\4\0"+
    "\26\23\2\0\1\23\1\u0178\12\23\1\u0179\7\23\1\u017a"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\17\23\1\u017b"+
    "\13\23\17\0\7\23\4\0\26\23\2\0\7\23\1\u017c"+
    "\22\23\1\u017d\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\u017e\20\23\1\u017f\10\23\17\0\7\23\4\0\26\23"+
    "\2\0\20\23\1\u0180\12\23\17\0\7\23\4\0\26\23"+
    "\2\0\11\23\1\u0181\21\23\17\0\7\23\4\0\26\23"+
    "\2\0\16\23\1\u0182\14\23\17\0\7\23\4\0\26\23"+
    "\2\0\11\23\1\u0183\10\23\1\u0184\10\23\17\0\7\23"+
    "\4\0\26\23\2\0\1\23\1\u0185\27\23\1\u0186\1\23"+
    "\17\0\7\23\4\0\26\23\2\0\20\23\1\u0187\12\23"+
    "\17\0\7\23\4\0\26\23\2\0\16\23\1\u0188\14\23"+
    "\17\0\7\23\4\0\26\23\2\0\17\23\1\u0189\13\23"+
    "\17\0\7\23\4\0\26\23\2\0\3\23\1\u018a\1\u018b"+
    "\4\23\1\u018c\2\23\1\u018d\1\u018e\5\23\1\u018f\1\u0190"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\10\23\1\274"+
    "\1\u0191\21\23\17\0\7\23\4\0\26\23\2\0\14\23"+
    "\1\u0192\5\23\1\u0193\10\23\17\0\7\23\4\0\26\23"+
    "\2\0\22\23\1\u0194\10\23\17\0\7\23\4\0\26\23"+
    "\2\0\11\23\1\u0195\2\23\1\u0196\16\23\17\0\7\23"+
    "\4\0\26\23\2\0\22\23\1\u0197\10\23\17\0\7\23"+
    "\4\0\26\23\2\0\5\23\1\u0198\3\23\1\u0199\21\23"+
    "\17\0\7\23\4\0\26\23\2\0\24\23\1\u019a\6\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u019b\25\23"+
    "\17\0\7\23\4\0\15\23\1\u019c\10\23\2\0\33\23"+
    "\17\0\7\23\4\0\4\23\1\u019d\21\23\2\0\33\23"+
    "\17\0\7\23\4\0\1\u019e\25\23\2\0\33\23\17\0"+
    "\7\23\4\0\4\23\1\u019f\21\23\2\0\33\23\17\0"+
    "\7\23\4\0\10\23\1\u01a0\15\23\2\0\25\23\1\u01a1"+
    "\5\23\17\0\7\23\4\0\10\23\1\u01a2\15\23\2\0"+
    "\33\23\17\0\7\23\4\0\13\23\1\u01a3\12\23\2\0"+
    "\33\23\17\0\7\23\4\0\1\u01a4\25\23\2\0\33\23"+
    "\17\0\7\23\4\0\15\23\1\u01a5\10\23\2\0\33\23"+
    "\17\0\7\23\4\0\22\23\1\u01a6\3\23\2\0\33\23"+
    "\17\0\7\23\4\0\10\23\1\u01a7\15\23\2\0\33\23"+
    "\17\0\7\23\4\0\26\23\2\0\24\23\1\u01a8\6\23"+
    "\17\0\7\23\4\0\20\23\1\u01a9\5\23\2\0\33\23"+
    "\17\0\7\23\4\0\21\23\1\u01aa\4\23\2\0\33\23"+
    "\17\0\7\23\4\0\1\u01ab\25\23\2\0\33\23\17\0"+
    "\7\23\4\0\13\23\1\u01ac\12\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u01ad\25\23\17\0"+
    "\7\23\4\0\21\23\1\370\4\23\2\0\33\23\17\0"+
    "\7\23\4\0\21\23\1\u01ae\4\23\2\0\33\23\17\0"+
    "\7\23\4\0\4\23\1\u01af\21\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u01b0\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u01b1\31\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u01b2\14\23\17\0"+
    "\7\23\4\0\26\23\2\0\17\23\1\u01b3\13\23\17\0"+
    "\7\23\4\0\26\23\2\0\11\23\1\u01b4\21\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u015a\25\23\17\0"+
    "\7\23\4\0\10\23\1\u01b5\15\23\2\0\33\23\17\0"+
    "\7\23\4\0\24\23\1\u01b6\1\23\2\0\33\23\17\0"+
    "\7\23\4\0\2\23\1\u01b7\23\23\2\0\33\23\17\0"+
    "\7\23\4\0\16\23\1\u01b8\7\23\2\0\33\23\17\0"+
    "\7\23\4\0\13\23\1\u01b9\12\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u01ba\14\23\17\0"+
    "\7\23\4\0\26\23\2\0\3\23\1\u01bb\27\23\17\0"+
    "\7\23\4\0\4\23\1\u01bc\21\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\13\23\1\u01bd\17\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u01be\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\11\23\1\u01bf\21\23\17\0"+
    "\7\23\4\0\26\23\2\0\24\23\1\u01c0\6\23\17\0"+
    "\7\23\4\0\26\23\2\0\17\23\1\u01c1\13\23\17\0"+
    "\7\23\4\0\26\23\2\0\15\23\1\u01c2\15\23\17\0"+
    "\7\23\4\0\26\23\2\0\3\23\1\u01c3\27\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u01c4\14\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u01c5\31\23\17\0"+
    "\7\23\4\0\26\23\2\0\22\23\1\u01c6\10\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u01c7\31\23\17\0"+
    "\7\23\4\0\26\23\2\0\22\23\1\u01c8\10\23\17\0"+
    "\7\23\4\0\26\23\2\0\23\23\1\u01c9\7\23\17\0"+
    "\7\23\4\0\26\23\2\0\3\23\1\u01ca\27\23\17\0"+
    "\7\23\4\0\26\23\2\0\24\23\1\u01cb\6\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u01cc\5\23\1\u01cd"+
    "\23\23\17\0\7\23\4\0\26\23\2\0\17\23\1\u01ce"+
    "\13\23\17\0\7\23\4\0\26\23\2\0\23\23\1\u01cf"+
    "\1\23\1\u01d0\5\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u01d1\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u01d2\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\16\23\1\u01d3\14\23\17\0\7\23\4\0\26\23\2\0"+
    "\17\23\1\u01d4\13\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u01d5\21\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u01d6\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u01d7\21\23\17\0\7\23\4\0\26\23\2\0"+
    "\14\23\1\u01d8\16\23\17\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\u01d9\31\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u0132\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u01da\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\3\23\1\u01db\27\23\17\0\7\23\4\0\26\23\2\0"+
    "\22\23\1\u01dc\10\23\17\0\7\23\4\0\26\23\2\0"+
    "\3\23\1\u01dd\27\23\17\0\7\23\4\0\26\23\2\0"+
    "\23\23\1\u01de\7\23\17\0\7\23\4\0\26\23\2\0"+
    "\23\23\1\u01df\1\u01e0\6\23\17\0\7\23\4\0\26\23"+
    "\2\0\1\23\1\u01e1\31\23\17\0\7\23\4\0\26\23"+
    "\2\0\25\23\1\u01e2\5\23\17\0\7\23\4\0\26\23"+
    "\2\0\11\23\1\u01e3\21\23\17\0\7\23\4\0\26\23"+
    "\2\0\1\23\1\u01e4\7\23\1\u01e5\21\23\17\0\7\23"+
    "\4\0\26\23\2\0\5\23\1\u01e6\25\23\17\0\7\23"+
    "\4\0\26\23\2\0\11\23\1\u01e7\21\23\17\0\7\23"+
    "\4\0\26\23\2\0\3\23\1\u010c\27\23\17\0\7\23"+
    "\4\0\26\23\2\0\2\23\1\u01e8\30\23\17\0\7\23"+
    "\4\0\26\23\2\0\1\23\1\u01e9\31\23\17\0\7\23"+
    "\4\0\26\23\2\0\6\23\1\u01ea\24\23\17\0\7\23"+
    "\4\0\26\23\2\0\5\23\1\u01eb\25\23\17\0\7\23"+
    "\4\0\26\23\2\0\5\23\1\u01ec\25\23\17\0\7\23"+
    "\4\0\26\23\2\0\11\23\1\u01ed\21\23\17\0\7\23"+
    "\4\0\26\23\2\0\25\23\1\u01ee\5\23\17\0\7\23"+
    "\4\0\26\23\2\0\15\23\1\u01ef\15\23\17\0\7\23"+
    "\4\0\26\23\2\0\1\23\1\u01f0\31\23\17\0\7\23"+
    "\4\0\26\23\2\0\17\23\1\u01f1\13\23\17\0\7\23"+
    "\4\0\26\23\2\0\14\23\1\u01f2\16\23\17\0\7\23"+
    "\4\0\26\23\2\0\16\23\1\u01f3\14\23\17\0\7\23"+
    "\4\0\26\23\2\0\5\23\1\u01f4\25\23\17\0\7\23"+
    "\4\0\26\23\2\0\14\23\1\u01f5\2\23\1\u01f6\13\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u01f7\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\14\23\1\u01f8\16\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u01f9\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\u01fa\31\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u01fb\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\u0188\31\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\u01fc\3\23"+
    "\1\u01fd\7\23\1\u01fe\15\23\17\0\7\23\4\0\26\23"+
    "\2\0\15\23\1\u01ff\15\23\17\0\7\23\4\0\26\23"+
    "\2\0\3\23\1\u0200\27\23\17\0\7\23\4\0\26\23"+
    "\2\0\2\23\1\u0201\30\23\17\0\7\23\4\0\26\23"+
    "\2\0\17\23\1\u0202\13\23\17\0\7\23\4\0\26\23"+
    "\2\0\25\23\1\u0203\5\23\17\0\7\23\4\0\26\23"+
    "\2\0\11\23\1\u0204\21\23\17\0\7\23\4\0\26\23"+
    "\2\0\5\23\1\u0205\25\23\17\0\7\23\4\0\26\23"+
    "\2\0\4\23\1\u0140\26\23\17\0\7\23\4\0\26\23"+
    "\2\0\14\23\1\u0206\2\23\1\u0207\13\23\17\0\7\23"+
    "\4\0\26\23\2\0\14\23\1\u0208\16\23\17\0\7\23"+
    "\4\0\26\23\2\0\5\23\1\u0209\25\23\17\0\7\23"+
    "\4\0\26\23\2\0\11\23\1\u020a\21\23\17\0\7\23"+
    "\4\0\26\23\2\0\24\23\1\u020b\6\23\17\0\7\23"+
    "\4\0\26\23\2\0\11\23\1\u020c\21\23\17\0\7\23"+
    "\4\0\26\23\2\0\24\23\1\u020d\6\23\17\0\7\23"+
    "\4\0\26\23\2\0\5\23\1\u020e\11\23\1\u020f\13\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\u0210\31\23"+
    "\17\0\7\23\4\0\26\23\2\0\16\23\1\u0211\14\23"+
    "\17\0\7\23\4\0\26\23\2\0\2\23\1\u0212\30\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u0213\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\13\23\1\u0214\17\23"+
    "\17\0\7\23\4\0\26\23\2\0\7\23\1\u0132\23\23"+
    "\17\0\7\23\4\0\26\23\2\0\20\23\1\351\12\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\u0215\31\23"+
    "\17\0\7\23\4\0\26\23\2\0\3\23\1\u0216\27\23"+
    "\17\0\7\23\4\0\26\23\2\0\25\23\1\u0217\5\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u0218\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\11\23\1\u0219\21\23"+
    "\17\0\7\23\4\0\26\23\2\0\24\23\1\u021a\6\23"+
    "\17\0\7\23\4\0\26\23\2\0\24\23\1\u021b\6\23"+
    "\17\0\7\23\4\0\26\23\2\0\24\23\1\u021c\6\23"+
    "\17\0\7\23\4\0\26\23\2\0\14\23\1\u021d\16\23"+
    "\17\0\7\23\4\0\26\23\2\0\16\23\1\u021e\14\23"+
    "\17\0\7\23\4\0\26\23\2\0\16\23\1\u015b\14\23"+
    "\17\0\7\23\4\0\26\23\2\0\14\23\1\u015a\16\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u021f\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\22\23\1\u0220\10\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u0221\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\22\23\1\u0222\10\23"+
    "\17\0\7\23\4\0\26\23\2\0\13\23\1\u0223\17\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\u0224\22\23"+
    "\1\u0225\6\23\17\0\7\23\4\0\26\23\2\0\23\23"+
    "\1\u0226\7\23\17\0\7\23\4\0\26\23\2\0\7\23"+
    "\1\u0227\23\23\17\0\7\23\4\0\26\23\2\0\26\23"+
    "\1\u0228\4\23\17\0\7\23\4\0\26\23\2\0\3\23"+
    "\1\u0229\14\23\1\u022a\3\23\1\u022b\6\23\17\0\7\23"+
    "\4\0\26\23\2\0\14\23\1\u022c\16\23\17\0\7\23"+
    "\4\0\26\23\2\0\14\23\1\u022d\16\23\17\0\7\23"+
    "\4\0\26\23\2\0\23\23\1\u022e\7\23\17\0\7\23"+
    "\4\0\26\23\2\0\4\23\1\u022f\26\23\17\0\7\23"+
    "\4\0\26\23\2\0\17\23\1\u0230\13\23\17\0\7\23"+
    "\4\0\26\23\2\0\17\23\1\u021b\13\23\6\0\1\u0231"+
    "\10\0\7\23\4\0\26\23\2\0\33\23\17\0\7\23"+
    "\4\0\26\23\2\0\11\23\1\u0232\21\23\17\0\7\23"+
    "\4\0\26\23\2\0\17\23\1\u0233\13\23\17\0\7\23"+
    "\4\0\26\23\2\0\25\23\1\u0234\5\23\17\0\7\23"+
    "\4\0\26\23\2\0\24\23\1\u0235\6\23\17\0\7\23"+
    "\4\0\26\23\2\0\22\23\1\u0236\2\23\1\u0237\5\23"+
    "\17\0\7\23\4\0\26\23\2\0\20\23\1\u0238\12\23"+
    "\17\0\7\23\4\0\26\23\2\0\14\23\1\u0239\16\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u023a\1\u023b"+
    "\24\23\17\0\7\23\4\0\26\23\2\0\22\23\1\u0188"+
    "\10\23\17\0\7\23\4\0\26\23\2\0\16\23\1\u023c"+
    "\14\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u023d"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\3\23\1\u023e"+
    "\20\23\1\u023f\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u0240\13\23\1\u0241\5\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u0242\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u0243\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\3\23\1\u0244\27\23\17\0\7\23\4\0"+
    "\26\23\2\0\23\23\1\u023b\7\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u0245\11\23\1\u0246\13\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u0247\14\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u0248\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\24\23\1\u0132\6\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u0150\14\23\17\0"+
    "\7\23\4\0\26\23\2\0\10\23\1\u0249\22\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u024a\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\17\23\1\u024b\13\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u024c\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u024d\31\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u024e\7\23\1\u024f"+
    "\21\23\17\0\7\23\4\0\26\23\2\0\11\23\1\u0250"+
    "\21\23\17\0\7\23\4\0\26\23\2\0\16\23\1\u0251"+
    "\14\23\17\0\7\23\4\0\26\23\2\0\25\23\1\u0252"+
    "\5\23\17\0\7\23\4\0\26\23\2\0\24\23\1\u0253"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\4\23\1\u0254"+
    "\26\23\17\0\7\23\4\0\26\23\2\0\1\23\1\u0255"+
    "\31\23\17\0\7\23\4\0\26\23\2\0\16\23\1\u0256"+
    "\14\23\17\0\7\23\4\0\26\23\2\0\16\23\1\u01da"+
    "\3\23\1\u0257\10\23\17\0\7\23\4\0\26\23\2\0"+
    "\14\23\1\u0258\16\23\17\0\7\23\4\0\26\23\2\0"+
    "\10\23\1\u0259\22\23\17\0\7\23\4\0\26\23\2\0"+
    "\14\23\1\u025a\16\23\17\0\7\23\4\0\3\23\1\u025b"+
    "\22\23\2\0\33\23\17\0\7\23\4\0\21\23\1\u025c"+
    "\4\23\2\0\33\23\17\0\7\23\4\0\15\23\1\u025d"+
    "\10\23\2\0\33\23\17\0\7\23\4\0\20\23\1\u025e"+
    "\5\23\2\0\33\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u025f\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\15\23\1\u0260\15\23\17\0\7\23\4\0\15\23\1\u0261"+
    "\10\23\2\0\33\23\17\0\7\23\4\0\20\23\1\u0262"+
    "\5\23\2\0\33\23\17\0\7\23\4\0\12\23\1\u0263"+
    "\13\23\2\0\33\23\17\0\7\23\4\0\16\23\1\u0264"+
    "\7\23\2\0\33\23\17\0\7\23\4\0\26\23\2\0"+
    "\16\23\1\u0265\14\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u0266\21\23\17\0\7\23\4\0\25\23\1\u01b2"+
    "\2\0\33\23\17\0\7\23\4\0\4\23\1\u0267\21\23"+
    "\2\0\33\23\17\0\7\23\4\0\17\23\1\u0268\6\23"+
    "\2\0\33\23\17\0\7\23\4\0\23\23\1\u0269\2\23"+
    "\2\0\33\23\17\0\7\23\4\0\26\23\2\0\20\23"+
    "\1\u026a\12\23\17\0\7\23\4\0\22\23\1\u026b\3\23"+
    "\2\0\33\23\17\0\7\23\4\0\20\23\1\u026c\5\23"+
    "\2\0\33\23\17\0\7\23\4\0\26\23\2\0\22\23"+
    "\1\u026d\10\23\17\0\7\23\4\0\26\23\2\0\14\23"+
    "\1\u026e\16\23\17\0\7\23\4\0\26\23\2\0\22\23"+
    "\1\u026f\10\23\17\0\7\23\4\0\26\23\2\0\24\23"+
    "\1\u0270\6\23\17\0\7\23\4\0\22\23\1\u0271\3\23"+
    "\2\0\33\23\17\0\7\23\4\0\10\23\1\u0272\15\23"+
    "\2\0\33\23\17\0\7\23\4\0\4\23\1\u0273\21\23"+
    "\2\0\33\23\17\0\7\23\4\0\20\23\1\u0274\5\23"+
    "\2\0\33\23\17\0\7\23\4\0\1\u0275\25\23\2\0"+
    "\33\23\17\0\7\23\4\0\26\23\2\0\13\23\1\u0276"+
    "\17\23\17\0\7\23\4\0\26\23\2\0\1\23\1\u0277"+
    "\31\23\17\0\7\23\4\0\26\23\2\0\7\23\1\u01cd"+
    "\23\23\17\0\7\23\4\0\10\23\1\305\15\23\2\0"+
    "\33\23\17\0\7\23\4\0\26\23\2\0\14\23\1\u0278"+
    "\16\23\17\0\7\23\4\0\26\23\2\0\20\23\1\u0279"+
    "\12\23\17\0\7\23\4\0\26\23\2\0\11\23\1\u027a"+
    "\21\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u027b"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\7\23\1\u027c"+
    "\23\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u027d"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\24\23\1\u027e"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u0245"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\1\u027f\32\23"+
    "\17\0\7\23\4\0\26\23\2\0\13\23\1\u0280\17\23"+
    "\17\0\7\23\4\0\26\23\2\0\22\23\1\u0281\10\23"+
    "\17\0\7\23\4\0\26\23\2\0\23\23\1\u0282\7\23"+
    "\17\0\7\23\4\0\26\23\2\0\16\23\1\u0283\14\23"+
    "\17\0\7\23\4\0\26\23\2\0\27\23\1\u0284\3\23"+
    "\17\0\7\23\4\0\26\23\2\0\15\23\1\u0285\15\23"+
    "\17\0\7\23\4\0\26\23\2\0\16\23\1\u0286\14\23"+
    "\17\0\7\23\4\0\26\23\2\0\15\23\1\u0287\4\23"+
    "\1\u0288\10\23\17\0\7\23\4\0\26\23\2\0\3\23"+
    "\1\u0289\27\23\17\0\7\23\4\0\26\23\2\0\24\23"+
    "\1\u028a\6\23\17\0\7\23\4\0\26\23\2\0\16\23"+
    "\1\u0261\14\23\17\0\7\23\4\0\26\23\2\0\5\23"+
    "\1\u028b\25\23\17\0\7\23\4\0\26\23\2\0\13\23"+
    "\1\u028c\17\23\17\0\7\23\4\0\26\23\2\0\10\23"+
    "\1\u0186\22\23\17\0\7\23\4\0\26\23\2\0\13\23"+
    "\1\u028d\17\23\17\0\7\23\4\0\26\23\2\0\23\23"+
    "\1\u028e\7\23\17\0\7\23\4\0\26\23\2\0\24\23"+
    "\1\u028f\6\23\17\0\7\23\4\0\26\23\2\0\11\23"+
    "\1\u0290\21\23\6\0\1\u0291\10\0\7\23\4\0\26\23"+
    "\2\0\33\23\17\0\7\23\4\0\26\23\2\0\7\23"+
    "\1\u0292\23\23\17\0\7\23\4\0\26\23\2\0\15\23"+
    "\1\u0293\15\23\17\0\7\23\4\0\26\23\2\0\25\23"+
    "\1\u0294\5\23\17\0\7\23\4\0\26\23\2\0\16\23"+
    "\1\u0295\14\23\17\0\7\23\4\0\26\23\2\0\7\23"+
    "\1\u0296\23\23\17\0\7\23\4\0\26\23\2\0\26\23"+
    "\1\u0297\4\23\17\0\7\23\4\0\26\23\2\0\14\23"+
    "\1\u0115\16\23\17\0\7\23\4\0\26\23\2\0\15\23"+
    "\1\u0298\15\23\17\0\7\23\4\0\26\23\2\0\4\23"+
    "\1\u0299\26\23\17\0\7\23\4\0\26\23\2\0\6\23"+
    "\1\u029a\24\23\17\0\7\23\4\0\26\23\2\0\22\23"+
    "\1\u029b\10\23\17\0\7\23\4\0\26\23\2\0\14\23"+
    "\1\u029c\16\23\17\0\7\23\4\0\26\23\2\0\22\23"+
    "\1\u029d\10\23\17\0\7\23\4\0\26\23\2\0\24\23"+
    "\1\u029e\6\23\17\0\7\23\4\0\26\23\2\0\20\23"+
    "\1\u029f\12\23\17\0\7\23\4\0\26\23\2\0\11\23"+
    "\1\u02a0\21\23\17\0\7\23\4\0\26\23\2\0\22\23"+
    "\1\u02a1\10\23\17\0\7\23\4\0\26\23\2\0\16\23"+
    "\1\u02a2\3\23\1\u02a3\10\23\17\0\7\23\4\0\26\23"+
    "\2\0\4\23\1\u029e\26\23\17\0\7\23\4\0\26\23"+
    "\2\0\14\23\1\u02a4\16\23\17\0\7\23\4\0\26\23"+
    "\2\0\4\23\1\u02a5\26\23\17\0\7\23\4\0\26\23"+
    "\2\0\14\23\1\u02a6\16\23\17\0\7\23\4\0\26\23"+
    "\2\0\1\23\1\u02a7\7\23\1\u02a8\21\23\17\0\7\23"+
    "\4\0\26\23\2\0\24\23\1\u02a9\6\23\17\0\7\23"+
    "\4\0\26\23\2\0\1\23\1\u02aa\31\23\17\0\7\23"+
    "\4\0\26\23\2\0\20\23\1\u02ab\12\23\17\0\7\23"+
    "\4\0\26\23\2\0\16\23\1\u02ac\14\23\17\0\7\23"+
    "\4\0\26\23\2\0\6\23\1\u01eb\24\23\17\0\7\23"+
    "\4\0\26\23\2\0\5\23\1\u02ad\3\23\1\u02ae\21\23"+
    "\17\0\7\23\4\0\26\23\2\0\22\23\1\u02af\10\23"+
    "\17\0\7\23\4\0\26\23\2\0\25\23\1\u02b0\5\23"+
    "\17\0\7\23\4\0\26\23\2\0\30\23\1\u02b1\2\23"+
    "\17\0\7\23\4\0\26\23\2\0\30\23\1\u02b2\2\23"+
    "\17\0\7\23\4\0\26\23\2\0\16\23\1\u02b3\14\23"+
    "\17\0\7\23\4\0\26\23\2\0\1\23\1\u02b4\31\23"+
    "\17\0\7\23\4\0\26\23\2\0\22\23\1\u02b5\10\23"+
    "\17\0\7\23\4\0\26\23\2\0\16\23\1\u02b6\14\23"+
    "\17\0\7\23\4\0\26\23\2\0\4\23\1\u02b7\26\23"+
    "\17\0\7\23\4\0\26\23\2\0\7\23\1\u02b8\23\23"+
    "\17\0\7\23\4\0\26\23\2\0\10\23\1\u01da\22\23"+
    "\17\0\7\23\4\0\26\23\2\0\14\23\1\u02b9\16\23"+
    "\17\0\7\23\4\0\26\23\2\0\17\23\1\u02ba\3\23"+
    "\1\u02bb\7\23\17\0\7\23\4\0\26\23\2\0\26\23"+
    "\1\u02bc\4\23\17\0\7\23\4\0\26\23\2\0\31\23"+
    "\1\u02bd\1\23\17\0\7\23\4\0\26\23\2\0\17\23"+
    "\1\u02be\13\23\17\0\7\23\4\0\26\23\2\0\25\23"+
    "\1\u02bf\5\23\17\0\7\23\4\0\26\23\2\0\3\23"+
    "\1\u02c0\27\23\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\u02c1\31\23\17\0\7\23\4\0\26\23\2\0\22\23"+
    "\1\u02c2\10\23\17\0\7\23\4\0\26\23\2\0\22\23"+
    "\1\u02c3\10\23\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\u02c4\31\23\17\0\7\23\4\0\26\23\2\0\15\23"+
    "\1\u02c5\15\23\17\0\7\23\4\0\26\23\2\0\11\23"+
    "\1\u02c6\21\23\17\0\7\23\4\0\26\23\2\0\15\23"+
    "\1\u02c7\15\23\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\u02c8\31\23\17\0\7\23\4\0\26\23\2\0\5\23"+
    "\1\u02c9\25\23\17\0\7\23\4\0\26\23\2\0\5\23"+
    "\1\u02ca\25\23\17\0\7\23\4\0\26\23\2\0\11\23"+
    "\1\u02cb\21\23\17\0\7\23\4\0\26\23\2\0\11\23"+
    "\1\u02cc\21\23\17\0\7\23\4\0\26\23\2\0\5\23"+
    "\1\u02cd\25\23\17\0\7\23\4\0\26\23\2\0\17\23"+
    "\1\u02ce\13\23\17\0\7\23\4\0\26\23\2\0\22\23"+
    "\1\u02cf\10\23\77\0\1\u02d0\34\0\7\23\4\0\26\23"+
    "\2\0\23\23\1\u02d1\7\23\17\0\7\23\4\0\26\23"+
    "\2\0\26\23\1\u02d2\4\23\17\0\7\23\4\0\26\23"+
    "\2\0\11\23\1\u02d3\21\23\17\0\7\23\4\0\26\23"+
    "\2\0\22\23\1\u02d4\10\23\17\0\7\23\4\0\26\23"+
    "\2\0\31\23\1\u02d5\1\23\17\0\7\23\4\0\26\23"+
    "\2\0\22\23\1\u02d6\10\23\17\0\7\23\4\0\26\23"+
    "\2\0\5\23\1\u02d7\25\23\17\0\7\23\4\0\26\23"+
    "\2\0\5\23\1\u02d8\25\23\17\0\7\23\4\0\26\23"+
    "\2\0\3\23\1\u02d9\27\23\17\0\7\23\4\0\26\23"+
    "\2\0\5\23\1\u02da\25\23\17\0\7\23\4\0\26\23"+
    "\2\0\17\23\1\u02db\13\23\17\0\7\23\4\0\26\23"+
    "\2\0\13\23\1\u02dc\17\23\17\0\7\23\4\0\26\23"+
    "\2\0\11\23\1\u02dd\21\23\17\0\7\23\4\0\26\23"+
    "\2\0\16\23\1\u02de\14\23\17\0\7\23\4\0\26\23"+
    "\2\0\3\23\1\u02df\27\23\17\0\7\23\4\0\26\23"+
    "\2\0\22\23\1\u02e0\10\23\17\0\7\23\4\0\26\23"+
    "\2\0\3\23\1\u02e1\27\23\17\0\7\23\4\0\26\23"+
    "\2\0\10\23\1\u02e2\22\23\17\0\7\23\4\0\26\23"+
    "\2\0\1\23\1\u02e3\31\23\17\0\7\23\4\0\26\23"+
    "\2\0\27\23\1\u02cd\3\23\17\0\7\23\4\0\26\23"+
    "\2\0\23\23\1\u02e4\7\23\6\0\1\u02e5\10\0\7\23"+
    "\4\0\26\23\2\0\4\23\1\u02e6\12\23\1\u02e7\13\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u02e8\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\6\23\1\u02e9\24\23"+
    "\17\0\7\23\4\0\26\23\2\0\16\23\1\u02ea\14\23"+
    "\17\0\7\23\4\0\26\23\2\0\23\23\1\u02eb\7\23"+
    "\17\0\7\23\4\0\26\23\2\0\16\23\1\u0152\14\23"+
    "\17\0\7\23\4\0\26\23\2\0\6\23\1\u02ec\24\23"+
    "\17\0\7\23\4\0\26\23\2\0\7\23\1\u017c\23\23"+
    "\17\0\7\23\4\0\26\23\2\0\14\23\1\351\16\23"+
    "\17\0\7\23\4\0\26\23\2\0\7\23\1\u02ed\23\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u02ee\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\25\23\1\u02ef\5\23"+
    "\17\0\7\23\4\0\26\23\2\0\24\23\1\u02f0\6\23"+
    "\17\0\7\23\4\0\26\23\2\0\11\23\1\u02f1\21\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u02f2\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\351\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\4\23\1\u02f3\26\23"+
    "\17\0\7\23\4\0\21\23\1\u02f4\4\23\2\0\33\23"+
    "\17\0\7\23\4\0\2\23\1\u02f5\23\23\2\0\33\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u02f6\25\23"+
    "\17\0\7\23\4\0\26\23\2\0\5\23\1\u02f7\25\23"+
    "\17\0\7\23\4\0\25\23\1\u02f8\2\0\33\23\17\0"+
    "\7\23\4\0\14\23\1\u026b\11\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\24\23\1\u02f9\6\23\17\0"+
    "\7\23\4\0\26\23\2\0\17\23\1\u02fa\13\23\17\0"+
    "\7\23\4\0\4\23\1\u028c\21\23\2\0\33\23\17\0"+
    "\7\23\4\0\1\u02fb\25\23\2\0\33\23\17\0\7\23"+
    "\4\0\26\23\2\0\24\23\1\u02fc\6\23\17\0\7\23"+
    "\4\0\1\u02fd\25\23\2\0\33\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u02fe\16\23\17\0\7\23\4\0"+
    "\26\23\2\0\11\23\1\u02ff\21\23\17\0\7\23\4\0"+
    "\26\23\2\0\31\23\1\u01ba\1\23\17\0\7\23\4\0"+
    "\26\23\2\0\17\23\1\u0300\13\23\17\0\7\23\4\0"+
    "\10\23\1\u0301\15\23\2\0\33\23\17\0\7\23\4\0"+
    "\16\23\1\u0302\7\23\2\0\33\23\17\0\7\23\4\0"+
    "\4\23\1\u0303\21\23\2\0\33\23\17\0\7\23\4\0"+
    "\3\23\1\u0304\22\23\2\0\33\23\17\0\7\23\4\0"+
    "\2\23\1\u0305\23\23\2\0\33\23\17\0\7\23\4\0"+
    "\22\23\1\u0306\3\23\2\0\33\23\17\0\7\23\4\0"+
    "\26\23\2\0\4\23\1\u0307\26\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u0308\16\23\17\0\7\23\4\0"+
    "\26\23\2\0\15\23\1\u0309\15\23\17\0\7\23\4\0"+
    "\26\23\2\0\22\23\1\u030a\10\23\17\0\7\23\4\0"+
    "\26\23\2\0\11\23\1\u030b\21\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u030c\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\11\23\1\u030d\21\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u030e\3\23\1\u030f\21\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u0310\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u0311\31\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u0312\15\23\1\u0313"+
    "\13\23\17\0\7\23\4\0\26\23\2\0\23\23\1\u0314"+
    "\7\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u0315"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\4\23\1\u0316"+
    "\26\23\17\0\7\23\4\0\26\23\2\0\2\23\1\u0317"+
    "\30\23\17\0\7\23\4\0\26\23\2\0\24\23\1\u0318"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\1\23\1\u0319"+
    "\31\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u031a"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u031b"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\16\23\1\u031c"+
    "\14\23\70\0\1\u031d\2\0\1\u031e\40\0\7\23\4\0"+
    "\26\23\2\0\7\23\1\u031f\23\23\17\0\7\23\4\0"+
    "\26\23\2\0\1\23\1\u0320\31\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u0321\16\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u0322\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\1\23\1\u0323\31\23\17\0\7\23\4\0"+
    "\26\23\2\0\11\23\1\u0324\21\23\17\0\7\23\4\0"+
    "\26\23\2\0\11\23\1\u0325\21\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u0326\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\23\23\1\u0327\7\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u0186\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\3\23\1\u0328\27\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u0329\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\4\23\1\u032a\26\23\17\0\7\23\4\0"+
    "\26\23\2\0\16\23\1\u032b\14\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u032c\16\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u032d\16\23\17\0\7\23\4\0"+
    "\26\23\2\0\3\23\1\u032e\27\23\17\0\7\23\4\0"+
    "\26\23\2\0\7\23\1\u02a3\23\23\17\0\7\23\4\0"+
    "\26\23\2\0\11\23\1\u032f\21\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u0330\16\23\17\0\7\23\4\0"+
    "\26\23\2\0\7\23\1\u0331\23\23\17\0\7\23\4\0"+
    "\26\23\2\0\15\23\1\u0332\15\23\17\0\7\23\4\0"+
    "\26\23\2\0\3\23\1\u0333\27\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u0334\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\4\23\1\u0335\26\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u0336\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u0337\5\23\1\u0337\10\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u0338\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u0339\14\23\17\0"+
    "\7\23\4\0\26\23\2\0\6\23\1\u033a\7\23\1\u033b"+
    "\14\23\17\0\7\23\4\0\26\23\2\0\3\23\1\u033c"+
    "\27\23\17\0\7\23\4\0\26\23\2\0\1\23\1\u033d"+
    "\31\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u033e"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u033f"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\6\23\1\u0340"+
    "\24\23\17\0\7\23\4\0\26\23\2\0\20\23\1\u0341"+
    "\12\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u0342"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\20\23\1\u0343"+
    "\12\23\17\0\7\23\4\0\26\23\2\0\3\23\1\u0201"+
    "\27\23\17\0\7\23\4\0\26\23\2\0\14\23\1\u0344"+
    "\16\23\17\0\7\23\4\0\26\23\2\0\24\23\1\u0345"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\24\23\1\u0346"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\2\23\1\u0347"+
    "\30\23\17\0\7\23\4\0\26\23\2\0\11\23\1\u0348"+
    "\21\23\17\0\7\23\4\0\26\23\2\0\7\23\1\u0349"+
    "\23\23\17\0\7\23\4\0\26\23\2\0\23\23\1\u034a"+
    "\7\23\17\0\7\23\4\0\26\23\2\0\1\23\1\u034b"+
    "\31\23\17\0\7\23\4\0\26\23\2\0\1\23\1\u034c"+
    "\31\23\17\0\7\23\4\0\26\23\2\0\24\23\1\u034d"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\22\23\1\u034e"+
    "\10\23\17\0\7\23\4\0\26\23\2\0\3\23\1\u034f"+
    "\27\23\17\0\7\23\4\0\26\23\2\0\3\23\1\u0350"+
    "\27\23\17\0\7\23\4\0\26\23\2\0\6\23\1\u0351"+
    "\24\23\17\0\7\23\4\0\26\23\2\0\16\23\1\u0352"+
    "\14\23\17\0\7\23\4\0\26\23\2\0\4\23\1\u0353"+
    "\26\23\107\0\1\u0354\24\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u0355\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u0356\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\22\23\1\u0357\10\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u0358\21\23\17\0\7\23\4\0\26\23\2\0"+
    "\16\23\1\u0359\14\23\17\0\7\23\4\0\26\23\2\0"+
    "\4\23\1\u035a\26\23\17\0\7\23\4\0\26\23\2\0"+
    "\4\23\1\u035b\26\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u035c\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\4\23\1\u035d\26\23\17\0\7\23\4\0\26\23\2\0"+
    "\6\23\1\u035e\24\23\17\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\u035f\31\23\17\0\7\23\4\0\26\23\2\0"+
    "\3\23\1\u0360\27\23\17\0\7\23\4\0\26\23\2\0"+
    "\7\23\1\u0361\23\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u02ea\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\10\23\1\u0362\22\23\17\0\7\23\4\0\26\23\2\0"+
    "\22\23\1\u0363\10\23\17\0\7\23\4\0\26\23\2\0"+
    "\4\23\1\u0364\26\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u0365\21\23\70\0\1\u0366\2\0\1\u0367\40\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u0368\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\6\23\1\u0369\24\23\17\0"+
    "\7\23\4\0\26\23\2\0\3\23\1\u036a\27\23\17\0"+
    "\7\23\4\0\26\23\2\0\23\23\1\u01eb\7\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u036b\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u036c\31\23\17\0"+
    "\7\23\4\0\26\23\2\0\11\23\1\u036d\21\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u036e\14\23\17\0"+
    "\7\23\4\0\10\23\1\u036f\15\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\22\23\1\u0370\10\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u0371\14\23\15\0"+
    "\1\u0372\1\0\7\23\4\0\26\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u0373\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u0374\14\23\17\0"+
    "\7\23\4\0\22\23\1\u0375\3\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\11\23\1\u0376\21\23\17\0"+
    "\7\23\4\0\22\23\1\u0377\3\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\17\23\1\u0378\13\23\17\0"+
    "\7\23\4\0\26\23\2\0\4\23\1\u0379\26\23\17\0"+
    "\7\23\4\0\26\23\2\0\22\23\1\u0214\10\23\17\0"+
    "\7\23\4\0\16\23\1\u037a\7\23\2\0\33\23\17\0"+
    "\7\23\4\0\23\23\1\u037b\2\23\2\0\33\23\17\0"+
    "\7\23\4\0\3\23\1\u037c\22\23\2\0\33\23\17\0"+
    "\7\23\4\0\21\23\1\u037d\4\23\2\0\33\23\17\0"+
    "\7\23\4\0\10\23\1\u037e\15\23\2\0\33\23\17\0"+
    "\7\23\4\0\26\23\2\0\22\23\1\u037f\10\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u0380\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u0381\31\23\17\0"+
    "\7\23\4\0\26\23\2\0\11\23\1\u0382\21\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u0383\14\23\17\0"+
    "\7\23\4\0\26\23\2\0\25\23\1\u0384\5\23\17\0"+
    "\7\23\4\0\26\23\2\0\3\23\1\u0385\27\23\17\0"+
    "\7\23\4\0\26\23\2\0\15\23\1\u0386\15\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u0387\14\23\17\0"+
    "\7\23\4\0\26\23\2\0\4\23\1\u0388\26\23\17\0"+
    "\7\23\4\0\26\23\2\0\3\23\1\u0389\27\23\17\0"+
    "\7\23\4\0\26\23\2\0\23\23\1\u038a\7\23\17\0"+
    "\7\23\4\0\26\23\2\0\6\23\1\u038b\24\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u038c\14\23\17\0"+
    "\7\23\4\0\26\23\2\0\11\23\1\u038d\21\23\17\0"+
    "\7\23\4\0\26\23\2\0\14\23\1\u038e\16\23\17\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u0278\14\23\17\0"+
    "\7\23\4\0\26\23\2\0\4\23\1\u038f\26\23\17\0"+
    "\7\23\4\0\26\23\2\0\30\23\1\u0390\2\23\17\0"+
    "\7\23\4\0\26\23\2\0\25\23\1\u0391\5\23\63\0"+
    "\1\u0392\131\0\1\u0393\33\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u0394\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\14\23\1\u0132\16\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u0395\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\4\23\1\u0396\26\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u0397\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\16\23\1\u0398\14\23\17\0\7\23\4\0\26\23\2\0"+
    "\3\23\1\u0399\27\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u039a\21\23\17\0\7\23\4\0\26\23\2\0"+
    "\23\23\1\u039b\7\23\17\0\7\23\4\0\26\23\2\0"+
    "\31\23\1\u0186\1\23\17\0\7\23\4\0\26\23\2\0"+
    "\10\23\1\351\22\23\17\0\7\23\4\0\26\23\2\0"+
    "\17\23\1\u039c\13\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u039d\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u039e\21\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u039f\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\22\23\1\u029e\10\23\17\0\7\23\4\0\26\23\2\0"+
    "\3\23\1\u03a0\27\23\17\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\u03a1\31\23\17\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\u03a2\31\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u03a3\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\4\23\1\u03a4\26\23\17\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\u03a5\31\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u03a6\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\14\23\1\u03a7\16\23\17\0\7\23\4\0\26\23\2\0"+
    "\17\23\1\u03a8\13\23\17\0\7\23\4\0\26\23\2\0"+
    "\31\23\1\u03a9\1\23\17\0\7\23\4\0\26\23\2\0"+
    "\4\23\1\u03aa\26\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u03ab\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\14\23\1\u03ac\16\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u0350\25\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u03ad\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u03ae\6\23\17\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u03af\21\23\17\0\7\23\4\0\26\23\2\0"+
    "\14\23\1\u03b0\16\23\106\0\1\u03b1\25\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u03b2\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u03b3\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\3\23\1\u03b4\27\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u03b5\16\23\17\0\7\23\4\0"+
    "\26\23\2\0\1\u03b6\32\23\17\0\7\23\4\0\26\23"+
    "\2\0\17\23\1\u03b7\13\23\17\0\7\23\4\0\26\23"+
    "\2\0\1\u03b8\32\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u03b9\25\23\63\0\1\u03ba\131\0\1\u03bb\33\0"+
    "\7\23\4\0\26\23\2\0\6\23\1\u03a6\24\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\u03bc\32\23\17\0\7\23"+
    "\4\0\26\23\2\0\13\23\1\u03bd\17\23\17\0\7\23"+
    "\4\0\26\23\2\0\14\23\1\u03be\16\23\17\0\7\23"+
    "\4\0\26\23\2\0\14\23\1\u03bf\16\23\17\0\7\23"+
    "\4\0\26\23\2\0\7\23\1\u03c0\23\23\17\0\7\23"+
    "\4\0\15\23\1\u03c1\10\23\2\0\33\23\17\0\7\23"+
    "\4\0\26\23\2\0\1\23\1\u03c2\31\23\17\0\7\23"+
    "\4\0\26\23\2\0\24\23\1\u03c3\6\23\34\0\1\u03c4"+
    "\16\0\1\u03c5\60\0\7\23\4\0\26\23\2\0\7\23"+
    "\1\u03c6\23\23\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\u03c7\31\23\17\0\7\23\4\0\4\23\1\u03c8\21\23"+
    "\2\0\33\23\17\0\7\23\4\0\26\23\2\0\17\23"+
    "\1\u03c9\13\23\17\0\7\23\4\0\4\23\1\u03ca\21\23"+
    "\2\0\33\23\17\0\7\23\4\0\26\23\2\0\3\23"+
    "\1\u03cb\27\23\17\0\7\23\4\0\16\23\1\u03cc\7\23"+
    "\2\0\33\23\17\0\7\23\4\0\15\23\1\u03cd\10\23"+
    "\2\0\33\23\17\0\7\23\4\0\21\23\1\u03ce\4\23"+
    "\2\0\33\23\17\0\7\23\4\0\15\23\1\u03cf\10\23"+
    "\2\0\33\23\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\u03d0\31\23\17\0\7\23\4\0\26\23\2\0\30\23"+
    "\1\u0132\2\23\17\0\7\23\4\0\26\23\2\0\14\23"+
    "\1\u03d1\16\23\17\0\7\23\4\0\26\23\2\0\3\23"+
    "\1\u03d2\27\23\17\0\7\23\4\0\26\23\2\0\1\23"+
    "\1\u03d3\31\23\17\0\7\23\4\0\26\23\2\0\22\23"+
    "\1\u03d4\10\23\17\0\7\23\4\0\26\23\2\0\2\23"+
    "\1\u03d5\30\23\17\0\7\23\4\0\26\23\2\0\3\23"+
    "\1\u03d6\27\23\17\0\7\23\4\0\26\23\2\0\24\23"+
    "\1\u035b\6\23\17\0\7\23\4\0\26\23\2\0\24\23"+
    "\1\u03d7\6\23\17\0\7\23\4\0\26\23\2\0\16\23"+
    "\1\u03d8\14\23\17\0\7\23\4\0\26\23\2\0\31\23"+
    "\1\u033f\1\23\17\0\7\23\4\0\26\23\2\0\20\23"+
    "\1\u03d9\12\23\17\0\7\23\4\0\26\23\2\0\5\23"+
    "\1\u0202\25\23\77\0\1\u03da\122\0\1\u03db\26\0\7\23"+
    "\4\0\26\23\2\0\22\23\1\u03dc\10\23\17\0\7\23"+
    "\3\0\1\u03dd\26\23\2\0\33\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u01ba\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\7\23\1\u03de\23\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u03df\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\16\23\1\222\14\23\17\0\7\23\4\0"+
    "\26\23\2\0\16\23\1\u03e0\14\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u03e1\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u03e2\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\3\23\1\u0397\27\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u0350\16\23\17\0\7\23\4\0"+
    "\16\23\1\u03e3\7\23\2\0\33\23\17\0\7\23\4\0"+
    "\26\23\2\0\3\23\1\u03e4\27\23\17\0\7\23\4\0"+
    "\26\23\2\0\22\23\1\u03e5\10\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u03e6\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\31\23\1\u029e\1\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u03e7\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u03e8\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\31\23\1\u03e9\1\23\17\0\7\23\4\0"+
    "\26\23\2\0\22\23\1\u03ea\10\23\17\0\7\23\4\0"+
    "\26\23\2\0\4\23\1\u03eb\26\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u03ec\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u03ed\16\23\17\0\7\23\4\0"+
    "\26\23\2\0\1\23\1\u03ee\31\23\17\0\7\23\4\0"+
    "\26\23\2\0\16\23\1\u03ef\14\23\17\0\7\23\4\0"+
    "\26\23\2\0\14\23\1\u03f0\16\23\17\0\7\23\4\0"+
    "\26\23\2\0\16\23\1\u03f1\14\23\77\0\1\u03f2\122\0"+
    "\1\u03f3\26\0\7\23\4\0\26\23\2\0\25\23\1\u03f4"+
    "\5\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u03f5"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u03f6"+
    "\25\23\17\0\7\23\4\0\6\23\1\u03f7\17\23\2\0"+
    "\33\23\17\0\7\23\4\0\26\23\2\0\24\23\1\u03f8"+
    "\6\23\17\0\7\23\4\0\4\23\1\u03f9\21\23\2\0"+
    "\33\23\41\0\1\u03fa\114\0\1\u03fb\72\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u03fc\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\22\23\1\u03fd\10\23\17\0\7\23\4\0"+
    "\26\23\2\0\16\23\1\u03fe\14\23\17\0\7\23\4\0"+
    "\26\23\2\0\13\23\1\u03ff\17\23\17\0\7\23\4\0"+
    "\26\23\2\0\20\23\1\u0400\12\23\17\0\7\23\4\0"+
    "\6\23\1\u0401\17\23\2\0\33\23\17\0\7\23\4\0"+
    "\26\23\2\0\3\23\1\u0402\27\23\17\0\1\23\1\u0403"+
    "\1\23\1\233\1\23\1\217\1\23\4\0\26\23\2\0"+
    "\33\23\17\0\7\23\4\0\26\23\2\0\22\23\1\u0404"+
    "\10\23\17\0\7\23\4\0\26\23\2\0\16\23\1\u0405"+
    "\14\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u0406"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\14\23\1\u0407"+
    "\16\23\17\0\7\23\4\0\26\23\2\0\23\23\1\u0408"+
    "\7\23\17\0\7\23\4\0\26\23\2\0\7\23\1\u03a9"+
    "\23\23\17\0\7\23\4\0\26\23\2\0\22\23\1\u0409"+
    "\10\23\73\0\1\u040a\127\0\1\u040b\14\0\1\u040c\10\0"+
    "\7\23\4\0\26\23\2\0\33\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u040d\6\23\17\0\7\23\4\0"+
    "\26\23\2\0\17\23\1\u03e3\13\23\17\0\7\23\4\0"+
    "\26\23\2\0\6\23\1\u040e\24\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u040f\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\4\23\1\u0350\26\23\17\0\7\23\4\0"+
    "\26\23\2\0\4\23\1\u0410\26\23\17\0\7\23\4\0"+
    "\26\23\2\0\17\23\1\u0411\13\23\17\0\7\23\4\0"+
    "\26\23\2\0\23\23\1\u0412\7\23\17\0\7\23\4\0"+
    "\26\23\2\0\11\23\1\u0413\21\23\17\0\7\23\4\0"+
    "\26\23\2\0\17\23\1\u0414\13\23\17\0\7\23\4\0"+
    "\26\23\2\0\24\23\1\u0415\6\23\73\0\1\u0416\127\0"+
    "\1\u0417\25\0\7\23\4\0\26\23\2\0\16\23\1\u0418"+
    "\14\23\17\0\7\23\4\0\26\23\2\0\4\23\1\u0419"+
    "\26\23\17\0\7\23\4\0\26\23\2\0\17\23\1\u041a"+
    "\13\23\17\0\7\23\4\0\26\23\2\0\30\23\1\u041b"+
    "\2\23\32\0\1\u041c\132\0\1\u041d\63\0\7\23\4\0"+
    "\26\23\2\0\22\23\1\u0132\10\23\17\0\7\23\4\0"+
    "\26\23\2\0\31\23\1\u041e\1\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u041f\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u0420\25\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u0421\25\23\17\0\2\23\1\u0422"+
    "\4\23\4\0\26\23\2\0\33\23\17\0\7\23\4\0"+
    "\26\23\2\0\31\23\1\u0132\1\23\17\0\7\23\4\0"+
    "\26\23\2\0\4\23\1\u0423\26\23\17\0\7\23\4\0"+
    "\26\23\2\0\25\23\1\u0424\5\23\76\0\1\u0425\101\0"+
    "\1\u0426\124\0\1\u0427\40\0\7\23\4\0\26\23\2\0"+
    "\23\23\1\u0428\7\23\17\0\7\23\4\0\26\23\2\0"+
    "\3\23\1\u0429\27\23\17\0\7\23\4\0\26\23\2\0"+
    "\23\23\1\u042a\7\23\17\0\7\23\4\0\26\23\2\0"+
    "\32\23\1\u042b\17\0\7\23\4\0\26\23\2\0\3\23"+
    "\1\u042c\27\23\76\0\1\u042d\101\0\1\u042e\50\0\7\23"+
    "\4\0\26\23\2\0\21\23\1\u042f\11\23\17\0\7\23"+
    "\4\0\26\23\2\0\22\23\1\u0430\10\23\17\0\7\23"+
    "\4\0\26\23\2\0\3\23\1\u0431\27\23\52\0\1\u0432"+
    "\114\0\1\u0433\61\0\7\23\4\0\26\23\2\0\4\23"+
    "\1\u0434\26\23\17\0\7\23\4\0\26\23\2\0\22\23"+
    "\1\u0435\10\23\17\0\6\23\1\u0132\4\0\26\23\2\0"+
    "\33\23\17\0\7\23\4\0\26\23\2\0\4\23\1\u0436"+
    "\26\23\113\0\1\u0437\101\0\1\u0438\114\0\1\u0439\33\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u043a\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\5\23\1\u043b\25\23\17\0"+
    "\7\23\4\0\26\23\2\0\1\23\1\u043c\31\23\113\0"+
    "\1\u043d\101\0\1\u043e\33\0\7\23\4\0\26\23\2\0"+
    "\25\23\1\u043f\5\23\17\0\7\23\4\0\26\23\2\0"+
    "\5\23\1\u0440\25\23\54\0\1\u0432\57\0\7\23\4\0"+
    "\26\23\2\0\1\23\1\u0441\31\23\17\0\7\23\4\0"+
    "\26\23\2\0\5\23\1\u0442\25\23\65\0\1\u0443\134\0"+
    "\1\u0444\26\0\7\23\4\0\26\23\2\0\22\23\1\u0445"+
    "\10\23\17\0\7\23\4\0\26\23\2\0\4\23\1\u0214"+
    "\26\23\17\0\7\23\4\0\26\23\2\0\14\23\1\u0446"+
    "\16\23\65\0\1\u0447\46\0\7\23\4\0\26\23\2\0"+
    "\1\23\1\u0448\31\23\17\0\7\23\4\0\26\23\2\0"+
    "\20\23\1\u0449\12\23\17\0\7\23\4\0\26\23\2\0"+
    "\24\23\1\u044a\6\23\67\0\1\u044b\133\0\1\u044c\25\0"+
    "\7\23\4\0\26\23\2\0\24\23\1\u044d\6\23\67\0"+
    "\1\u044e\44\0\7\23\4\0\26\23\2\0\14\23\1\u044f"+
    "\16\23\17\0\7\23\4\0\26\23\2\0\24\23\1\u0450"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\11\23\1\u0451"+
    "\21\23\63\0\1\u0452\50\0\7\23\4\0\26\23\2\0"+
    "\11\23\1\u0453\21\23\17\0\7\23\4\0\26\23\2\0"+
    "\17\23\1\u0454\13\23\100\0\1\u0455\33\0\7\23\4\0"+
    "\26\23\2\0\17\23\1\u0456\13\23\17\0\7\23\4\0"+
    "\26\23\2\0\16\23\1\u0457\14\23\65\0\1\u0458\46\0"+
    "\7\23\4\0\26\23\2\0\16\23\1\u0459\14\23\17\0"+
    "\7\23\4\0\4\23\1\u045a\21\23\2\0\33\23\67\0"+
    "\1\u045b\44\0\7\23\4\0\26\23\2\0\30\23\1\u045c"+
    "\2\23\17\0\7\23\4\0\26\23\2\0\3\23\1\u045d"+
    "\27\23\17\0\7\23\4\0\26\23\2\0\5\23\1\u045e"+
    "\25\23\17\0\7\23\4\0\26\23\2\0\20\23\1\u045f"+
    "\12\23\17\0\7\23\4\0\26\23\2\0\24\23\1\u0460"+
    "\6\23\17\0\7\23\4\0\26\23\2\0\11\23\1\u0461"+
    "\21\23\17\0\7\23\4\0\26\23\2\0\17\23\1\u0462"+
    "\13\23\17\0\7\23\4\0\26\23\2\0\16\23\1\u0463"+
    "\14\23\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[71533];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\22\1\2\11\30\1\4\11\1\0\6\11\1\1\1\11"+
    "\212\1\2\11\u015f\1\1\0\137\1\1\0\76\1\1\0"+
    "\24\1\1\0\67\1\2\0\65\1\1\0\21\1\2\0"+
    "\12\1\1\0\37\1\2\0\35\1\1\11\10\1\2\0"+
    "\10\1\2\0\24\1\2\0\1\1\1\11\24\1\2\0"+
    "\6\1\2\0\16\1\3\0\11\1\2\0\4\1\2\0"+
    "\7\1\3\0\5\1\2\0\3\1\1\11\1\0\3\1"+
    "\1\11\2\0\3\1\1\11\1\0\4\1\2\0\2\1"+
    "\1\0\3\1\1\11\1\0\1\1\1\11\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1123];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public class Token {
        public String token;
        public String valor;

        public Token(String token, String valor) {
            this.token = token;
            this.valor = valor;
        }
    }
    java.util.List<Token> listaDeTokens = new java.util.ArrayList<>();
    public java.util.List<Token> getTokens() {
        return listaDeTokens;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { Token t = new Token("Error", yytext());
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 205: break;
          case 2:
            { /* ignorar */
            }
          // fall through
          case 206: break;
          case 3:
            { Token t = new Token("operador_referencia", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 207: break;
          case 4:
            { Token t = new Token("ParentesisAbierto", yytext());
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 208: break;
          case 5:
            { Token t = new Token("ParentesisCerrado", yytext());
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 209: break;
          case 6:
            { Token t = new Token("palabra_clave", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 210: break;
          case 7:
            { Token t = new Token("operador_aritmetico", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 211: break;
          case 8:
            { Token t = new Token("Punto", yytext());
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 212: break;
          case 9:
            { Token t = new Token("operador_comparacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 213: break;
          case 10:
            { Token t = new Token("Identificador", yytext());
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 214: break;
          case 11:
            { Token t = new Token("CorcheteAbierto", yytext());
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 215: break;
          case 12:
            { Token t = new Token("CorcheteCerrado", yytext());
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 216: break;
          case 13:
            { Token t = new Token("LlaveAbierta", yytext());
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 217: break;
          case 14:
            { Token t = new Token("LlaveCerrada", yytext());
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 218: break;
          case 15:
            { Token t = new Token("operador_apuntador", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 219: break;
          case 16:
            { Token t = new Token("operador_diferencia", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 220: break;
          case 17:
            { Token t = new Token("operador", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 221: break;
          case 18:
            { Token t = new Token("Igualador", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 222: break;
          case 19:
            { Token t = new Token("operador_desplazamiento", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 223: break;
          case 20:
            { Token t = new Token("acceso_miembro_nulable", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 224: break;
          case 21:
            { Token t = new Token("operador_nulo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 225: break;
          case 22:
            { Token t = new Token("acceso_indexado_nulable", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 226: break;
          case 23:
            { Token t = new Token("conversion_tipo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 227: break;
          case 24:
            { Token t = new Token("ciclo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 228: break;
          case 25:
            { Token t = new Token("declaracion_funcion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 229: break;
          case 26:
            { Token t = new Token("pregunta", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 230: break;
          case 27:
            { Token t = new Token("parametro_entrada", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 231: break;
          case 28:
            { Token t = new Token("verificacion_tipo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 232: break;
          case 29:
            { Token t = new Token("condicion_combinacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 233: break;
          case 30:
            { Token t = new Token("operador_logico", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 234: break;
          case 31:
            { Token t = new Token("separador", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 235: break;
          case 32:
            { Token t = new Token("asignacion_fusion_nulos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 236: break;
          case 33:
            { Token t = new Token("operador_agregacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 237: break;
          case 34:
            { Token t = new Token("cuantificador", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 238: break;
          case 35:
            { Token t = new Token("tipo_binario", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 239: break;
          case 36:
            { Token t = new Token("bloque_fin", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 240: break;
          case 37:
            { Token t = new Token("eliminacion_referencia", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 241: break;
          case 38:
            { Token t = new Token("tipo_numerico", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 242: break;
          case 39:
            { Token t = new Token("acceso_propiedad", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 243: break;
          case 40:
            { Token t = new Token("declaracion_variable", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 244: break;
          case 41:
            { Token t = new Token("bloque_monadico", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 245: break;
          case 42:
            { Token t = new Token("operador_modulo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 246: break;
          case 43:
            { Token t = new Token("instanciacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 247: break;
          case 44:
            { Token t = new Token("literal_referencia", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 248: break;
          case 45:
            { Token t = new Token("parametro_salida", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 249: break;
          case 46:
            { Token t = new Token("recursion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 250: break;
          case 47:
            { Token t = new Token("modificador_referencia", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 251: break;
          case 48:
            { Token t = new Token("asignacion_propiedad", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 252: break;
          case 49:
            { Token t = new Token("manejo_excepciones", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 253: break;
          case 50:
            { Token t = new Token("tipo_inferido", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 254: break;
          case 51:
            { Token t = new Token("notificacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 255: break;
          case 52:
            { Token t = new Token("punto_entrada", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 256: break;
          case 53:
            { Token t = new Token("tipo_referencia", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 257: break;
          case 54:
            { Token t = new Token("literal_booleano", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 258: break;
          case 55:
            { Token t = new Token("tipo_asincrono", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 259: break;
          case 56:
            { Token t = new Token("parametro_programa", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 260: break;
          case 57:
            { Token t = new Token("inferencia_tipo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 261: break;
          case 58:
            { Token t = new Token("referencia_clase_base", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 262: break;
          case 59:
            { Token t = new Token("tipo_logico", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 263: break;
          case 60:
            { Token t = new Token("patron_coincidencia", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 264: break;
          case 61:
            { Token t = new Token("tipo_caracter", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 265: break;
          case 62:
            { Token t = new Token("definicion_datos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 266: break;
          case 63:
            { Token t = new Token("sino", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 267: break;
          case 64:
            { Token t = new Token("tipo_enumeracion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 268: break;
          case 65:
            { Token t = new Token("evaluacion_codigo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 269: break;
          case 66:
            { Token t = new Token("modificador_alcance", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 270: break;
          case 67:
            { Token t = new Token("entrada_datos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 271: break;
          case 68:
            { Token t = new Token("origen_datos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 272: break;
          case 69:
            { Token t = new Token("salto", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 273: break;
          case 70:
            { Token t = new Token("inicializacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 274: break;
          case 71:
            { Token t = new Token("continuacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 275: break;
          case 72:
            { Token t = new Token("combinacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 276: break;
          case 73:
            { Token t = new Token("control_linea", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 277: break;
          case 74:
            { Token t = new Token("sincronizacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 278: break;
          case 75:
            { Token t = new Token("control_iteracion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 279: break;
          case 76:
            { Token t = new Token("tipo_nativo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 280: break;
          case 77:
            { Token t = new Token("operacion_nula", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 281: break;
          case 78:
            { Token t = new Token("definicion_procedimiento", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 282: break;
          case 79:
            { Token t = new Token("referencia_instancia", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 283: break;
          case 80:
            { Token t = new Token("definicion_tipo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 284: break;
          case 81:
            { Token t = new Token("tipo_retorno", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 285: break;
          case 82:
            { Token t = new Token("inicializacion_objeto", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 286: break;
          case 83:
            { Token t = new Token("terminacion_anormal", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 287: break;
          case 84:
            { Token t = new Token("temporizacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 288: break;
          case 85:
            { Token t = new Token("bloque_inicio", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 289: break;
          case 86:
            { Token t = new Token("valor_vacio", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 290: break;
          case 87:
            { Token t = new Token("operacion_limpieza", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 291: break;
          case 88:
            { Token t = new Token("seleccion_elemento", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 292: break;
          case 89:
            { Token t = new Token("definicion_alias", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 293: break;
          case 90:
            { Token t = new Token("programacion_asincrona", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 294: break;
          case 91:
            { Token t = new Token("espera_asincrona", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 295: break;
          case 92:
            { Token t = new Token("alto", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 296: break;
          case 93:
            { Token t = new Token("modificador_constante", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 297: break;
          case 94:
            { Token t = new Token("incrustacion_recurso", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 298: break;
          case 95:
            { Token t = new Token("sino_fin", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 299: break;
          case 96:
            { Token t = new Token("error_compilacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 300: break;
          case 97:
            { Token t = new Token("miembro_clase", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 301: break;
          case 98:
            { Token t = new Token("modificador_inmutabilidad", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 302: break;
          case 99:
            { Token t = new Token("anclaje_memoria", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 303: break;
          case 100:
            { Token t = new Token("agrupacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 304: break;
          case 101:
            { Token t = new Token("definicion_operador", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 305: break;
          case 102:
            { Token t = new Token("lanzamiento_excepcion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 306: break;
          case 103:
            { Token t = new Token("reintento", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 307: break;
          case 104:
            { Token t = new Token("referencia_clase_padre", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 308: break;
          case 105:
            { Token t = new Token("macro_eliminacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 309: break;
          case 106:
            { Token t = new Token("tipo_compuesto", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 310: break;
          case 107:
            { Token t = new Token("gestion_recursos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 311: break;
          case 108:
            { Token t = new Token("contexto_asignacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 312: break;
          case 109:
            { Token t = new Token("filtro", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 313: break;
          case 110:
            { Token t = new Token("generador", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 314: break;
          case 111:
            { Token t = new Token("palabra_clave_especial", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 315: break;
          case 112:
            { Token t = new Token("gestion_hilos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 316: break;
          case 113:
            { Token t = new Token("modificador_permiso", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 317: break;
          case 114:
            { Token t = new Token("verificacion_condicion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 318: break;
          case 115:
            { Token t = new Token("macro_definicion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 319: break;
          case 116:
            { Token t = new Token("garantia_ejecucion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 320: break;
          case 117:
            { Token t = new Token("comparacion_igualdad", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 321: break;
          case 118:
            { Token t = new Token("exportacion_codigo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 322: break;
          case 119:
            { Token t = new Token("interoperabilidad", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 323: break;
          case 120:
            { Token t = new Token("cuantificador_universal", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 324: break;
          case 121:
            { Token t = new Token("ambito_variable", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 325: break;
          case 122:
            { Token t = new Token("exclusion_importacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 326: break;
          case 123:
            { Token t = new Token("inclusion_codigo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 327: break;
          case 124:
            { Token t = new Token("optimizacion_codigo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 328: break;
          case 125:
            { Token t = new Token("funcion_anonima", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 329: break;
          case 126:
            { Token t = new Token("unidad_compilacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 330: break;
          case 127:
            { Token t = new Token("metadato_nombre", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 331: break;
          case 128:
            { Token t = new Token("funcion_nativa", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 332: break;
          case 129:
            { Token t = new Token("tipo_base", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 333: break;
          case 130:
            { Token t = new Token("parametro_variable", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 334: break;
          case 131:
            { Token t = new Token("directiva_compilador", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 335: break;
          case 132:
            { Token t = new Token("modificador_acceso", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 336: break;
          case 133:
            { Token t = new Token("tipo_estructura", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 337: break;
          case 134:
            { Token t = new Token("operador_eliminacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 338: break;
          case 135:
            { Token t = new Token("retorno", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 339: break;
          case 136:
            { Token t = new Token("modificador_vida_util", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 340: break;
          case 137:
            { Token t = new Token("modificador_clase", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 341: break;
          case 138:
            { Token t = new Token("proyeccion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 342: break;
          case 139:
            { Token t = new Token("modificador_signo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 343: break;
          case 140:
            { Token t = new Token("metadato_tamano", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 344: break;
          case 141:
            { Token t = new Token("tipo_cadena", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 345: break;
          case 142:
            { Token t = new Token("reflexion_tipo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 346: break;
          case 143:
            { Token t = new Token("contexto_no_seguro", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 347: break;
          case 144:
            { Token t = new Token("proceder", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 348: break;
          case 145:
            { Token t = new Token("gestion_datos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 349: break;
          case 146:
            { Token t = new Token("empaquetado_estructura", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 350: break;
          case 147:
            { Token t = new Token("alineacion_memoria", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 351: break;
          case 148:
            { Token t = new Token("metadato_alineacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 352: break;
          case 149:
            { Token t = new Token("contexto_verificacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 353: break;
          case 150:
            { Token t = new Token("valor_predeterminado", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 354: break;
          case 151:
            { Token t = new Token("verificacion_macro", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 355: break;
          case 152:
            { Token t = new Token("tipo_dinamico", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 356: break;
          case 153:
            { Token t = new Token("herencia_clase", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 357: break;
          case 154:
            { Token t = new Token("inclusion_archivo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 358: break;
          case 155:
            { Token t = new Token("gestion_memoria", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 359: break;
          case 156:
            { Token t = new Token("restriccion_tipo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 360: break;
          case 157:
            { Token t = new Token("ordenamiento", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 361: break;
          case 158:
            { Token t = new Token("agrupacion_codigo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 362: break;
          case 159:
            { Token t = new Token("definicion_parcial", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 363: break;
          case 160:
            { Token t = new Token("modificador_herencia", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 364: break;
          case 161:
            { Token t = new Token("advertencia_compilacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 365: break;
          case 162:
            { Token t = new Token("evaluacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 366: break;
          case 163:
            { Token t = new Token("generacion_codigo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 367: break;
          case 164:
            { Token t = new Token("posicionamiento", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 368: break;
          case 165:
            { Token t = new Token("referencia_anterior", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 369: break;
          case 166:
            { Token t = new Token("seleccion_generica", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 370: break;
          case 167:
            { Token t = new Token("depuracion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 371: break;
          case 168:
            { Token t = new Token("verificacion_existencia", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 372: break;
          case 169:
            { Token t = new Token("generacion_automatica", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 373: break;
          case 170:
            { Token t = new Token("conversion_explicita", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 374: break;
          case 171:
            { Token t = new Token("conversion_implicita", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 375: break;
          case 172:
            { Token t = new Token("sobrecarga_operador", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 376: break;
          case 173:
            { Token t = new Token("redefinicion_miembro", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 377: break;
          case 174:
            { Token t = new Token("sugerencia_almacenamiento", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 378: break;
          case 175:
            { Token t = new Token("modificador_inicializacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 379: break;
          case 176:
            { Token t = new Token("modificador_optimizacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 380: break;
          case 177:
            { Token t = new Token("modificador_hilos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 381: break;
          case 178:
            { Token t = new Token("avanzar", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 382: break;
          case 179:
            { Token t = new Token("tipo_excepcion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 383: break;
          case 180:
            { Token t = new Token("sustitucion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 384: break;
          case 181:
            { Token t = new Token("modificador_funcion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 385: break;
          case 182:
            { Token t = new Token("parametros_funcion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 386: break;
          case 183:
            { Token t = new Token("expresion_constante", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 387: break;
          case 184:
            { Token t = new Token("agrupacion_logica", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 388: break;
          case 185:
            { Token t = new Token("calificacion_nombre", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 389: break;
          case 186:
            { Token t = new Token("modificador_serializacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 390: break;
          case 187:
            { Token t = new Token("contexto_no_verificado", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 391: break;
          case 188:
            { Token t = new Token("tipo_coleccion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 392: break;
          case 189:
            { Token t = new Token("informacion_depuracion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 393: break;
          case 190:
            { Token t = new Token("verificacion_recurso", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 394: break;
          case 191:
            { Token t = new Token("implementacion_interfaz", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 395: break;
          case 192:
            { Token t = new Token("asignacion_pila", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 396: break;
          case 193:
            { Token t = new Token("iteracion_argumentos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 397: break;
          case 194:
            { Token t = new Token("operacion_atomica", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 398: break;
          case 195:
            { Token t = new Token("agrupacion_datos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 399: break;
          case 196:
            { Token t = new Token("agrupacion_tipos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 400: break;
          case 197:
            { Token t = new Token("verificacion_inclusion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 401: break;
          case 198:
            { Token t = new Token("almacenamiento_hilo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 402: break;
          case 199:
            { Token t = new Token("instancia_datos", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 403: break;
          case 200:
            { Token t = new Token("verificacion_compilacion", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 404: break;
          case 201:
            { Token t = new Token("instancia_tipo", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 405: break;
          case 202:
            { Token t = new Token("excepcion_argumento", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 406: break;
          case 203:
            { Token t = new Token("instancia_generada", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 407: break;
          case 204:
            { Token t = new Token("excepcion_estado", yytext()); 
    listaDeTokens.add(t);
    return t;
            }
          // fall through
          case 408: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

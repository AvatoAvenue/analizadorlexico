
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.codigo;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\251\000\002\002\004\000\002\003\004\000\002\064" +
    "\004\000\002\064\002\000\002\002\003\000\002\004\011" +
    "\000\002\054\003\000\002\054\002\000\002\073\003\000" +
    "\002\073\002\000\002\053\003\000\002\053\002\000\002" +
    "\005\004\000\002\051\004\000\002\051\002\000\002\137" +
    "\005\000\002\006\004\000\002\140\010\000\002\045\003" +
    "\000\002\045\002\000\002\047\004\000\002\047\002\000" +
    "\002\142\003\000\002\142\003\000\002\142\003\000\002" +
    "\142\003\000\002\142\003\000\002\007\013\000\002\135" +
    "\003\000\002\135\002\000\002\127\003\000\002\127\002" +
    "\000\002\130\003\000\002\130\003\000\002\130\003\000" +
    "\002\035\005\000\002\060\005\000\002\072\004\000\002" +
    "\065\004\000\002\065\002\000\002\110\003\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\110\003\000\002\061\005\000\002\114\003" +
    "\000\002\114\004\000\002\070\004\000\002\126\005\000" +
    "\002\126\002\000\002\107\004\000\002\010\005\000\002" +
    "\012\005\000\002\011\007\000\002\050\005\000\002\050" +
    "\005\000\002\041\004\000\002\076\005\000\002\076\002" +
    "\000\002\131\003\000\002\131\003\000\002\131\003\000" +
    "\002\131\003\000\002\056\005\000\002\013\004\000\002" +
    "\052\004\000\002\052\002\000\002\103\006\000\002\146" +
    "\004\000\002\077\005\000\002\077\002\000\002\143\004" +
    "\000\002\046\004\000\002\046\002\000\002\036\006\000" +
    "\002\024\011\000\002\040\004\000\002\040\002\000\002" +
    "\043\003\000\002\043\005\000\002\055\003\000\002\055" +
    "\002\000\002\044\004\000\002\106\005\000\002\106\002" +
    "\000\002\025\005\000\002\121\004\000\002\121\002\000" +
    "\002\144\007\000\002\026\006\000\002\145\005\000\002" +
    "\125\003\000\002\125\003\000\002\141\005\000\002\071" +
    "\004\000\002\101\005\000\002\101\005\000\002\101\002" +
    "\000\002\111\004\000\002\100\005\000\002\100\005\000" +
    "\002\100\002\000\002\136\003\000\002\136\003\000\002" +
    "\027\012\000\002\030\004\000\002\074\006\000\002\120" +
    "\006\000\002\031\004\000\002\147\003\000\002\147\002" +
    "\000\002\066\004\000\002\066\002\000\002\102\007\000" +
    "\002\075\004\000\002\075\002\000\002\032\006\000\002" +
    "\124\003\000\002\124\003\000\002\123\004\000\002\014" +
    "\005\000\002\117\003\000\002\117\002\000\002\057\004" +
    "\000\002\057\002\000\002\132\005\000\002\116\005\000" +
    "\002\134\004\000\002\062\005\000\002\063\004\000\002" +
    "\104\004\000\002\104\002\000\002\115\005\000\002\015" +
    "\006\000\002\016\006\000\002\017\011\000\002\133\005" +
    "\000\002\020\013\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\021\005\000\002" +
    "\112\003\000\002\112\004\000\002\122\003\000\002\122" +
    "\002\000\002\033\004\000\002\067\004\000\002\067\002" +
    "\000\002\113\004\000\002\034\004\000\002\022\007\000" +
    "\002\037\004\000\002\105\005\000\002\105\002\000\002" +
    "\023\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\004\004\005\001\002\000\006\002\ufffd\004" +
    "\ufffd\001\002\000\004\066\014\001\002\000\004\002\013" +
    "\001\002\000\006\002\ufffe\004\005\001\002\000\004\002" +
    "\000\001\002\000\006\002\ufffe\004\005\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002\000\004\055" +
    "\015\001\002\000\014\011\ufff8\050\017\051\ufff8\052\ufff8" +
    "\056\ufff8\001\002\000\012\011\ufff6\051\ufff6\052\032\056" +
    "\ufff6\001\002\000\004\066\025\001\002\000\012\011\ufff9" +
    "\051\ufff9\052\ufff9\056\ufff9\001\002\000\014\011\ufff3\050" +
    "\017\051\ufff3\052\ufff3\056\ufff3\001\002\000\012\011\ufff5" +
    "\051\ufff5\052\ufff5\056\ufff5\001\002\000\014\011\ufff3\050" +
    "\017\051\ufff3\052\ufff3\056\ufff3\001\002\000\012\011\ufff4" +
    "\051\ufff4\052\ufff4\056\ufff4\001\002\000\004\063\026\001" +
    "\002\000\014\011\ufff2\050\ufff2\051\ufff2\052\ufff2\056\ufff2" +
    "\001\002\000\010\011\ufff7\051\ufff7\056\ufff7\001\002\000" +
    "\010\011\uffee\051\110\056\ufffa\001\002\000\012\011\uffb3" +
    "\051\uffb3\052\032\056\uffb3\001\002\000\012\034\035\036" +
    "\033\037\037\040\034\001\002\000\010\053\uff6b\054\uff6b" +
    "\066\uff6b\001\002\000\010\053\uff68\054\uff68\066\uff68\001" +
    "\002\000\010\053\uff69\054\uff69\066\uff69\001\002\000\004" +
    "\066\041\001\002\000\010\053\uff6a\054\uff6a\066\uff6a\001" +
    "\002\000\006\062\100\063\uffaf\001\002\000\010\042\045" +
    "\062\uffac\063\uffac\001\002\000\004\063\043\001\002\000" +
    "\066\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\020\uffb2\021\uffb2\022\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\051\uffb2\052\uffb2\056\uffb2\066" +
    "\uffb2\001\002\000\006\062\uffae\063\uffae\001\002\000\012" +
    "\057\052\061\053\065\047\066\046\001\002\000\022\041" +
    "\uffb8\046\uffb8\056\uffb8\060\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\070\uffb8\001\002\000\022\041\uffba\046\uffba\056\uffba\060" +
    "\uffba\062\uffba\063\uffba\064\uffba\070\uffba\001\002\000\006" +
    "\062\uffad\063\uffad\001\002\000\022\041\uffb7\046\uffb7\056" +
    "\uffb7\060\uffb7\062\uffb7\063\uffb7\064\uffb7\070\uffb7\001\002" +
    "\000\006\061\060\066\054\001\002\000\022\041\uffb9\046" +
    "\uffb9\056\uffb9\060\uffb9\062\uffb9\063\uffb9\064\uffb9\070\uffb9" +
    "\001\002\000\014\060\uff8f\067\uff8f\070\uff8f\071\uff8f\072" +
    "\uff8f\001\002\000\014\060\uff90\067\uff90\070\uff90\071\073" +
    "\072\072\001\002\000\010\060\uff94\067\064\070\062\001" +
    "\002\000\004\060\061\001\002\000\014\060\uff8e\067\uff8e" +
    "\070\uff8e\071\uff8e\072\uff8e\001\002\000\022\041\uff98\046" +
    "\uff98\056\uff98\060\uff98\062\uff98\063\uff98\064\uff98\070\uff98" +
    "\001\002\000\006\061\060\066\054\001\002\000\004\060" +
    "\uff97\001\002\000\006\061\060\066\054\001\002\000\010" +
    "\060\uff94\067\064\070\062\001\002\000\010\060\uff95\067" +
    "\uff95\070\uff95\001\002\000\010\060\uff94\067\064\070\062" +
    "\001\002\000\010\060\uff96\067\uff96\070\uff96\001\002\000" +
    "\010\060\uff93\067\uff93\070\uff93\001\002\000\006\061\060" +
    "\066\054\001\002\000\006\061\060\066\054\001\002\000" +
    "\010\060\uff94\067\064\070\062\001\002\000\010\060\uff92" +
    "\067\uff92\070\uff92\001\002\000\010\060\uff94\067\064\070" +
    "\062\001\002\000\010\060\uff91\067\uff91\070\uff91\001\002" +
    "\000\004\066\041\001\002\000\004\063\uffb1\001\002\000" +
    "\006\062\100\063\uffaf\001\002\000\004\063\uffb0\001\002" +
    "\000\010\011\uffb5\051\uffb5\056\uffb5\001\002\000\012\011" +
    "\uffb3\051\uffb3\052\032\056\uffb3\001\002\000\010\011\uffb4" +
    "\051\uffb4\056\uffb4\001\002\000\004\056\u0144\001\002\000" +
    "\014\005\uffef\011\uffef\034\uffef\035\uffef\036\uffef\001\002" +
    "\000\004\056\ufffb\001\002\000\004\011\115\001\002\000" +
    "\010\011\uffee\051\110\056\ufffa\001\002\000\004\056\ufff1" +
    "\001\002\000\004\066\116\001\002\000\004\055\117\001" +
    "\002\000\026\005\uffee\006\123\007\122\010\121\034\uffee" +
    "\035\uffee\036\uffee\051\110\052\032\056\uffec\001\002\000" +
    "\026\005\uffea\006\uffea\007\uffea\010\uffea\034\uffea\035\uffea" +
    "\036\uffea\051\uffea\052\uffea\056\uffea\001\002\000\004\066" +
    "\u0142\001\002\000\004\066\u013e\001\002\000\004\066\u0139" +
    "\001\002\000\012\005\uffe2\034\136\035\137\036\135\001" +
    "\002\000\026\005\uffeb\006\uffeb\007\uffeb\010\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\051\uffeb\052\uffeb\056\uffeb\001\002\000" +
    "\026\005\uffe9\006\uffe9\007\uffe9\010\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\051\uffe9\052\uffe9\056\uffe9\001\002\000\026\005" +
    "\uffee\006\123\007\122\010\121\034\uffee\035\uffee\036\uffee" +
    "\051\110\052\032\056\uffec\001\002\000\026\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\034\uffe8\035\uffe8\036\uffe8\051\uffe8" +
    "\052\uffe8\056\uffe8\001\002\000\004\056\133\001\002\000" +
    "\026\005\uffe7\006\uffe7\007\uffe7\010\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\051\uffe7\052\uffe7\056\uffe7\001\002\000\010\011" +
    "\ufff0\051\ufff0\056\ufff0\001\002\000\004\056\uffed\001\002" +
    "\000\004\005\uffdf\001\002\000\004\005\uffe1\001\002\000" +
    "\004\005\uffe0\001\002\000\004\005\uffe3\001\002\000\004" +
    "\005\142\001\002\000\004\066\143\001\002\000\004\057" +
    "\146\001\002\000\004\055\uffc8\001\002\000\004\055\161" +
    "\001\002\000\014\034\035\036\033\037\037\040\034\060" +
    "\150\001\002\000\004\060\160\001\002\000\004\055\uffc7" +
    "\001\002\000\006\060\uffc4\062\154\001\002\000\004\066" +
    "\153\001\002\000\006\060\uffc3\062\uffc3\001\002\000\012" +
    "\034\035\036\033\037\037\040\034\001\002\000\004\060" +
    "\uffc6\001\002\000\006\060\uffc4\062\154\001\002\000\004" +
    "\060\uffc5\001\002\000\006\043\uffc9\055\uffc9\001\002\000" +
    "\044\007\122\012\206\013\164\014\201\015\165\020\214" +
    "\021\212\022\220\025\166\026\177\027\170\034\035\036" +
    "\033\037\037\040\034\052\032\066\207\001\002\000\052" +
    "\007\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\025\uffd4\026\uffd4\027\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\036\uffd4\037\uffd4\040\uffd4\052\uffd4\056\uffd4\066" +
    "\uffd4\001\002\000\052\007\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\020\uffcd\021\uffcd\022\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\052\uffcd\056\uffcd\066\uffcd\001\002\000\004\057\u0130\001" +
    "\002\000\004\057\u012d\001\002\000\004\057\u0124\001\002" +
    "\000\004\055\u010c\001\002\000\004\057\260\001\002\000" +
    "\052\007\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\025\uffd5\026\uffd5\027\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\052\uffd5\056\uffd5" +
    "\066\uffd5\001\002\000\052\007\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\020\uffcf\021\uffcf\022\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\052\uffcf\056\uffcf\066\uffcf\001\002\000\052\007\uffca" +
    "\012\uffca\013\uffca\014\uffca\015\uffca\020\uffca\021\uffca\022" +
    "\uffca\025\uffca\026\uffca\027\uffca\032\uffca\033\uffca\034\uffca" +
    "\036\uffca\037\uffca\040\uffca\052\uffca\056\uffca\066\uffca\001" +
    "\002\000\006\032\u0103\056\uffe4\001\002\000\052\007\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\052\uffd9\056\uffd9\066\uffd9\001" +
    "\002\000\052\007\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\020\uffce\021\uffce\022\uffce\025\uffce\026\uffce\027\uffce\032" +
    "\uffce\033\uffce\034\uffce\036\uffce\037\uffce\040\uffce\052\uffce" +
    "\056\uffce\066\uffce\001\002\000\004\057\u0100\001\002\000" +
    "\056\007\uff79\012\uff79\013\uff79\014\uff79\015\uff79\020\uff79" +
    "\021\uff79\022\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031" +
    "\366\032\uff79\033\uff79\034\uff79\036\uff79\037\uff79\040\uff79" +
    "\052\uff79\056\uff79\066\uff79\001\002\000\004\057\260\001" +
    "\002\000\052\007\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\025\uffd8\026\uffd8\027\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8\052\uffd8" +
    "\056\uffd8\066\uffd8\001\002\000\052\007\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\020\uffcc\021\uffcc\022\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\052\uffcc\056\uffcc\066\uffcc\001\002\000\006" +
    "\042\357\063\uff9e\001\002\000\052\007\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\020\uffd6\021\uffd6\022\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\052\uffd6\056\uffd6\066\uffd6\001\002\000\004" +
    "\053\353\001\002\000\004\042\330\001\002\000\052\007" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\025\uffcb\026\uffcb\027\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\052\uffcb\056\uffcb\066\uffcb" +
    "\001\002\000\052\007\122\012\206\013\164\014\201\015" +
    "\165\020\214\021\212\022\220\025\166\026\177\027\170" +
    "\032\uffda\033\uffda\034\035\036\033\037\037\040\034\052" +
    "\032\056\uffda\066\207\001\002\000\004\055\274\001\002" +
    "\000\052\007\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\025\uffd7\026\uffd7\027\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\052\uffd7\056" +
    "\uffd7\066\uffd7\001\002\000\004\057\277\001\002\000\052" +
    "\007\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\025\uffd3\026\uffd3\027\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\036\uffd3\037\uffd3\040\uffd3\052\uffd3\056\uffd3\066" +
    "\uffd3\001\002\000\052\007\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\020\uffd2\021\uffd2\022\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\052\uffd2\056\uffd2\066\uffd2\001\002\000\052\007\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\032\uffd0\033\uffd0\034\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\052\uffd0\056\uffd0\066\uffd0\001\002" +
    "\000\004\057\260\001\002\000\052\007\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\020\uffd1\021\uffd1\022\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\052\uffd1\056\uffd1\066\uffd1\001\002\000\004" +
    "\053\223\001\002\000\006\054\uffa4\061\226\001\002\000" +
    "\004\054\uffa5\001\002\000\004\054\233\001\002\000\006" +
    "\054\uffa1\062\227\001\002\000\004\061\231\001\002\000" +
    "\004\054\uffa3\001\002\000\006\054\uffa1\062\227\001\002" +
    "\000\004\054\uffa2\001\002\000\004\066\234\001\002\000" +
    "\006\042\236\063\uffa8\001\002\000\004\063\256\001\002" +
    "\000\006\053\237\055\242\001\002\000\006\053\237\055" +
    "\242\001\002\000\010\054\uffa7\062\uffa7\063\uffa7\001\002" +
    "\000\006\062\252\063\uffa9\001\002\000\012\057\052\061" +
    "\053\065\047\066\046\001\002\000\006\056\uffbb\062\246" +
    "\001\002\000\004\056\245\001\002\000\010\054\uffbe\062" +
    "\uffbe\063\uffbe\001\002\000\012\057\052\061\053\065\047" +
    "\066\046\001\002\000\004\056\uffbd\001\002\000\006\056" +
    "\uffbb\062\246\001\002\000\004\056\uffbc\001\002\000\006" +
    "\053\237\055\242\001\002\000\010\054\uffa6\062\uffa6\063" +
    "\uffa6\001\002\000\006\054\255\062\252\001\002\000\010" +
    "\054\uffbf\062\uffbf\063\uffbf\001\002\000\052\007\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\032\uffaa\033\uffaa\034\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\052\uffaa\056\uffaa\066\uffaa\001\002" +
    "\000\004\064\272\001\002\000\012\057\052\061\053\065" +
    "\047\066\046\001\002\000\004\041\270\001\002\000\006" +
    "\046\265\060\uff72\001\002\000\004\060\264\001\002\000" +
    "\010\045\uff75\055\uff75\064\uff75\001\002\000\006\046\265" +
    "\060\uff72\001\002\000\004\060\uff74\001\002\000\004\060" +
    "\uff73\001\002\000\012\057\052\061\053\065\047\066\046" +
    "\001\002\000\006\046\uff71\060\uff71\001\002\000\004\055" +
    "\274\001\002\000\052\007\uff6f\012\uff6f\013\uff6f\014\uff6f" +
    "\015\uff6f\020\uff6f\021\uff6f\022\uff6f\025\uff6f\026\uff6f\027" +
    "\uff6f\032\uff6f\033\uff6f\034\uff6f\036\uff6f\037\uff6f\040\uff6f" +
    "\052\uff6f\056\uff6f\066\uff6f\001\002\000\044\007\122\012" +
    "\206\013\164\014\201\015\165\020\214\021\212\022\220" +
    "\025\166\026\177\027\170\034\035\036\033\037\037\040" +
    "\034\052\032\066\207\001\002\000\004\056\276\001\002" +
    "\000\064\007\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\052\uffdd\056\uffdd\063\uffdd\066\uffdd" +
    "\001\002\000\012\034\035\036\033\037\037\040\034\001" +
    "\002\000\004\066\301\001\002\000\004\047\302\001\002" +
    "\000\004\066\303\001\002\000\004\060\304\001\002\000" +
    "\004\064\305\001\002\000\004\055\274\001\002\000\052" +
    "\007\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\020\uff6c\021" +
    "\uff6c\022\uff6c\025\uff6c\026\uff6c\027\uff6c\032\uff6c\033\uff6c" +
    "\034\uff6c\036\uff6c\037\uff6c\040\uff6c\052\uff6c\056\uff6c\066" +
    "\uff6c\001\002\000\006\023\313\024\312\001\002\000\052" +
    "\007\uff66\012\uff66\013\uff66\014\uff66\015\uff66\020\uff66\021" +
    "\uff66\022\uff66\025\uff66\026\uff66\027\uff66\032\uff66\033\uff66" +
    "\034\uff66\036\uff66\037\uff66\040\uff66\052\uff66\056\uff66\066" +
    "\uff66\001\002\000\052\007\uff67\012\uff67\013\uff67\014\uff67" +
    "\015\uff67\020\uff67\021\uff67\022\uff67\025\uff67\026\uff67\027" +
    "\uff67\032\uff67\033\uff67\034\uff67\036\uff67\037\uff67\040\uff67" +
    "\052\uff67\056\uff67\066\uff67\001\002\000\004\055\274\001" +
    "\002\000\004\055\274\001\002\000\054\007\uff63\012\uff63" +
    "\013\uff63\014\uff63\015\uff63\020\uff63\021\uff63\022\uff63\024" +
    "\312\025\uff63\026\uff63\027\uff63\032\uff63\033\uff63\034\uff63" +
    "\036\uff63\037\uff63\040\uff63\052\uff63\056\uff63\066\uff63\001" +
    "\002\000\056\007\uff60\012\uff60\013\uff60\014\uff60\015\uff60" +
    "\020\uff60\021\uff60\022\uff60\023\313\024\uff60\025\uff60\026" +
    "\uff60\027\uff60\032\uff60\033\uff60\034\uff60\036\uff60\037\uff60" +
    "\040\uff60\052\uff60\056\uff60\066\uff60\001\002\000\054\007" +
    "\uff62\012\uff62\013\uff62\014\uff62\015\uff62\020\uff62\021\uff62" +
    "\022\uff62\024\uff62\025\uff62\026\uff62\027\uff62\032\uff62\033" +
    "\uff62\034\uff62\036\uff62\037\uff62\040\uff62\052\uff62\056\uff62" +
    "\066\uff62\001\002\000\056\007\uff60\012\uff60\013\uff60\014" +
    "\uff60\015\uff60\020\uff60\021\uff60\022\uff60\023\313\024\uff60" +
    "\025\uff60\026\uff60\027\uff60\032\uff60\033\uff60\034\uff60\036" +
    "\uff60\037\uff60\040\uff60\052\uff60\056\uff60\066\uff60\001\002" +
    "\000\054\007\uff61\012\uff61\013\uff61\014\uff61\015\uff61\020" +
    "\uff61\021\uff61\022\uff61\024\uff61\025\uff61\026\uff61\027\uff61" +
    "\032\uff61\033\uff61\034\uff61\036\uff61\037\uff61\040\uff61\052" +
    "\uff61\056\uff61\066\uff61\001\002\000\052\007\uff64\012\uff64" +
    "\013\uff64\014\uff64\015\uff64\020\uff64\021\uff64\022\uff64\025" +
    "\uff64\026\uff64\027\uff64\032\uff64\033\uff64\034\uff64\036\uff64" +
    "\037\uff64\040\uff64\052\uff64\056\uff64\066\uff64\001\002\000" +
    "\052\007\uff65\012\uff65\013\uff65\014\uff65\015\uff65\020\uff65" +
    "\021\uff65\022\uff65\025\uff65\026\uff65\027\uff65\032\uff65\033" +
    "\uff65\034\uff65\036\uff65\037\uff65\040\uff65\052\uff65\056\uff65" +
    "\066\uff65\001\002\000\056\007\uff5f\012\uff5f\013\uff5f\014" +
    "\uff5f\015\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f" +
    "\025\uff5f\026\uff5f\027\uff5f\032\uff5f\033\uff5f\034\uff5f\036" +
    "\uff5f\037\uff5f\040\uff5f\052\uff5f\056\uff5f\066\uff5f\001\002" +
    "\000\052\007\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e\020" +
    "\uff5e\021\uff5e\022\uff5e\025\uff5e\026\uff5e\027\uff5e\032\uff5e" +
    "\033\uff5e\034\uff5e\036\uff5e\037\uff5e\040\uff5e\052\uff5e\056" +
    "\uff5e\066\uff5e\001\002\000\010\032\uffdc\033\uffdc\056\uffdc" +
    "\001\002\000\052\007\122\012\206\013\164\014\201\015" +
    "\165\020\214\021\212\022\220\025\166\026\177\027\170" +
    "\032\uffda\033\uffda\034\035\036\033\037\037\040\034\052" +
    "\032\056\uffda\066\207\001\002\000\010\032\uffdb\033\uffdb" +
    "\056\uffdb\001\002\000\012\057\332\061\053\065\047\066" +
    "\046\001\002\000\004\043\347\001\002\000\022\034\035" +
    "\036\033\037\037\040\034\057\052\061\345\065\047\066" +
    "\346\001\002\000\004\063\344\001\002\000\004\063\343" +
    "\001\002\000\004\045\336\001\002\000\012\057\052\061" +
    "\053\065\047\066\046\001\002\000\004\064\340\001\002" +
    "\000\012\057\052\061\053\065\047\066\046\001\002\000" +
    "\004\063\342\001\002\000\052\007\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\015\uff8d\020\uff8d\021\uff8d\022\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\032\uff8d\033\uff8d\034\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\052\uff8d\056\uff8d\066\uff8d\001\002\000\052\007" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\025\uff9c\026\uff9c\027\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\052\uff9c\056\uff9c\066\uff9c" +
    "\001\002\000\052\007\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\020\uffab\021\uffab\022\uffab\025\uffab\026\uffab\027\uffab" +
    "\032\uffab\033\uffab\034\uffab\036\uffab\037\uffab\040\uffab\052" +
    "\uffab\056\uffab\066\uffab\001\002\000\016\041\uffb9\060\uff8e" +
    "\067\uff8e\070\uff8e\071\uff8e\072\uff8e\001\002\000\016\041" +
    "\uffb8\060\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\001\002" +
    "\000\006\055\274\057\052\001\002\000\004\063\uff9a\001" +
    "\002\000\004\063\uff99\001\002\000\004\063\uff9b\001\002" +
    "\000\012\034\035\036\033\037\037\040\034\001\002\000" +
    "\004\054\355\001\002\000\004\066\356\001\002\000\006" +
    "\042\uff9d\063\uff9d\001\002\000\006\053\237\055\242\001" +
    "\002\000\004\063\361\001\002\000\052\007\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\020\uffa0\021\uffa0\022\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\032\uffa0\033\uffa0\034\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\052\uffa0\056\uffa0\066\uffa0\001\002\000" +
    "\004\063\uff9f\001\002\000\004\064\364\001\002\000\004" +
    "\055\274\001\002\000\052\007\uff70\012\uff70\013\uff70\014" +
    "\uff70\015\uff70\020\uff70\021\uff70\022\uff70\025\uff70\026\uff70" +
    "\027\uff70\032\uff70\033\uff70\034\uff70\036\uff70\037\uff70\040" +
    "\uff70\052\uff70\056\uff70\066\uff70\001\002\000\004\057\260" +
    "\001\002\000\054\007\uff7b\012\uff7b\013\uff7b\014\uff7b\015" +
    "\uff7b\020\uff7b\021\uff7b\022\uff7b\025\uff7b\026\uff7b\027\uff7b" +
    "\030\374\032\uff7b\033\uff7b\034\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\052\uff7b\056\uff7b\066\uff7b\001\002\000\056\007\uff79" +
    "\012\uff79\013\uff79\014\uff79\015\uff79\020\uff79\021\uff79\022" +
    "\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\366\032\uff79" +
    "\033\uff79\034\uff79\036\uff79\037\uff79\040\uff79\052\uff79\056" +
    "\uff79\066\uff79\001\002\000\054\007\uff7a\012\uff7a\013\uff7a" +
    "\014\uff7a\015\uff7a\020\uff7a\021\uff7a\022\uff7a\025\uff7a\026" +
    "\uff7a\027\uff7a\030\uff7a\032\uff7a\033\uff7a\034\uff7a\036\uff7a" +
    "\037\uff7a\040\uff7a\052\uff7a\056\uff7a\066\uff7a\001\002\000" +
    "\052\007\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\020\uff7c" +
    "\021\uff7c\022\uff7c\025\uff7c\026\uff7c\027\uff7c\032\uff7c\033" +
    "\uff7c\034\uff7c\036\uff7c\037\uff7c\040\uff7c\052\uff7c\056\uff7c" +
    "\066\uff7c\001\002\000\052\007\uff7d\012\uff7d\013\uff7d\014" +
    "\uff7d\015\uff7d\020\uff7d\021\uff7d\022\uff7d\025\uff7d\026\uff7d" +
    "\027\uff7d\032\uff7d\033\uff7d\034\uff7d\036\uff7d\037\uff7d\040" +
    "\uff7d\052\uff7d\056\uff7d\066\uff7d\001\002\000\004\055\274" +
    "\001\002\000\052\007\uff76\012\uff76\013\uff76\014\uff76\015" +
    "\uff76\020\uff76\021\uff76\022\uff76\025\uff76\026\uff76\027\uff76" +
    "\032\uff76\033\uff76\034\uff76\036\uff76\037\uff76\040\uff76\052" +
    "\uff76\056\uff76\066\uff76\001\002\000\004\055\274\001\002" +
    "\000\056\007\uff77\012\uff77\013\uff77\014\uff77\015\uff77\020" +
    "\uff77\021\uff77\022\uff77\025\uff77\026\uff77\027\uff77\030\uff77" +
    "\031\uff77\032\uff77\033\uff77\034\uff77\036\uff77\037\uff77\040" +
    "\uff77\052\uff77\056\uff77\066\uff77\001\002\000\004\060\u0101" +
    "\001\002\000\004\063\u0102\001\002\000\052\007\uff59\012" +
    "\uff59\013\uff59\014\uff59\015\uff59\020\uff59\021\uff59\022\uff59" +
    "\025\uff59\026\uff59\027\uff59\032\uff59\033\uff59\034\uff59\036" +
    "\uff59\037\uff59\040\uff59\052\uff59\056\uff59\066\uff59\001\002" +
    "\000\012\057\052\061\053\065\047\066\046\001\002\000" +
    "\004\056\u0106\001\002\000\004\056\uffe5\001\002\000\026" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\051\uffe6\052\uffe6\056\uffe6\001\002\000\004\063\u0108" +
    "\001\002\000\010\016\uffde\017\uffde\056\uffde\001\002\000" +
    "\004\055\274\001\002\000\056\007\uff78\012\uff78\013\uff78" +
    "\014\uff78\015\uff78\020\uff78\021\uff78\022\uff78\025\uff78\026" +
    "\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78" +
    "\036\uff78\037\uff78\040\uff78\052\uff78\056\uff78\066\uff78\001" +
    "\002\000\052\007\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c" +
    "\020\uff8c\021\uff8c\022\uff8c\025\uff8c\026\uff8c\027\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\036\uff8c\037\uff8c\040\uff8c\052\uff8c" +
    "\056\uff8c\066\uff8c\001\002\000\010\016\u0110\017\uff87\056" +
    "\uff87\001\002\000\006\017\uff88\056\uff88\001\002\000\010" +
    "\016\u0110\017\uff85\056\uff85\001\002\000\006\017\u011b\056" +
    "\uff82\001\002\000\012\057\052\061\053\065\047\066\046" +
    "\001\002\000\004\064\u0112\001\002\000\044\007\122\012" +
    "\206\013\164\014\201\015\165\020\214\021\212\022\220" +
    "\025\166\026\177\027\170\034\035\036\033\037\037\040" +
    "\034\052\032\066\207\001\002\000\006\032\u0103\033\u0116" +
    "\001\002\000\010\016\uff7f\017\uff7f\056\uff7f\001\002\000" +
    "\010\016\uff84\017\uff84\056\uff84\001\002\000\004\063\u0118" +
    "\001\002\000\010\016\uff80\017\uff80\056\uff80\001\002\000" +
    "\010\016\uff7e\017\uff7e\056\uff7e\001\002\000\004\056\u0120" +
    "\001\002\000\006\017\u011b\056\uff82\001\002\000\004\064" +
    "\u011c\001\002\000\044\007\122\012\206\013\164\014\201" +
    "\015\165\020\214\021\212\022\220\025\166\026\177\027" +
    "\170\034\035\036\033\037\037\040\034\052\032\066\207" +
    "\001\002\000\006\032\u0103\033\u0116\001\002\000\006\017" +
    "\uff81\056\uff81\001\002\000\004\056\uff83\001\002\000\052" +
    "\007\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\025\uff8b\026\uff8b\027\uff8b\032\uff8b\033\uff8b" +
    "\034\uff8b\036\uff8b\037\uff8b\040\uff8b\052\uff8b\056\uff8b\066" +
    "\uff8b\001\002\000\010\016\u0110\017\uff85\056\uff85\001\002" +
    "\000\006\017\uff89\056\uff89\001\002\000\006\017\uff86\056" +
    "\uff86\001\002\000\012\057\052\061\053\065\047\066\046" +
    "\001\002\000\004\060\u012b\001\002\000\006\060\uff5a\070" +
    "\u0127\001\002\000\012\057\052\061\053\065\047\066\046" +
    "\001\002\000\004\060\uff5c\001\002\000\006\060\uff5a\070" +
    "\u0127\001\002\000\004\060\uff5b\001\002\000\004\063\u012c" +
    "\001\002\000\052\007\uff5d\012\uff5d\013\uff5d\014\uff5d\015" +
    "\uff5d\020\uff5d\021\uff5d\022\uff5d\025\uff5d\026\uff5d\027\uff5d" +
    "\032\uff5d\033\uff5d\034\uff5d\036\uff5d\037\uff5d\040\uff5d\052" +
    "\uff5d\056\uff5d\066\uff5d\001\002\000\012\057\052\061\053" +
    "\065\047\066\046\001\002\000\004\060\u012f\001\002\000" +
    "\004\055\uff8a\001\002\000\004\052\032\001\002\000\004" +
    "\066\u0132\001\002\000\004\044\u0137\001\002\000\012\057" +
    "\052\061\053\065\047\066\046\001\002\000\004\060\u0135" +
    "\001\002\000\004\055\274\001\002\000\052\007\uff6e\012" +
    "\uff6e\013\uff6e\014\uff6e\015\uff6e\020\uff6e\021\uff6e\022\uff6e" +
    "\025\uff6e\026\uff6e\027\uff6e\032\uff6e\033\uff6e\034\uff6e\036" +
    "\uff6e\037\uff6e\040\uff6e\052\uff6e\056\uff6e\066\uff6e\001\002" +
    "\000\004\063\u0138\001\002\000\012\057\uff6d\061\uff6d\065" +
    "\uff6d\066\uff6d\001\002\000\004\055\u013b\001\002\000\026" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\051\uffc2\052\uffc2\056\uffc2\001\002\000\004\052\032" +
    "\001\002\000\004\056\u013d\001\002\000\026\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\034\uffb6\035\uffb6\036\uffb6\051\uffb6" +
    "\052\uffb6\056\uffb6\001\002\000\004\042\u013f\001\002\000" +
    "\006\053\237\055\242\001\002\000\004\063\u0141\001\002" +
    "\000\064\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\020\uffc0\021\uffc0\022\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\051\uffc0\052\uffc0\056\uffc0\066\uffc0" +
    "\001\002\000\004\055\u013b\001\002\000\026\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\034\uffc1\035\uffc1\036\uffc1\051\uffc1" +
    "\052\uffc1\056\uffc1\001\002\000\006\002\ufffc\004\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\010\002\006\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\010\004\003\064\007\001\001\000\002\001\001\000" +
    "\010\002\010\004\003\064\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\017\073" +
    "\015\137\020\001\001\000\010\013\026\053\027\103\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\021\137\022\001\001\000\002\001\001\000\006\051\023" +
    "\137\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\110\045\111" +
    "\054\106\140\112\001\001\000\006\052\103\103\104\001" +
    "\001\000\004\042\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\143\037\146\041\001" +
    "\001\000\002\001\001\000\004\077\100\001\001\000\004" +
    "\046\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\131\047\141\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\071\056\111\055\136\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\070\001\001\000" +
    "\004\101\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\111\066\136\054\001\001\000" +
    "\002\001\001\000\006\111\064\136\054\001\001\000\004" +
    "\101\065\001\001\000\002\001\001\000\004\101\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\111\075" +
    "\136\054\001\001\000\006\111\073\136\054\001\001\000" +
    "\004\101\074\001\001\000\002\001\001\000\004\101\076" +
    "\001\001\000\002\001\001\000\004\143\101\001\001\000" +
    "\002\001\001\000\004\077\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\105\103\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\110\045\111\054" +
    "\113\140\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\125\010\127\011\117\012" +
    "\131\045\123\047\130\103\124\142\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\127\140\130\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\125\010\127\011\117\012" +
    "\131\045\123\047\133\103\124\142\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\061\143\114\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\151\070\146\107" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\126\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\151\107\155\001\001\000\002\001\001\000\004" +
    "\126\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\011\172\014\174\015\201\016\212\017\204\020\170" +
    "\021\161\022\214\023\215\024\216\025\171\026\175\027" +
    "\162\030\207\036\202\042\221\072\173\103\220\110\210" +
    "\120\166\132\177\144\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\u010a\001\001\000\004\062\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\u0104\135\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\057\366\116\367" +
    "\001\001\000\004\062\362\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\011\172\014\174\015\201\016\212\017\204\020\170" +
    "\021\161\022\214\023\215\024\216\025\171\026\175\027" +
    "\162\030\207\036\202\042\221\065\324\103\220\110\325" +
    "\120\166\132\177\144\203\001\001\000\004\060\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\223" +
    "\055\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\234\001\001\000\002\001\001\000\006" +
    "\043\240\050\237\001\001\000\006\043\253\050\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\041\243" +
    "\131\242\141\050\001\001\000\004\076\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\131\247\141\050" +
    "\001\001\000\002\001\001\000\004\076\250\001\001\000" +
    "\002\001\001\000\004\050\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\063\262\115\261\131\260\141\050" +
    "\001\001\000\002\001\001\000\004\104\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\131\270\141" +
    "\050\001\001\000\002\001\001\000\004\060\272\001\001" +
    "\000\002\001\001\000\056\011\172\014\174\015\201\016" +
    "\212\017\204\020\170\021\161\022\214\023\215\024\216" +
    "\025\171\026\175\027\162\030\207\036\202\042\221\072" +
    "\274\103\220\110\210\120\166\132\177\144\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\305\001" +
    "\001\000\002\001\001\000\012\033\313\034\307\112\310" +
    "\113\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\323\001\001\000\004\060\322\001\001\000\006" +
    "\034\320\122\321\001\001\000\006\067\315\113\316\001" +
    "\001\000\002\001\001\000\006\067\317\113\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\011\172\014\174\015\201\016\212\017\204\020\170\021" +
    "\161\022\214\023\215\024\216\025\171\026\175\027\162" +
    "\030\207\036\202\042\221\065\326\103\220\110\325\120" +
    "\166\132\177\144\203\001\001\000\002\001\001\000\014" +
    "\061\330\062\334\131\332\141\050\145\333\001\001\000" +
    "\002\001\001\000\026\042\151\063\262\070\146\071\056" +
    "\107\150\111\055\115\261\131\260\136\054\141\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\131\336\141\050\001\001\000\002\001\001\000" +
    "\006\131\340\141\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\060\347\125\351\141\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\353\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\364\001\001\000\002\001\001\000" +
    "\004\062\375\001\001\000\006\117\372\134\371\001\001" +
    "\000\006\057\370\116\367\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\374\001\001" +
    "\000\002\001\001\000\004\060\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\131\u0106\141\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\u010c\102\u010d\147\u010e\001\001" +
    "\000\002\001\001\000\006\066\u0121\102\u0120\001\001\000" +
    "\006\032\u0119\075\u0118\001\001\000\006\131\u0110\141\050" +
    "\001\001\000\002\001\001\000\056\011\172\014\174\015" +
    "\201\016\212\017\204\020\170\021\161\022\214\023\215" +
    "\024\216\025\171\026\175\027\162\030\207\036\202\042" +
    "\221\072\u0112\103\220\110\210\120\166\132\177\144\203" +
    "\001\001\000\010\035\u0116\123\u0113\124\u0114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\u0119\075\u011e\001\001\000\002\001\001\000\056\011\172" +
    "\014\174\015\201\016\212\017\204\020\170\021\161\022" +
    "\214\023\215\024\216\025\171\026\175\027\162\030\207" +
    "\036\202\042\221\072\u011c\103\220\110\210\120\166\132" +
    "\177\144\203\001\001\000\010\035\u0116\123\u0113\124\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\066\u0122\102\u0120\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\u0124\131\u0125\141\050\001" +
    "\001\000\002\001\001\000\004\105\u0127\001\001\000\006" +
    "\131\u0128\141\050\001\001\000\002\001\001\000\004\105" +
    "\u0129\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\131\u012d\141\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\u0130\001\001\000\004" +
    "\133\u0132\001\001\000\002\001\001\000\012\063\u0133\115" +
    "\261\131\260\141\050\001\001\000\002\001\001\000\004" +
    "\060\u0135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\u0139\001\001\000\002\001\001" +
    "\000\006\013\u013b\103\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u013f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u0142\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Lexer lexer;
    private boolean sintaxisCorrecta = true;

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public void syntax_error(Symbol s) {
        sintaxisCorrecta = false;
        String errorMsg = "Error de sintaxis en línea " + (s.left) +
                          ", columna " + (s.right) +
                          ". No se esperaba este componente: '" + s.value + "'";
        System.err.println(errorMsg);
    }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.sym == sym.EOF) {
                System.err.println("Error inesperado al final del archivo");
            } 
        }
    }

    public boolean parseCode() {
        try {
            super.parse();
            if (sintaxisCorrecta) {
                System.out.println("Compilación exitosa");
                return true;
            } else {
                System.out.println("Se encontró un error de sintaxis.");
                return false;
            }
        } catch (Exception e) {
            return false;
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicios EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicios ::= inicio iniciosopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // iniciosopcional ::= inicio iniciosopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iniciosopcional",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // iniciosopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iniciosopcional",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // espacio ::= AGRUPACIONPRINCIPAL ID LLAVEABIERTA libreriaopcional declaracionesopcional clasesopcional LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacio",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // clasesopcional ::= clases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // clasesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // libreriaopcional ::= librerias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriaopcional",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // libreriaopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriaopcional",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionesopcional ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // librerias ::= libreria libreriasopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // libreriasopcional ::= libreria libreriasopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // libreriasopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // libreria ::= GESTIONRECURSOS ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // clases ::= clase clasesopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clase ::= modificadoresacceso AGRUPACIONSECUNDARIA ID LLAVEABIERTA miembrosclase LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // modificadoresacceso ::= MODIFICADORACCESO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // modificadoresacceso ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // miembrosclase ::= miembroclase miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // miembrosclase ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // miembroclase ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembroclase",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // miembroclase ::= enums 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembroclase",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // miembroclase ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembroclase",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // miembroclase ::= estructuras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembroclase",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // miembroclase ::= interfaces 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembroclase",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funciones ::= modificadoresacceso tipofuncionopcional DECLARACIONFUNCION ID bloqueparametrosopcional LLAVEABIERTA expresiones retornoopcional LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // retornoopcional ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoopcional",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // retornoopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoopcional",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipofuncionopcional ::= tipofuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncionopcional",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipofuncionopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncionopcional",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipofuncion ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipofuncion ::= TIPOLOGICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipofuncion ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // retornos ::= RETORNAR valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornos",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloqueexpresiones ::= LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueexpresiones",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresiones ::= expresion expresionesopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresionesopcional ::= expresion expresionesopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionesopcional",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionesopcional",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= sis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= mientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= mientrashacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= porpuro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= porcadas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= intentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= impresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= escaneos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= declaracionarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= declaracionlistas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= lambdas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= ternarios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= asignars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= selectors 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= enums 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloqueparametros ::= PARENTESISABIERTO parametros PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueparametros",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloqueparametrosopcional ::= bloqueparametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueparametrosopcional",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloqueparametrosopcional ::= PARENTESISABIERTO PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueparametrosopcional",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros ::= parametro parametrolista 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametrolista ::= COMA parametro parametrolista 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametrolista ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametro ::= tipos ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estructuras ::= AGRUPACIONESTRUCTURA ID bloquedeclaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // interfaces ::= AGRUPACIONINTERFAZ ID bloquedeclaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interfaces",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // enums ::= AGRUPACIONENUMERATOR ID OPERADORASIGNAMIENTO bloquevalores PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enums",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloquevalores ::= CORCHETEABIERTO listabloques CORCHETECERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloquevalores ::= LLAVEABIERTA valores LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valores ::= valor valoresopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valoresopcional ::= COMA valor valoresopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresopcional",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valoresopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresopcional",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor ::= bloqueoperaritmetics 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bloquedeclaraciones ::= LLAVEABIERTA declaraciones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquedeclaraciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaraciones ::= declaracion declaracionopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracionopcional ::= declaracion declaracionopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionopcional",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracionopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionopcional",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion ::= DEC tipos listadeclarar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // listadeclarar ::= declarador listadeclararopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclarar",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // listadeclararopcional ::= COMA declarador listadeclararopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclararopcional",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listadeclararopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclararopcional",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declarador ::= ID declaradoropcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarador",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaradoropcional ::= OPERADORASIGNAMIENTO valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaradoropcional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaradoropcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaradoropcional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignars ::= ID OPERADORASIGNAMIENTO valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignars",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaracionarreglos ::= tipos CORCHETEABIERTO dimensionesopcional CORCHETECERRADO ID asignamientovariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionarreglos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignamientovariables ::= OPERADORASIGNAMIENTO listabloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // asignamientovariables ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // listabloques ::= bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // listabloques ::= listabloques COMA bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dimensionesopcional ::= dimensiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dimensionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dimensiones ::= NUMERICO dimensionopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dimensionopcional ::= COMA NUMERICO dimensionopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionopcional",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dimensionopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionopcional",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaracionlistas ::= cuerpolista declaracionlista PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlistas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracionlista ::= OPERADORASIGNAMIENTO bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlista",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaracionlista ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlista",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpolista ::= LISTA CORCHETEABIERTO tipos CORCHETECERRADO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolista",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lambdas ::= ID OPERADORASIGNAMIENTO lambda PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdas",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lambda ::= bloqueparametros OPERADORRESULTADO cuerpolambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambda",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpolambda ::= bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpolambda ::= bloqueoperaritmetics 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bloqueoperaritmetics ::= PARENTESISABIERTO operaritmetics PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueoperaritmetics",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operaritmetics ::= operaritmetic operaritmeticsopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operaritmeticsopcional ::= MAS operaritmetic operaritmeticsopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmeticsopcional",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operaritmeticsopcional ::= MENOS operaritmetic operaritmeticsopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmeticsopcional",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operaritmeticsopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmeticsopcional",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operaritmetic ::= idnum operaritmeticopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operaritmeticopcional ::= MULTI operaritmetic operaritmeticsopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmeticopcional",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operaritmeticopcional ::= DIV operaritmetic operaritmeticsopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmeticopcional",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operaritmeticopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmeticopcional",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // idnum ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // idnum ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ternarios ::= ID OPERADORASIGNAMIENTO bloquecondiciones OPERADORTERNARIO valor PUNTODOBLE valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ternarios",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // selectors ::= selector selectoropcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // selectoropcional ::= LLAVEABIERTA casoopcional defectosopcional LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectoropcional",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // selector ::= SELECTOR PARENTESISABIERTO valor PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // casos ::= caso casosopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // casoopcional ::= casos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casoopcional",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // casoopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casoopcional",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // casosopcional ::= caso casosopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosopcional",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // casosopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casosopcional",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // caso ::= CASO valor PUNTODOBLE expresiones retornoalto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // defectosopcional ::= defectos defectosopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defectosopcional",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // defectosopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defectosopcional",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // defectos ::= DEFECTO PUNTODOBLE expresiones retornoalto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defectos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // retornoalto ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // retornoalto ::= alto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // alto ::= PARAR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alto",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sis ::= si sinoshacer sinos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sis",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sinos ::= sino 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sinos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sinoshacer ::= sinohacer sinoshacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sinoshacer ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // si ::= SI bloquecondiciones bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sinohacer ::= SINOHACER bloquecondiciones bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinohacer",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sino ::= SINO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // bloquecondiciones ::= PARENTESISABIERTO condiciones PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquecondiciones",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // condiciones ::= condicion condicionopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // condicionopcional ::= OPERADORCONLOGICO condicionopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionopcional",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // condicionopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicionopcional",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // condicion ::= valor OPERADORRELACIONAL valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // mientras ::= MIENTRAS bloquecondiciones PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientras",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // mientrashacer ::= HACER bloquecondiciones PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientrashacer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // porpuro ::= POR PARENTESISABIERTO declaracion aumentodecremento condiciones PARENTESISCERRADO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porpuro",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // aumentodecremento ::= ID OPERADORDESPLAZAMIENTO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentodecremento",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // porcadas ::= PORCADA PARENTESISABIERTO tipos ID PARAMETROENTRADA ID PARENTESISCERRADO PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porcadas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tipos ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tipos ::= TIPOINFERIDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tipos ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tipos ::= TIPOCARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // intentos ::= INTENTAR bloqueexpresiones atraparterminar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intentos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // atraparterminar ::= terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // atraparterminar ::= atrapars terminarsopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // terminarsopcional ::= terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("terminarsopcional",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // terminarsopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("terminarsopcional",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // atrapars ::= atrapar atraparsopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // atraparsopcional ::= atrapar atraparsopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparsopcional",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // atraparsopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparsopcional",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // atrapar ::= ATRAPAR bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapar",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // terminars ::= TERMINAR bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("terminars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // impresiones ::= IMPRIMIR PARENTESISABIERTO oraciones PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // oraciones ::= valor oracionesopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // oracionesopcional ::= MAS valor oracionesopcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oracionesopcional",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // oracionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oracionesopcional",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // escaneos ::= ESCANEAR PARENTESISABIERTO PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

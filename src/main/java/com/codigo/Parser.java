
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.codigo;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\002\003\000\002\056\005\000\002\064\004" +
    "\000\002\064\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\060\005\000\002\061\005\000\002" +
    "\061\003\000\002\074\005\000\002\057\005\000\002\062" +
    "\003\000\002\062\002\000\002\104\003\000\002\104\005" +
    "\000\002\067\004\000\002\047\005\000\002\047\005\000" +
    "\002\041\003\000\002\041\005\000\002\107\003\000\002" +
    "\107\003\000\002\107\003\000\002\107\003\000\002\004" +
    "\011\000\002\052\003\000\002\052\002\000\002\050\003" +
    "\000\002\050\002\000\002\051\003\000\002\051\002\000" +
    "\002\005\004\000\002\005\003\000\002\115\005\000\002" +
    "\006\004\000\002\006\003\000\002\116\010\000\002\045" +
    "\003\000\002\045\002\000\002\046\004\000\002\046\002" +
    "\000\002\120\003\000\002\120\003\000\002\120\003\000" +
    "\002\120\003\000\002\120\003\000\002\007\013\000\002" +
    "\113\003\000\002\113\002\000\002\105\003\000\002\105" +
    "\002\000\002\106\003\000\002\106\003\000\002\106\003" +
    "\000\002\035\005\000\002\010\005\000\002\011\007\000" +
    "\002\012\005\000\002\054\005\000\002\013\003\000\002" +
    "\013\004\000\002\066\006\000\002\124\003\000\002\124" +
    "\005\000\002\121\003\000\002\121\005\000\002\036\006" +
    "\000\002\030\007\000\002\030\006\000\002\030\006\000" +
    "\002\077\006\000\002\031\004\000\002\031\003\000\002" +
    "\065\007\000\002\032\006\000\002\102\003\000\002\102" +
    "\003\000\002\101\004\000\002\014\005\000\002\076\002" +
    "\000\002\076\003\000\002\055\002\000\002\055\004\000" +
    "\002\110\005\000\002\075\005\000\002\112\004\000\002" +
    "\015\006\000\002\016\006\000\002\017\011\000\002\111" +
    "\005\000\002\020\013\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\021\005\000" +
    "\002\072\004\000\002\072\003\000\002\072\003\000\002" +
    "\033\004\000\002\033\003\000\002\073\004\000\002\034" +
    "\004\000\002\022\007\000\002\037\003\000\002\037\005" +
    "\000\002\023\006\000\002\024\011\000\002\040\004\000" +
    "\002\040\002\000\002\043\003\000\002\043\005\000\002" +
    "\053\003\000\002\053\002\000\002\044\003\000\002\044" +
    "\005\000\002\025\004\000\002\025\003\000\002\100\006" +
    "\000\002\122\007\000\002\026\006\000\002\026\004\000" +
    "\002\123\005\000\002\103\003\000\002\103\003\000\002" +
    "\027\012\000\002\117\005\000\002\063\005\000\002\063" +
    "\005\000\002\063\003\000\002\071\005\000\002\071\005" +
    "\000\002\071\003\000\002\114\003\000\002\114\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\066\012\001\002\000\004\002\011" +
    "\001\002\000\006\002\uffff\004\005\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002\000\004\055\013" +
    "\001\002\000\014\011\uffd4\050\015\051\uffd4\052\uffd4\056" +
    "\uffd4\001\002\000\012\011\uffd2\051\uffd2\052\026\056\uffd2" +
    "\001\002\000\004\066\021\001\002\000\014\011\uffd5\050" +
    "\015\051\uffd5\052\uffd5\056\uffd5\001\002\000\014\011\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\056\uffd0\001\002\000\014\011" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\056\uffd1\001\002\000\004" +
    "\063\022\001\002\000\014\011\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\056\uffcf\001\002\000\012\011\uffd3\051\uffd3\052\026" +
    "\056\uffd3\001\002\000\010\011\uffca\051\070\056\uffd6\001" +
    "\002\000\012\011\uffb5\051\uffb5\052\uffb5\056\uffb5\001\002" +
    "\000\012\034\031\036\027\037\033\040\030\001\002\000" +
    "\010\053\uff95\054\uff95\066\uff95\001\002\000\010\053\uff92" +
    "\054\uff92\066\uff92\001\002\000\010\053\uff93\054\uff93\066" +
    "\uff93\001\002\000\004\066\035\001\002\000\010\053\uff94" +
    "\054\uff94\066\uff94\001\002\000\006\062\uffb2\063\uffb2\001" +
    "\002\000\010\042\042\062\uffb0\063\uffb0\001\002\000\006" +
    "\062\037\063\040\001\002\000\004\066\035\001\002\000" +
    "\070\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\020\uffb3\021\uffb3\022\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\051\uffb3\052\uffb3\056\uffb3\057" +
    "\uffb3\066\uffb3\001\002\000\006\062\uffb1\063\uffb1\001\002" +
    "\000\012\057\047\061\050\065\044\066\043\001\002\000" +
    "\022\041\uffda\046\uffda\056\uffda\060\uffda\062\uffda\063\uffda" +
    "\064\uffda\070\uffda\001\002\000\022\041\uffdc\046\uffdc\056" +
    "\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\070\uffdc\001\002" +
    "\000\006\062\uffaf\063\uffaf\001\002\000\022\041\uffd9\046" +
    "\uffd9\056\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9\070\uffd9" +
    "\001\002\000\006\061\055\066\051\001\002\000\022\041" +
    "\uffdb\046\uffdb\056\uffdb\060\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\070\uffdb\001\002\000\014\060\uff6b\067\uff6b\070\uff6b\071" +
    "\uff6b\072\uff6b\001\002\000\014\060\uff6f\067\uff6f\070\uff6f" +
    "\071\063\072\062\001\002\000\014\060\uff6c\067\uff6c\070" +
    "\uff6c\071\uff6c\072\uff6c\001\002\000\010\060\057\067\060" +
    "\070\056\001\002\000\014\060\uff6a\067\uff6a\070\uff6a\071" +
    "\uff6a\072\uff6a\001\002\000\006\061\055\066\051\001\002" +
    "\000\022\041\uff72\046\uff72\056\uff72\060\uff72\062\uff72\063" +
    "\uff72\064\uff72\070\uff72\001\002\000\006\061\055\066\051" +
    "\001\002\000\014\060\uff70\067\uff70\070\uff70\071\063\072" +
    "\062\001\002\000\006\061\055\066\051\001\002\000\006" +
    "\061\055\066\051\001\002\000\014\060\uff6e\067\uff6e\070" +
    "\uff6e\071\uff6e\072\uff6e\001\002\000\014\060\uff6d\067\uff6d" +
    "\070\uff6d\071\uff6d\072\uff6d\001\002\000\014\060\uff71\067" +
    "\uff71\070\uff71\071\063\072\062\001\002\000\004\056\u0126" +
    "\001\002\000\014\005\uffcb\011\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\001\002\000\010\011\uffca\051\070\056\uffd7\001\002" +
    "\000\004\011\074\001\002\000\010\011\uffcd\051\uffcd\056" +
    "\uffcd\001\002\000\004\066\075\001\002\000\004\055\076" +
    "\001\002\000\026\005\uffca\006\102\007\100\010\101\034" +
    "\uffca\035\uffca\036\uffca\051\070\052\026\056\uffc8\001\002" +
    "\000\026\005\uffc6\006\uffc6\007\uffc6\010\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\051\uffc6\052\uffc6\056\uffc6\001\002\000\004" +
    "\066\u0121\001\002\000\004\066\u011f\001\002\000\004\066" +
    "\u0119\001\002\000\012\005\uffbe\034\115\035\116\036\114" +
    "\001\002\000\026\005\uffc7\006\uffc7\007\uffc7\010\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\051\uffc7\052\uffc7\056\uffc7\001\002" +
    "\000\026\005\uffc5\006\uffc5\007\uffc5\010\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\051\uffc5\052\uffc5\056\uffc5\001\002\000\026" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\051\uffc4\052\uffc4\056\uffc4\001\002\000\026\005\uffca" +
    "\006\102\007\100\010\101\034\uffca\035\uffca\036\uffca\051" +
    "\070\052\026\056\uffc8\001\002\000\004\056\112\001\002" +
    "\000\026\005\uffc3\006\uffc3\007\uffc3\010\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\051\uffc3\052\uffc3\056\uffc3\001\002\000\010" +
    "\011\uffcc\051\uffcc\056\uffcc\001\002\000\004\056\uffc9\001" +
    "\002\000\004\005\uffbb\001\002\000\004\005\uffbd\001\002" +
    "\000\004\005\uffbc\001\002\000\004\005\uffbf\001\002\000" +
    "\004\005\121\001\002\000\004\066\122\001\002\000\004" +
    "\057\124\001\002\000\004\055\135\001\002\000\014\034" +
    "\031\036\027\037\033\040\030\060\uffe4\001\002\000\004" +
    "\060\134\001\002\000\006\060\uffe5\062\132\001\002\000" +
    "\004\066\131\001\002\000\006\060\uffe3\062\uffe3\001\002" +
    "\000\006\060\uffe1\062\uffe1\001\002\000\012\034\031\036" +
    "\027\037\033\040\030\001\002\000\006\060\uffe2\062\uffe2" +
    "\001\002\000\006\043\uffe6\055\uffe6\001\002\000\046\007" +
    "\100\012\162\013\140\014\155\015\141\020\170\021\166" +
    "\022\175\025\142\026\153\027\144\034\031\036\027\037" +
    "\033\040\030\052\026\057\124\066\163\001\002\000\054" +
    "\007\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\025\ufff5\026\ufff5\027\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\036\ufff5\037\ufff5\040\ufff5\052\ufff5\056\ufff5\057" +
    "\ufff5\066\ufff5\001\002\000\054\007\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\020\uffee\021\uffee\022\uffee\025\uffee\026" +
    "\uffee\027\uffee\032\uffee\033\uffee\034\uffee\036\uffee\037\uffee" +
    "\040\uffee\052\uffee\056\uffee\057\uffee\066\uffee\001\002\000" +
    "\004\057\u0110\001\002\000\004\057\u010d\001\002\000\004" +
    "\057\u0106\001\002\000\004\055\360\001\002\000\004\057" +
    "\243\001\002\000\054\007\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\020\ufff6\021\ufff6\022\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\052\ufff6\056\ufff6\057\ufff6\066\ufff6\001\002\000\054\007" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\025\ufff0\026\ufff0\027\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\052\ufff0\056\ufff0\057\ufff0" +
    "\066\ufff0\001\002\000\054\007\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\020\uffeb\021\uffeb\022\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\052\uffeb\056\uffeb\057\uffeb\066\uffeb\001\002\000\006" +
    "\032\350\056\uffc0\001\002\000\054\007\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\020\ufffa\021\ufffa\022\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\032\ufffa\033\ufffa\034\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\052\ufffa\056\ufffa\057\ufffa\066\ufffa\001\002" +
    "\000\054\007\uffef\012\uffef\013\uffef\014\uffef\015\uffef\020" +
    "\uffef\021\uffef\022\uffef\025\uffef\026\uffef\027\uffef\032\uffef" +
    "\033\uffef\034\uffef\036\uffef\037\uffef\040\uffef\052\uffef\056" +
    "\uffef\057\uffef\066\uffef\001\002\000\004\057\345\001\002" +
    "\000\060\007\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\333\032\uff9f\033\uff9f\034\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\052\uff9f\056\uff9f\057\uff9f\066\uff9f\001\002\000\004" +
    "\057\243\001\002\000\054\007\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\020\ufff9\021\ufff9\022\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\052\ufff9\056\ufff9\057\ufff9\066\ufff9\001\002\000\054" +
    "\007\uffed\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021" +
    "\uffed\022\uffed\025\uffed\026\uffed\027\uffed\032\uffed\033\uffed" +
    "\034\uffed\036\uffed\037\uffed\040\uffed\052\uffed\056\uffed\057" +
    "\uffed\066\uffed\001\002\000\006\042\324\063\325\001\002" +
    "\000\054\007\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\025\ufff7\026\ufff7\027\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\036\ufff7\037\ufff7\040\ufff7\052\ufff7\056" +
    "\ufff7\057\ufff7\066\ufff7\001\002\000\004\053\320\001\002" +
    "\000\004\042\302\001\002\000\054\007\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\020\uffec\021\uffec\022\uffec\025\uffec" +
    "\026\uffec\027\uffec\032\uffec\033\uffec\034\uffec\036\uffec\037" +
    "\uffec\040\uffec\052\uffec\056\uffec\057\uffec\066\uffec\001\002" +
    "\000\054\007\100\012\162\013\140\014\155\015\141\020" +
    "\170\021\166\022\175\025\142\026\153\027\144\032\ufffb" +
    "\033\ufffb\034\031\036\027\037\033\040\030\052\026\056" +
    "\ufffb\057\124\066\163\001\002\000\004\055\236\001\002" +
    "\000\054\007\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\025\ufff8\026\ufff8\027\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\036\ufff8\037\ufff8\040\ufff8\052\ufff8\056" +
    "\ufff8\057\ufff8\066\ufff8\001\002\000\004\057\256\001\002" +
    "\000\054\007\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\025\ufff4\026\ufff4\027\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\036\ufff4\037\ufff4\040\ufff4\052\ufff4\056" +
    "\ufff4\057\ufff4\066\ufff4\001\002\000\054\007\uff7b\012\uff7b" +
    "\013\uff7b\014\uff7b\015\uff7b\020\uff7b\021\uff7b\022\uff7b\025" +
    "\uff7b\026\uff7b\027\uff7b\032\uff7b\033\uff7b\034\uff7b\036\uff7b" +
    "\037\uff7b\040\uff7b\052\uff7b\056\uff7b\057\uff7b\066\uff7b\001" +
    "\002\000\054\007\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\025\ufff3\026\ufff3\027\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\036\ufff3\037\ufff3\040\ufff3\052\ufff3" +
    "\056\ufff3\057\ufff3\066\ufff3\001\002\000\054\007\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\032\ufff1\033\ufff1\034\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\052\ufff1\056\ufff1\057\ufff1\066\ufff1" +
    "\001\002\000\004\057\243\001\002\000\004\043\233\001" +
    "\002\000\054\007\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\025\ufff2\026\ufff2\027\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\052\ufff2" +
    "\056\ufff2\057\ufff2\066\ufff2\001\002\000\004\063\232\001" +
    "\002\000\004\053\202\001\002\000\006\054\uff7f\061\205" +
    "\001\002\000\006\054\uff80\062\230\001\002\000\004\054" +
    "\206\001\002\000\006\054\uff7e\062\uff7e\001\002\000\004" +
    "\066\207\001\002\000\006\042\211\063\uff83\001\002\000" +
    "\004\063\227\001\002\000\006\053\212\055\214\001\002" +
    "\000\006\053\212\055\214\001\002\000\010\054\uff82\062" +
    "\uff82\063\uff82\001\002\000\012\057\047\061\050\065\044" +
    "\066\043\001\002\000\006\062\216\063\uff84\001\002\000" +
    "\006\053\212\055\214\001\002\000\010\054\uff81\062\uff81" +
    "\063\uff81\001\002\000\006\056\uffde\062\uffde\001\002\000" +
    "\006\056\223\062\222\001\002\000\012\057\047\061\050" +
    "\065\044\066\043\001\002\000\010\054\uffdf\062\uffdf\063" +
    "\uffdf\001\002\000\006\056\uffdd\062\uffdd\001\002\000\006" +
    "\054\226\062\216\001\002\000\010\054\uffe0\062\uffe0\063" +
    "\uffe0\001\002\000\054\007\uff85\012\uff85\013\uff85\014\uff85" +
    "\015\uff85\020\uff85\021\uff85\022\uff85\025\uff85\026\uff85\027" +
    "\uff85\032\uff85\033\uff85\034\uff85\036\uff85\037\uff85\040\uff85" +
    "\052\uff85\056\uff85\057\uff85\066\uff85\001\002\000\004\061" +
    "\231\001\002\000\006\054\uff7d\062\uff7d\001\002\000\054" +
    "\007\uff77\012\uff77\013\uff77\014\uff77\015\uff77\020\uff77\021" +
    "\uff77\022\uff77\025\uff77\026\uff77\027\uff77\032\uff77\033\uff77" +
    "\034\uff77\036\uff77\037\uff77\040\uff77\052\uff77\056\uff77\057" +
    "\uff77\066\uff77\001\002\000\006\055\236\057\047\001\002" +
    "\000\004\063\uff75\001\002\000\004\063\uff74\001\002\000" +
    "\046\007\100\012\162\013\140\014\155\015\141\020\170" +
    "\021\166\022\175\025\142\026\153\027\144\034\031\036" +
    "\027\037\033\040\030\052\026\057\124\066\163\001\002" +
    "\000\004\063\uff76\001\002\000\004\056\241\001\002\000" +
    "\066\007\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\052\ufffd\056\ufffd\057\ufffd\063\ufffd\066" +
    "\ufffd\001\002\000\004\064\254\001\002\000\012\057\047" +
    "\061\050\065\044\066\043\001\002\000\004\041\252\001" +
    "\002\000\006\046\250\060\uffe8\001\002\000\004\060\247" +
    "\001\002\000\010\045\uffea\055\uffea\064\uffea\001\002\000" +
    "\012\057\047\061\050\065\044\066\043\001\002\000\004" +
    "\060\uffe9\001\002\000\012\057\047\061\050\065\044\066" +
    "\043\001\002\000\006\046\uffe7\060\uffe7\001\002\000\004" +
    "\055\236\001\002\000\054\007\uff99\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\020\uff99\021\uff99\022\uff99\025\uff99\026\uff99" +
    "\027\uff99\032\uff99\033\uff99\034\uff99\036\uff99\037\uff99\040" +
    "\uff99\052\uff99\056\uff99\057\uff99\066\uff99\001\002\000\012" +
    "\034\031\036\027\037\033\040\030\001\002\000\004\066" +
    "\260\001\002\000\004\047\261\001\002\000\004\066\262" +
    "\001\002\000\004\060\263\001\002\000\004\064\264\001" +
    "\002\000\004\055\236\001\002\000\054\007\uff96\012\uff96" +
    "\013\uff96\014\uff96\015\uff96\020\uff96\021\uff96\022\uff96\025" +
    "\uff96\026\uff96\027\uff96\032\uff96\033\uff96\034\uff96\036\uff96" +
    "\037\uff96\040\uff96\052\uff96\056\uff96\057\uff96\066\uff96\001" +
    "\002\000\006\023\272\024\271\001\002\000\054\007\uff8e" +
    "\012\uff8e\013\uff8e\014\uff8e\015\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\032\uff8e\033\uff8e\034\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\052\uff8e\056\uff8e\057\uff8e\066" +
    "\uff8e\001\002\000\054\007\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\020\uff91\021\uff91\022\uff91\025\uff91\026\uff91\027" +
    "\uff91\032\uff91\033\uff91\034\uff91\036\uff91\037\uff91\040\uff91" +
    "\052\uff91\056\uff91\057\uff91\066\uff91\001\002\000\004\055" +
    "\236\001\002\000\004\055\236\001\002\000\056\007\uff8f" +
    "\012\uff8f\013\uff8f\014\uff8f\015\uff8f\020\uff8f\021\uff8f\022" +
    "\uff8f\024\271\025\uff8f\026\uff8f\027\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\036\uff8f\037\uff8f\040\uff8f\052\uff8f\056\uff8f\057" +
    "\uff8f\066\uff8f\001\002\000\060\007\uff8c\012\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\020\uff8c\021\uff8c\022\uff8c\023\272\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\032\uff8c\033\uff8c\034\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\052\uff8c\056\uff8c\057\uff8c\066" +
    "\uff8c\001\002\000\056\007\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\020\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\032\uff8d\033\uff8d\034\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\052\uff8d\056\uff8d\057\uff8d\066\uff8d\001\002\000" +
    "\054\007\uff90\012\uff90\013\uff90\014\uff90\015\uff90\020\uff90" +
    "\021\uff90\022\uff90\025\uff90\026\uff90\027\uff90\032\uff90\033" +
    "\uff90\034\uff90\036\uff90\037\uff90\040\uff90\052\uff90\056\uff90" +
    "\057\uff90\066\uff90\001\002\000\060\007\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\027\uff8b\032\uff8b\033\uff8b\034" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\052\uff8b\056\uff8b\057\uff8b" +
    "\066\uff8b\001\002\000\054\007\uff8a\012\uff8a\013\uff8a\014" +
    "\uff8a\015\uff8a\020\uff8a\021\uff8a\022\uff8a\025\uff8a\026\uff8a" +
    "\027\uff8a\032\uff8a\033\uff8a\034\uff8a\036\uff8a\037\uff8a\040" +
    "\uff8a\052\uff8a\056\uff8a\057\uff8a\066\uff8a\001\002\000\010" +
    "\032\ufffc\033\ufffc\056\ufffc\001\002\000\012\057\303\061" +
    "\050\065\044\066\043\001\002\000\024\034\031\036\027" +
    "\037\033\040\030\057\047\060\uffe4\061\316\065\044\066" +
    "\317\001\002\000\004\063\315\001\002\000\004\063\314" +
    "\001\002\000\004\045\307\001\002\000\012\057\047\061" +
    "\050\065\044\066\043\001\002\000\004\064\311\001\002" +
    "\000\012\057\047\061\050\065\044\066\043\001\002\000" +
    "\004\063\313\001\002\000\054\007\uff73\012\uff73\013\uff73" +
    "\014\uff73\015\uff73\020\uff73\021\uff73\022\uff73\025\uff73\026" +
    "\uff73\027\uff73\032\uff73\033\uff73\034\uff73\036\uff73\037\uff73" +
    "\040\uff73\052\uff73\056\uff73\057\uff73\066\uff73\001\002\000" +
    "\054\007\uff78\012\uff78\013\uff78\014\uff78\015\uff78\020\uff78" +
    "\021\uff78\022\uff78\025\uff78\026\uff78\027\uff78\032\uff78\033" +
    "\uff78\034\uff78\036\uff78\037\uff78\040\uff78\052\uff78\056\uff78" +
    "\057\uff78\066\uff78\001\002\000\054\007\uffae\012\uffae\013" +
    "\uffae\014\uffae\015\uffae\020\uffae\021\uffae\022\uffae\025\uffae" +
    "\026\uffae\027\uffae\032\uffae\033\uffae\034\uffae\036\uffae\037" +
    "\uffae\040\uffae\052\uffae\056\uffae\057\uffae\066\uffae\001\002" +
    "\000\016\041\uffdb\060\uff6a\067\uff6a\070\uff6a\071\uff6a\072" +
    "\uff6a\001\002\000\016\041\uffda\060\uff6b\067\uff6b\070\uff6b" +
    "\071\uff6b\072\uff6b\001\002\000\012\034\031\036\027\037" +
    "\033\040\030\001\002\000\004\054\322\001\002\000\004" +
    "\066\323\001\002\000\006\042\uff79\063\uff79\001\002\000" +
    "\006\053\212\055\214\001\002\000\054\007\uff7c\012\uff7c" +
    "\013\uff7c\014\uff7c\015\uff7c\020\uff7c\021\uff7c\022\uff7c\025" +
    "\uff7c\026\uff7c\027\uff7c\032\uff7c\033\uff7c\034\uff7c\036\uff7c" +
    "\037\uff7c\040\uff7c\052\uff7c\056\uff7c\057\uff7c\066\uff7c\001" +
    "\002\000\004\063\327\001\002\000\054\007\uff7a\012\uff7a" +
    "\013\uff7a\014\uff7a\015\uff7a\020\uff7a\021\uff7a\022\uff7a\025" +
    "\uff7a\026\uff7a\027\uff7a\032\uff7a\033\uff7a\034\uff7a\036\uff7a" +
    "\037\uff7a\040\uff7a\052\uff7a\056\uff7a\057\uff7a\066\uff7a\001" +
    "\002\000\004\064\331\001\002\000\004\055\236\001\002" +
    "\000\054\007\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\020" +
    "\uff9a\021\uff9a\022\uff9a\025\uff9a\026\uff9a\027\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\036\uff9a\037\uff9a\040\uff9a\052\uff9a\056" +
    "\uff9a\057\uff9a\066\uff9a\001\002\000\004\057\243\001\002" +
    "\000\056\007\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\025\uffa1\026\uffa1\027\uffa1\030\340" +
    "\032\uffa1\033\uffa1\034\uffa1\036\uffa1\037\uffa1\040\uffa1\052" +
    "\uffa1\056\uffa1\057\uffa1\066\uffa1\001\002\000\060\007\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\333\032\uff9f" +
    "\033\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f\052\uff9f\056" +
    "\uff9f\057\uff9f\066\uff9f\001\002\000\056\007\uff9e\012\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\020\uff9e\021\uff9e\022\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\052\uff9e\056\uff9e\057\uff9e\066" +
    "\uff9e\001\002\000\054\007\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\020\uffa0\021\uffa0\022\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\052\uffa0\056\uffa0\057\uffa0\066\uffa0\001\002\000\004\055" +
    "\236\001\002\000\054\007\uffa2\012\uffa2\013\uffa2\014\uffa2" +
    "\015\uffa2\020\uffa2\021\uffa2\022\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\052\uffa2\056\uffa2\057\uffa2\066\uffa2\001\002\000\054\007" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\025\uff9b\026\uff9b\027\uff9b\032\uff9b\033\uff9b\034" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\052\uff9b\056\uff9b\057\uff9b" +
    "\066\uff9b\001\002\000\004\055\236\001\002\000\060\007" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\036\uff9c\037\uff9c\040\uff9c\052\uff9c" +
    "\056\uff9c\057\uff9c\066\uff9c\001\002\000\004\060\346\001" +
    "\002\000\004\063\347\001\002\000\054\007\uff86\012\uff86" +
    "\013\uff86\014\uff86\015\uff86\020\uff86\021\uff86\022\uff86\025" +
    "\uff86\026\uff86\027\uff86\032\uff86\033\uff86\034\uff86\036\uff86" +
    "\037\uff86\040\uff86\052\uff86\056\uff86\057\uff86\066\uff86\001" +
    "\002\000\012\057\047\061\050\065\044\066\043\001\002" +
    "\000\004\056\353\001\002\000\004\056\uffc1\001\002\000" +
    "\026\005\uffc2\006\uffc2\007\uffc2\010\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\051\uffc2\052\uffc2\056\uffc2\001\002\000\004\063" +
    "\355\001\002\000\010\016\uffba\017\uffba\056\uffba\001\002" +
    "\000\004\055\236\001\002\000\060\007\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\020\uff9d\021\uff9d\022\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\052\uff9d\056\uff9d\057\uff9d" +
    "\066\uff9d\001\002\000\006\016\365\017\362\001\002\000" +
    "\004\056\u0105\001\002\000\004\064\u0102\001\002\000\006" +
    "\017\362\056\u0100\001\002\000\010\016\365\017\uffa8\056" +
    "\uffa8\001\002\000\012\057\047\061\050\065\044\066\043" +
    "\001\002\000\004\064\367\001\002\000\046\007\100\012" +
    "\162\013\140\014\155\015\141\020\170\021\166\022\175" +
    "\025\142\026\153\027\144\034\031\036\027\037\033\040" +
    "\030\052\026\057\124\066\163\001\002\000\006\032\350" +
    "\033\373\001\002\000\010\016\uffa7\017\uffa7\056\uffa7\001" +
    "\002\000\010\016\uffa4\017\uffa4\056\uffa4\001\002\000\004" +
    "\063\375\001\002\000\010\016\uffa5\017\uffa5\056\uffa5\001" +
    "\002\000\010\016\uffa3\017\uffa3\056\uffa3\001\002\000\006" +
    "\017\uffa9\056\uffa9\001\002\000\004\056\u0101\001\002\000" +
    "\054\007\uffab\012\uffab\013\uffab\014\uffab\015\uffab\020\uffab" +
    "\021\uffab\022\uffab\025\uffab\026\uffab\027\uffab\032\uffab\033" +
    "\uffab\034\uffab\036\uffab\037\uffab\040\uffab\052\uffab\056\uffab" +
    "\057\uffab\066\uffab\001\002\000\054\007\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\020\uffad\021\uffad\022\uffad\025\uffad" +
    "\026\uffad\027\uffad\032\uffad\033\uffad\034\uffad\036\uffad\037" +
    "\uffad\040\uffad\052\uffad\056\uffad\057\uffad\066\uffad\001\002" +
    "\000\046\007\100\012\162\013\140\014\155\015\141\020" +
    "\170\021\166\022\175\025\142\026\153\027\144\034\031" +
    "\036\027\037\033\040\030\052\026\057\124\066\163\001" +
    "\002\000\006\032\350\033\373\001\002\000\004\056\uffa6" +
    "\001\002\000\054\007\uffac\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\020\uffac\021\uffac\022\uffac\025\uffac\026\uffac\027\uffac" +
    "\032\uffac\033\uffac\034\uffac\036\uffac\037\uffac\040\uffac\052" +
    "\uffac\056\uffac\057\uffac\066\uffac\001\002\000\012\057\047" +
    "\061\050\065\044\066\043\001\002\000\006\060\u010a\070" +
    "\u0109\001\002\000\006\060\uff88\070\uff88\001\002\000\012" +
    "\057\047\061\050\065\044\066\043\001\002\000\004\063" +
    "\u010b\001\002\000\054\007\uff89\012\uff89\013\uff89\014\uff89" +
    "\015\uff89\020\uff89\021\uff89\022\uff89\025\uff89\026\uff89\027" +
    "\uff89\032\uff89\033\uff89\034\uff89\036\uff89\037\uff89\040\uff89" +
    "\052\uff89\056\uff89\057\uff89\066\uff89\001\002\000\006\060" +
    "\uff87\070\uff87\001\002\000\012\057\047\061\050\065\044" +
    "\066\043\001\002\000\004\060\u010f\001\002\000\004\055" +
    "\uffaa\001\002\000\004\052\026\001\002\000\004\066\u0112" +
    "\001\002\000\004\044\u0117\001\002\000\012\057\047\061" +
    "\050\065\044\066\043\001\002\000\004\060\u0115\001\002" +
    "\000\004\055\236\001\002\000\054\007\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\020\uff98\021\uff98\022\uff98\025\uff98" +
    "\026\uff98\027\uff98\032\uff98\033\uff98\034\uff98\036\uff98\037" +
    "\uff98\040\uff98\052\uff98\056\uff98\057\uff98\066\uff98\001\002" +
    "\000\004\063\u0118\001\002\000\012\057\uff97\061\uff97\065" +
    "\uff97\066\uff97\001\002\000\004\055\u011b\001\002\000\026" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\051\uffb9\052\uffb9\056\uffb9\001\002\000\004\052\026" +
    "\001\002\000\006\052\026\056\u011e\001\002\000\012\011" +
    "\uffb4\051\uffb4\052\uffb4\056\uffb4\001\002\000\026\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\034\uffb6\035\uffb6\036\uffb6\051" +
    "\uffb6\052\uffb6\056\uffb6\001\002\000\004\055\u011b\001\002" +
    "\000\026\005\uffb7\006\uffb7\007\uffb7\010\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\051\uffb7\052\uffb7\056\uffb7\001\002\000\004" +
    "\042\u0122\001\002\000\006\053\212\055\214\001\002\000" +
    "\004\063\u0124\001\002\000\066\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\025\uffb8\026\uffb8\027\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\051\uffb8\052" +
    "\uffb8\056\uffb8\057\uffb8\066\uffb8\001\002\000\010\011\uffce" +
    "\051\uffce\056\uffce\001\002\000\006\002\uffd8\004\uffd8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\010\002\006\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\006\003\007\004\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\015\050\013" +
    "\115\016\001\001\000\010\013\022\051\023\066\024\001" +
    "\001\000\002\001\001\000\004\115\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\u011c\001\001\000\012\006\070\045\071" +
    "\052\066\116\072\001\001\000\002\001\001\000\004\042" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\121\033\124\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\107\044\117\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\063\053\071\051\114\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\065\114\052" +
    "\001\001\000\002\001\001\000\006\071\060\114\052\001" +
    "\001\000\002\001\001\000\004\114\064\001\001\000\004" +
    "\114\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\071\116\u0124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\104" +
    "\010\105\011\076\012\110\045\102\046\107\066\103\120" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\105\117\106\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\007\104\010\105\011\076\012\110\045\102\046" +
    "\112\066\103\120\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\122\001" +
    "\001\000\002\001\001\000\012\042\126\062\124\067\127" +
    "\104\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\126\067\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\011\146\014\150\015\155\016\166\017\160" +
    "\020\144\021\135\022\170\023\172\024\173\025\145\026" +
    "\151\027\136\030\163\036\156\042\200\057\175\064\147" +
    "\066\176\070\164\077\142\100\171\110\153\122\157\123" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\351\113\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\055\333\075\334\001\001\000\004\060\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\011\146\014\150\015\155\016\166" +
    "\017\160\020\144\021\135\022\170\023\172\024\173\025" +
    "\145\026\151\027\136\030\163\036\156\042\200\057\175" +
    "\064\300\066\176\070\164\077\142\100\171\110\153\122" +
    "\157\123\177\001\001\000\004\056\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\202\053\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\207\001\001\000\002\001\001" +
    "\000\006\043\214\047\212\001\001\000\006\043\224\047" +
    "\212\001\001\000\002\001\001\000\010\041\220\107\217" +
    "\117\045\001\001\000\002\001\001\000\004\047\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\223\117\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\056\233\103\236\117\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\011\146\014\150\015" +
    "\155\016\166\017\160\020\144\021\135\022\170\023\172" +
    "\024\173\025\145\026\151\027\136\030\163\036\156\042" +
    "\200\057\175\064\237\066\176\070\164\077\142\100\171" +
    "\110\153\122\157\123\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\061\245\074\244\107\243\117\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\061\250\074\244\107\243\117\045\001\001\000" +
    "\002\001\001\000\006\107\252\117\045\001\001\000\002" +
    "\001\001\000\004\056\254\001\001\000\002\001\001\000" +
    "\004\042\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\264\001\001\000\002\001\001\000\012\033\272" +
    "\034\266\072\267\073\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\277\001\001\000\004\056\276" +
    "\001\001\000\004\034\275\001\001\000\006\033\274\073" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\057" +
    "\175\060\305\107\303\117\045\123\304\001\001\000\030" +
    "\042\126\061\245\062\124\063\053\067\127\071\051\074" +
    "\244\104\125\107\243\114\052\117\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\307\117\045\001\001\000\002\001\001\000\006\107\311" +
    "\117\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\320\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\331\001\001\000\002\001\001" +
    "\000\004\060\342\001\001\000\006\076\340\112\336\001" +
    "\001\000\006\055\335\075\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\107\353\117\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\356\001\001\000\002\001\001" +
    "\000\010\031\362\032\360\065\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\376\001\001\000\006" +
    "\031\375\065\363\001\001\000\006\107\365\117\045\001" +
    "\001\000\002\001\001\000\064\011\146\014\150\015\155" +
    "\016\166\017\160\020\144\021\135\022\170\023\172\024" +
    "\173\025\145\026\151\027\136\030\163\036\156\042\200" +
    "\057\175\064\367\066\176\070\164\077\142\100\171\110" +
    "\153\122\157\123\177\001\001\000\010\035\373\101\371" +
    "\102\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\011\146\014\150\015\155\016\166\017\160" +
    "\020\144\021\135\022\170\023\172\024\173\025\145\026" +
    "\151\027\136\030\163\036\156\042\200\057\175\064\u0102" +
    "\066\176\070\164\077\142\100\171\110\153\122\157\123" +
    "\177\001\001\000\010\035\373\101\371\102\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\u0106\107" +
    "\u0107\117\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\u010b\117\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\107\u010d\117\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\u0110\001\001\000\004\111\u0112\001\001\000\002\001\001" +
    "\000\012\061\u0113\074\244\107\243\117\045\001\001\000" +
    "\002\001\001\000\004\056\u0115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\u0119\001" +
    "\001\000\002\001\001\000\006\013\u011b\066\024\001\001" +
    "\000\004\066\u011c\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u011f\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\u0122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Lexer lexer;
    private boolean sintaxisCorrecta = true;

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public void syntax_error(Symbol s) {
        sintaxisCorrecta = false;
        String errorMsg = "Error de sintaxis en línea " + (s.left + 1) +
                          ", columna " + (s.right + 1) +
                          ". Token inesperado: '" + s.value + "'";
        System.err.println(errorMsg);
    }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.sym == sym.EOF) {
                System.err.println("Error inesperado al final del archivo");
            } else {
                System.err.println("Error: " + message);
            }
        }
    }

    public boolean parseCode() {
        try {
            super.parse();
            if (sintaxisCorrecta) {
                System.out.println("Compilación exitosa");
                return true;
            } else {
                System.out.println("Se encontró un error de sintaxis.");
                return false;
            }
        } catch (Exception e) {
            System.out.println("Error fatal: " + e.getMessage());
            return false;
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicios EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicios ::= inicio inicios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicios ::= inicio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueexpresiones ::= LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueexpresiones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= expresion expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= sis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= mientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= mientrashacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= porpuro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= porcadas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= intentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= impresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= escaneos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= declaracionarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= declaracionlistas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= lambdas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= ternarios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= asignars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= selectors 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= enums 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloquecondiciones ::= PARENTESISABIERTO condiciones PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquecondiciones",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condiciones ::= condicion OPERADORCONLOGICO condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condiciones ::= condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion ::= valor OPERADORRELACIONAL valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloqueparametros ::= PARENTESISABIERTO parametros PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueparametros",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros ::= parametrolista 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametrolista ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametrolista ::= parametrolista COMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametro ::= tipos ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bloquevalores ::= CORCHETEABIERTO listabloques CORCHETECERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloquevalores ::= LLAVEABIERTA valores LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valores ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valores ::= valores COMA valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= bloqueoperaritmetics 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // espacio ::= AGRUPACIONPRINCIPAL ID LLAVEABIERTA libreriasopcional declaracionesopcional clasesopcional LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacio",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // clasesopcional ::= clases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // clasesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // libreriasopcional ::= librerias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // libreriasopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracionesopcional ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // librerias ::= librerias libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // librerias ::= libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // libreria ::= GESTIONRECURSOS ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // clases ::= clases clase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // clases ::= clase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // clase ::= modificadoresacceso AGRUPACIONSECUNDARIA ID LLAVEABIERTA miembrosclase LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // modificadoresacceso ::= MODIFICADORACCESO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // modificadoresacceso ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // miembrosclase ::= miembroclase miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // miembrosclase ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // miembroclase ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembroclase",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // miembroclase ::= enums 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembroclase",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // miembroclase ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembroclase",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // miembroclase ::= estructuras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembroclase",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // miembroclase ::= interfaces 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembroclase",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funciones ::= modificadoresacceso tipofuncionopcional DECLARACIONFUNCION ID bloqueparametros LLAVEABIERTA expresiones retornoopcional LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // retornoopcional ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoopcional",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // retornoopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoopcional",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipofuncionopcional ::= tipofuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncionopcional",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipofuncionopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncionopcional",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipofuncion ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipofuncion ::= TIPOLOGICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipofuncion ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // retornos ::= RETORNAR valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornos",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // estructuras ::= AGRUPACIONESTRUCTURA ID bloquedeclaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // enums ::= AGRUPACIONENUMERATOR ID OPERADORASIGNAMIENTO bloquevalores PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enums",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // interfaces ::= AGRUPACIONINTERFAZ ID bloquedeclaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interfaces",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bloquedeclaraciones ::= LLAVEABIERTA declaraciones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquedeclaraciones",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracion ::= DEC tipos listadeclarar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // listadeclarar ::= declarador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclarar",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // listadeclarar ::= listadeclarar COMA declarador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclarar",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declarador ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarador",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declarador ::= ID OPERADORASIGNAMIENTO valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarador",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asignars ::= ID OPERADORASIGNAMIENTO valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignars",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // selectors ::= selector LLAVEABIERTA casos defectos LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // selectors ::= selector LLAVEABIERTA defectos LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // selectors ::= selector LLAVEABIERTA casos LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // selector ::= SELECTOR PARENTESISABIERTO valor PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // casos ::= caso casos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // caso ::= CASO valor PUNTODOBLE expresiones retornoalto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // defectos ::= DEFECTO PUNTODOBLE expresiones retornoalto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defectos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // retornoalto ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // retornoalto ::= alto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // alto ::= PARAR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alto",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sis ::= si sinoshacer sinos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sis",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sinos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sinos ::= sino 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sinoshacer ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sinoshacer ::= sinohacer sinoshacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // si ::= SI bloquecondiciones bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sinohacer ::= SINOHACER bloquecondiciones bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinohacer",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sino ::= SINO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // mientras ::= MIENTRAS bloquecondiciones PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientras",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // mientrashacer ::= HACER bloquecondiciones PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientrashacer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // porpuro ::= POR PARENTESISABIERTO declaracion aumentodecremento condiciones PARENTESISCERRADO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porpuro",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // aumentodecremento ::= ID OPERADORDESPLAZAMIENTO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentodecremento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // porcadas ::= PORCADA PARENTESISABIERTO tipos ID PARAMETROENTRADA ID PARENTESISCERRADO PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porcadas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipos ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipos ::= TIPOINFERIDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipos ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipos ::= TIPOCARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // intentos ::= INTENTAR bloqueexpresiones atraparterminar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intentos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // atraparterminar ::= atrapars terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // atraparterminar ::= atrapars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // atraparterminar ::= terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // atrapars ::= atrapar atrapars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // atrapars ::= atrapar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // atrapar ::= ATRAPAR bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapar",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // terminars ::= TERMINAR bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("terminars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // impresiones ::= IMPRIMIR PARENTESISABIERTO oraciones PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // oraciones ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // oraciones ::= oraciones MAS valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // escaneos ::= ESCANEAR PARENTESISABIERTO PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // declaracionarreglos ::= tipos CORCHETEABIERTO dimensionesopcional CORCHETECERRADO ID asignamientovariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionarreglos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // asignamientovariables ::= OPERADORASIGNAMIENTO listabloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // asignamientovariables ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // listabloques ::= bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // listabloques ::= listabloques COMA bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // dimensionesopcional ::= dimensiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // dimensionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // dimensiones ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // dimensiones ::= dimensiones COMA NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // declaracionlistas ::= cuerpolista PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlistas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declaracionlistas ::= declaracionlista 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlistas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // declaracionlista ::= cuerpolista OPERADORASIGNAMIENTO bloquevalores PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlista",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cuerpolista ::= LISTA CORCHETEABIERTO tipos CORCHETECERRADO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolista",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // lambdas ::= ID OPERADORASIGNAMIENTO lambda PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdas",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // lambdas ::= lambda PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdas",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lambda ::= bloqueparametros OPERADORRESULTADO cuerpolambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambda",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cuerpolambda ::= bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cuerpolambda ::= bloqueoperaritmetics 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ternarios ::= ID OPERADORASIGNAMIENTO bloquecondiciones OPERADORTERNARIO valor PUNTODOBLE valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ternarios",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // bloqueoperaritmetics ::= PARENTESISABIERTO operaritmetics PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueoperaritmetics",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // operaritmetics ::= operaritmetics MAS operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // operaritmetics ::= operaritmetics MENOS operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operaritmetics ::= operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operaritmetic ::= operaritmetic MULTI idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operaritmetic ::= operaritmetic DIV idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // operaritmetic ::= idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // idnum ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // idnum ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

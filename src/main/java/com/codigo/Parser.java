
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.codigo;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\003\004\000\002\003\002\000\002\005\005\000" +
    "\002\011\006\000\002\011\006\000\002\011\006\000\002" +
    "\006\016\000\002\010\012\000\002\007\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\014\002\ufffa\004\010\005\016\007\015\016" +
    "\013\001\002\000\016\002\ufffa\004\010\005\016\007\015" +
    "\016\013\025\ufffa\001\002\000\016\002\ufffd\004\ufffd\005" +
    "\ufffd\007\ufffd\016\ufffd\025\ufffd\001\002\000\016\002\uffff" +
    "\004\uffff\005\uffff\007\uffff\016\uffff\025\uffff\001\002\000" +
    "\016\002\ufffe\004\ufffe\005\ufffe\007\ufffe\016\ufffe\025\ufffe" +
    "\001\002\000\004\026\052\001\002\000\004\002\051\001" +
    "\002\000\016\002\ufffc\004\ufffc\005\ufffc\007\ufffc\016\ufffc" +
    "\025\ufffc\001\002\000\004\013\042\001\002\000\004\002" +
    "\000\001\002\000\004\026\031\001\002\000\004\024\017" +
    "\001\002\000\014\004\010\005\016\007\015\016\013\025" +
    "\ufffa\001\002\000\004\025\021\001\002\000\004\006\022" +
    "\001\002\000\004\026\023\001\002\000\004\016\025\001" +
    "\002\000\004\027\030\001\002\000\004\011\026\001\002" +
    "\000\004\016\027\001\002\000\006\022\ufff9\027\ufff9\001" +
    "\002\000\016\002\ufff4\004\ufff4\005\ufff4\007\ufff4\016\ufff4" +
    "\025\ufff4\001\002\000\004\015\032\001\002\000\004\016" +
    "\033\001\002\000\004\014\034\001\002\000\004\016\035" +
    "\001\002\000\004\027\036\001\002\000\004\024\037\001" +
    "\002\000\014\004\010\005\016\007\015\016\013\025\ufffa" +
    "\001\002\000\004\025\041\001\002\000\016\002\ufff3\004" +
    "\ufff3\005\ufff3\007\ufff3\016\ufff3\025\ufff3\001\002\000\010" +
    "\016\044\017\045\020\043\001\002\000\004\022\050\001" +
    "\002\000\004\022\047\001\002\000\004\022\046\001\002" +
    "\000\016\002\ufff7\004\ufff7\005\ufff7\007\ufff7\016\ufff7\025" +
    "\ufff7\001\002\000\016\002\ufff8\004\ufff8\005\ufff8\007\ufff8" +
    "\016\ufff8\025\ufff8\001\002\000\016\002\ufff6\004\ufff6\005" +
    "\ufff6\007\ufff6\016\ufff6\025\ufff6\001\002\000\004\002\001" +
    "\001\002\000\004\015\053\001\002\000\004\016\013\001" +
    "\002\000\004\016\025\001\002\000\004\022\056\001\002" +
    "\000\004\016\057\001\002\000\004\012\060\001\002\000" +
    "\004\027\061\001\002\000\004\024\062\001\002\000\014" +
    "\004\010\005\016\007\015\016\013\025\ufffa\001\002\000" +
    "\004\025\064\001\002\000\016\002\ufff5\004\ufff5\005\ufff5" +
    "\007\ufff5\016\ufff5\025\ufff5\001\002\000\006\002\ufffb\025" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\020\002\010\003\013\004\003\006\005\007" +
    "\004\010\006\011\011\001\001\000\016\003\064\004\003" +
    "\006\005\007\004\010\006\011\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\017\004\003\006\005\007\004\010\006\011\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\037\004\003\006\005\007\004\010\006\011\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\053\001\001\000" +
    "\004\005\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\062\004\003\006\005\007\004\010\006\011\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Lexer lexer;
    private boolean sintaxiscorrecta = true;
    private List<String> errores = new ArrayList<>();

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public void syntax_error(Symbol s) {
        sintaxiscorrecta = false;
        String errorMsg = "Error de sintaxis en línea " + (s.left + 1) +
                        ", columna " + (s.right + 1) +
                        ". Token inesperado: '" + s.value + "'";
        System.err.println(errorMsg);
        errores.add(errorMsg);
        }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.sym == sym.EOF) {
                errores.add("Error inesperado al final del archivo");
                } else {
                    errores.add(message);
                }
        }
    }

    public boolean parseCode() {
        try {
            super.parse();
            if (sintaxiscorrecta) {
                System.out.println("compilación exitosa");
                return true;
                } else {
                    System.out.println(errores.size() + " errores encontrados:");
                    errores.forEach(System.out::println);
                    return false;
                }
            } catch (Exception e) {
                System.out.println("Error fatal " + e.getMessage());
                return false;
            }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= pors 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= hacermientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= porcadas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONDICIONALAB ::= ID OPERADORRELACIONAL ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALAB",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // asignacion ::= ID OPERADORASIGNAMIENTO ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // asignacion ::= ID OPERADORASIGNAMIENTO NUMERICO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // asignacion ::= ID OPERADORASIGNAMIENTO LITERAL PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pors ::= POR PARENTESISABIERTO TIPONUMERICO asignacion CONDICIONALAB PUNTOCOMA ID OPERADORDESPLAZAMIENTO PARENTESISCERRADO LLAVEABIERTA INSTRUCCIONES LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pors",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // hacermientras ::= HACER LLAVEABIERTA INSTRUCCIONES LLAVECERRADA MIENTRAS PARENTESISABIERTO CONDICIONALAB PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hacermientras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // porcadas ::= PORCADA PARENTESISABIERTO TIPONUMERICO ID PARAMETROENTRADA ID PARENTESISCERRADO LLAVEABIERTA INSTRUCCIONES LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porcadas",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.codigo;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\002\003\000\002\060\005\000\002\066\004" +
    "\000\002\066\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\062\005\000\002\063\005\000\002\063\003\000\002\077" +
    "\005\000\002\061\005\000\002\064\003\000\002\064\002" +
    "\000\002\107\003\000\002\107\005\000\002\072\004\000" +
    "\002\050\005\000\002\050\005\000\002\042\003\000\002" +
    "\042\005\000\002\112\003\000\002\112\003\000\002\112" +
    "\003\000\002\112\003\000\002\004\004\000\002\004\003" +
    "\000\002\070\011\000\002\054\003\000\002\054\002\000" +
    "\002\051\003\000\002\051\002\000\002\053\003\000\002" +
    "\053\002\000\002\005\004\000\002\005\003\000\002\120" +
    "\005\000\002\006\004\000\002\006\003\000\002\121\010" +
    "\000\002\046\003\000\002\046\002\000\002\047\004\000" +
    "\002\047\004\000\002\047\004\000\002\047\004\000\002" +
    "\047\004\000\002\047\002\000\002\007\004\000\002\007" +
    "\003\000\002\122\013\000\002\116\003\000\002\116\002" +
    "\000\002\110\003\000\002\110\002\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\035\005\000\002" +
    "\010\005\000\002\011\007\000\002\012\005\000\002\056" +
    "\005\000\002\013\003\000\002\013\004\000\002\071\006" +
    "\000\002\124\003\000\002\124\005\000\002\125\003\000" +
    "\002\125\005\000\002\036\006\000\002\030\005\000\002" +
    "\030\004\000\002\030\004\000\002\102\006\000\002\031" +
    "\004\000\002\031\003\000\002\067\006\000\002\105\003" +
    "\000\002\105\003\000\002\032\005\000\002\104\004\000" +
    "\002\052\006\000\002\014\005\000\002\101\002\000\002" +
    "\101\003\000\002\057\002\000\002\057\004\000\002\113" +
    "\005\000\002\100\005\000\002\115\004\000\002\015\006" +
    "\000\002\016\006\000\002\017\011\000\002\114\005\000" +
    "\002\020\013\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\021\005\000\002\075" +
    "\004\000\002\075\003\000\002\075\003\000\002\033\004" +
    "\000\002\033\003\000\002\076\004\000\002\034\004\000" +
    "\002\022\007\000\002\040\003\000\002\040\005\000\002" +
    "\023\006\000\002\024\011\000\002\041\004\000\002\041" +
    "\002\000\002\044\003\000\002\044\005\000\002\055\003" +
    "\000\002\055\002\000\002\045\003\000\002\045\005\000" +
    "\002\025\004\000\002\025\003\000\002\103\006\000\002" +
    "\126\007\000\002\026\006\000\002\026\004\000\002\127" +
    "\005\000\002\106\003\000\002\106\005\000\002\106\003" +
    "\000\002\027\012\000\002\123\005\000\002\065\005\000" +
    "\002\065\005\000\002\065\003\000\002\074\005\000\002" +
    "\074\005\000\002\074\003\000\002\117\003\000\002\117" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\066\012\001\002\000\004\002\011" +
    "\001\002\000\006\002\uffff\004\005\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002\000\004\055\013" +
    "\001\002\000\014\011\uffd0\050\015\051\uffd0\052\uffd0\056" +
    "\uffd0\001\002\000\012\011\uffce\051\uffce\052\026\056\uffce" +
    "\001\002\000\004\066\021\001\002\000\014\011\uffd1\050" +
    "\015\051\uffd1\052\uffd1\056\uffd1\001\002\000\014\011\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\056\uffcc\001\002\000\014\011" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\056\uffcd\001\002\000\004" +
    "\063\022\001\002\000\014\011\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\056\uffcb\001\002\000\012\011\uffcf\051\uffcf\052\026" +
    "\056\uffcf\001\002\000\010\011\uffc6\051\070\056\uffd2\001" +
    "\002\000\070\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\051\uffb0\052\uffb0\056" +
    "\uffb0\057\uffb0\066\uffb0\001\002\000\012\034\031\036\027" +
    "\037\033\040\030\001\002\000\010\053\uff8f\054\uff8f\066" +
    "\uff8f\001\002\000\010\053\uff8c\054\uff8c\066\uff8c\001\002" +
    "\000\010\053\uff8d\054\uff8d\066\uff8d\001\002\000\004\066" +
    "\035\001\002\000\010\053\uff8e\054\uff8e\066\uff8e\001\002" +
    "\000\006\062\uffad\063\uffad\001\002\000\010\042\042\062" +
    "\uffab\063\uffab\001\002\000\006\062\037\063\040\001\002" +
    "\000\004\066\035\001\002\000\070\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\020\uffae\021\uffae\022\uffae\025\uffae\026\uffae\027\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\051\uffae\052\uffae\056\uffae\057\uffae\066\uffae\001\002\000" +
    "\006\062\uffac\063\uffac\001\002\000\012\057\047\061\050" +
    "\065\043\066\044\001\002\000\022\041\uffda\046\uffda\056" +
    "\uffda\060\uffda\062\uffda\063\uffda\064\uffda\070\uffda\001\002" +
    "\000\022\041\uffd8\046\uffd8\056\uffd8\060\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\070\uffd8\001\002\000\006\062\uffaa\063\uffaa" +
    "\001\002\000\022\041\uffd7\046\uffd7\056\uffd7\060\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\070\uffd7\001\002\000\006\061\055" +
    "\066\051\001\002\000\022\041\uffd9\046\uffd9\056\uffd9\060" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\070\uffd9\001\002\000\014" +
    "\060\uff64\067\uff64\070\uff64\071\uff64\072\uff64\001\002\000" +
    "\014\060\uff65\067\uff65\070\uff65\071\uff65\072\uff65\001\002" +
    "\000\014\060\uff68\067\uff68\070\uff68\071\063\072\062\001" +
    "\002\000\010\060\057\067\060\070\056\001\002\000\014" +
    "\060\uff63\067\uff63\070\uff63\071\uff63\072\uff63\001\002\000" +
    "\006\061\055\066\051\001\002\000\022\041\uff6b\046\uff6b" +
    "\056\uff6b\060\uff6b\062\uff6b\063\uff6b\064\uff6b\070\uff6b\001" +
    "\002\000\006\061\055\066\051\001\002\000\014\060\uff69" +
    "\067\uff69\070\uff69\071\063\072\062\001\002\000\006\061" +
    "\055\066\051\001\002\000\006\061\055\066\051\001\002" +
    "\000\014\060\uff67\067\uff67\070\uff67\071\uff67\072\uff67\001" +
    "\002\000\014\060\uff66\067\uff66\070\uff66\071\uff66\072\uff66" +
    "\001\002\000\014\060\uff6a\067\uff6a\070\uff6a\071\063\072" +
    "\062\001\002\000\004\056\u012f\001\002\000\014\005\uffc7" +
    "\011\uffc7\034\uffc7\035\uffc7\036\uffc7\001\002\000\010\011" +
    "\uffc6\051\070\056\uffd3\001\002\000\004\011\074\001\002" +
    "\000\010\011\uffc9\051\uffc9\056\uffc9\001\002\000\004\066" +
    "\075\001\002\000\004\055\076\001\002\000\026\005\uffc6" +
    "\006\103\007\102\010\101\034\uffc6\035\uffc6\036\uffc6\051" +
    "\070\052\026\056\uffc0\001\002\000\026\005\uffc6\006\103" +
    "\007\102\010\101\034\uffc6\035\uffc6\036\uffc6\051\070\052" +
    "\026\056\uffc0\001\002\000\026\005\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\034\uffbe\035\uffbe\036\uffbe\051\uffbe\052\uffbe\056" +
    "\uffbe\001\002\000\004\066\u012b\001\002\000\004\066\u0127" +
    "\001\002\000\004\066\u0122\001\002\000\026\005\uffc6\006" +
    "\103\007\102\010\101\034\uffc6\035\uffc6\036\uffc6\051\070" +
    "\052\026\056\uffc0\001\002\000\012\005\uffb9\034\121\035" +
    "\122\036\120\001\002\000\026\005\uffc6\006\103\007\102" +
    "\010\101\034\uffc6\035\uffc6\036\uffc6\051\070\052\026\056" +
    "\uffc0\001\002\000\026\005\uffc6\006\103\007\102\010\101" +
    "\034\uffc6\035\uffc6\036\uffc6\051\070\052\026\056\uffc0\001" +
    "\002\000\004\056\113\001\002\000\026\005\uffc6\006\103" +
    "\007\102\010\101\034\uffc6\035\uffc6\036\uffc6\051\070\052" +
    "\026\056\uffc0\001\002\000\004\056\uffc1\001\002\000\010" +
    "\011\uffc8\051\uffc8\056\uffc8\001\002\000\004\056\uffc2\001" +
    "\002\000\026\005\uffbf\006\uffbf\007\uffbf\010\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\051\uffbf\052\uffbf\056\uffbf\001\002\000" +
    "\004\056\uffc3\001\002\000\004\005\124\001\002\000\004" +
    "\005\uffb6\001\002\000\004\005\uffb8\001\002\000\004\005" +
    "\uffb7\001\002\000\004\005\uffba\001\002\000\004\066\125" +
    "\001\002\000\004\057\127\001\002\000\004\055\140\001" +
    "\002\000\014\034\031\036\027\037\033\040\030\060\uffe2" +
    "\001\002\000\004\060\137\001\002\000\006\060\uffe3\062" +
    "\135\001\002\000\006\060\uffe1\062\uffe1\001\002\000\004" +
    "\066\134\001\002\000\006\060\uffdf\062\uffdf\001\002\000" +
    "\012\034\031\036\027\037\033\040\030\001\002\000\006" +
    "\060\uffe0\062\uffe0\001\002\000\006\043\uffe4\055\uffe4\001" +
    "\002\000\050\007\102\012\166\013\143\014\161\015\145" +
    "\020\175\021\172\022\203\025\144\026\157\027\147\032" +
    "\204\034\031\036\027\037\033\040\030\052\026\057\127" +
    "\066\167\001\002\000\054\007\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\020\ufff5\021\ufff5\022\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\037\ufff5\040" +
    "\ufff5\052\ufff5\056\ufff5\057\ufff5\066\ufff5\001\002\000\054" +
    "\007\uffee\012\uffee\013\uffee\014\uffee\015\uffee\020\uffee\021" +
    "\uffee\022\uffee\025\uffee\026\uffee\027\uffee\032\uffee\033\uffee" +
    "\034\uffee\036\uffee\037\uffee\040\uffee\052\uffee\056\uffee\057" +
    "\uffee\066\uffee\001\002\000\004\057\u0117\001\002\000\004" +
    "\057\u0110\001\002\000\004\057\u010d\001\002\000\006\016" +
    "\375\017\373\001\002\000\004\057\253\001\002\000\054" +
    "\007\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\025\ufff6\026\ufff6\027\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\036\ufff6\037\ufff6\040\ufff6\052\ufff6\056\ufff6\057" +
    "\ufff6\066\ufff6\001\002\000\054\007\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\020\ufff0\021\ufff0\022\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\032\ufff0\033\ufff0\034\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\052\ufff0\056\ufff0\057\ufff0\066\ufff0\001\002\000" +
    "\054\007\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\025\uffe9\026\uffe9\027\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\036\uffe9\037\uffe9\040\uffe9\052\uffe9\056\uffe9" +
    "\057\uffe9\066\uffe9\001\002\000\006\032\204\056\uffbb\001" +
    "\002\000\054\007\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\025\ufffa\026\ufffa\027\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\036\ufffa\037\ufffa\040\ufffa\052\ufffa" +
    "\056\ufffa\057\ufffa\066\ufffa\001\002\000\054\007\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\020\uffef\021\uffef\022\uffef" +
    "\025\uffef\026\uffef\027\uffef\032\uffef\033\uffef\034\uffef\036" +
    "\uffef\037\uffef\040\uffef\052\uffef\056\uffef\057\uffef\066\uffef" +
    "\001\002\000\054\007\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\020\uffed\021\uffed\022\uffed\025\uffed\026\uffed\027\uffed" +
    "\032\uffed\033\uffed\034\uffed\036\uffed\037\uffed\040\uffed\052" +
    "\uffed\056\uffed\057\uffed\066\uffed\001\002\000\004\057\361" +
    "\001\002\000\060\007\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\020\uff99\021\uff99\022\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\347\032\uff99\033\uff99\034\uff99\036\uff99\037" +
    "\uff99\040\uff99\052\uff99\056\uff99\057\uff99\066\uff99\001\002" +
    "\000\004\057\253\001\002\000\054\007\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\020\ufff9\021\ufff9\022\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\052\ufff9\056\ufff9\057\ufff9\066\ufff9\001\002" +
    "\000\054\007\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\036\uffeb\037\uffeb\040\uffeb\052\uffeb\056" +
    "\uffeb\057\uffeb\066\uffeb\001\002\000\006\042\340\063\341" +
    "\001\002\000\054\007\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\036\ufff7\037\ufff7\040\ufff7\052" +
    "\ufff7\056\ufff7\057\ufff7\066\ufff7\001\002\000\004\053\334" +
    "\001\002\000\004\042\316\001\002\000\054\007\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\020\uffea\021\uffea\022\uffea" +
    "\025\uffea\026\uffea\027\uffea\032\uffea\033\uffea\034\uffea\036" +
    "\uffea\037\uffea\040\uffea\052\uffea\056\uffea\057\uffea\066\uffea" +
    "\001\002\000\054\007\102\012\166\013\143\014\161\015" +
    "\145\020\175\021\172\022\203\025\144\026\157\027\147" +
    "\032\204\033\ufffb\034\031\036\027\037\033\040\030\052" +
    "\026\056\ufffb\057\127\066\167\001\002\000\004\055\266" +
    "\001\002\000\054\007\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8\040\ufff8\052" +
    "\ufff8\056\ufff8\057\ufff8\066\ufff8\001\002\000\054\007\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\020\uffec\021\uffec\022" +
    "\uffec\025\uffec\026\uffec\027\uffec\032\uffec\033\uffec\034\uffec" +
    "\036\uffec\037\uffec\040\uffec\052\uffec\056\uffec\057\uffec\066" +
    "\uffec\001\002\000\004\057\272\001\002\000\054\007\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\052\ufff4\056\ufff4\057\ufff4\066" +
    "\ufff4\001\002\000\054\007\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\020\ufff2\021\ufff2\022\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\052\026\056\ufff2\057\ufff2\066\ufff2\001\002\000\054\007" +
    "\uff75\012\uff75\013\uff75\014\uff75\015\uff75\020\uff75\021\uff75" +
    "\022\uff75\025\uff75\026\uff75\027\uff75\032\uff75\033\uff75\034" +
    "\uff75\036\uff75\037\uff75\040\uff75\052\uff75\056\uff75\057\uff75" +
    "\066\uff75\001\002\000\054\007\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\020\ufff3\021\ufff3\022\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\032\ufff3\033\ufff3\034\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\052\ufff3\056\ufff3\057\ufff3\066\ufff3\001\002\000\054" +
    "\007\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\025\ufff1\026\ufff1\027\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\036\ufff1\037\ufff1\040\ufff1\052\ufff1\056\ufff1\057" +
    "\ufff1\066\ufff1\001\002\000\004\057\253\001\002\000\012" +
    "\057\047\061\050\065\043\066\044\001\002\000\004\043" +
    "\241\001\002\000\004\063\240\001\002\000\004\053\210" +
    "\001\002\000\006\054\uff79\061\213\001\002\000\006\054" +
    "\uff7a\062\236\001\002\000\004\054\214\001\002\000\006" +
    "\054\uff78\062\uff78\001\002\000\004\066\215\001\002\000" +
    "\006\042\217\063\uff7d\001\002\000\004\063\235\001\002" +
    "\000\006\053\220\055\222\001\002\000\006\053\220\055" +
    "\222\001\002\000\010\054\uff7c\062\uff7c\063\uff7c\001\002" +
    "\000\012\057\047\061\050\065\043\066\044\001\002\000" +
    "\006\062\224\063\uff7e\001\002\000\006\053\220\055\222" +
    "\001\002\000\010\054\uff7b\062\uff7b\063\uff7b\001\002\000" +
    "\006\056\uffdc\062\uffdc\001\002\000\006\056\231\062\230" +
    "\001\002\000\012\057\047\061\050\065\043\066\044\001" +
    "\002\000\010\054\uffdd\062\uffdd\063\uffdd\001\002\000\006" +
    "\056\uffdb\062\uffdb\001\002\000\006\054\234\062\224\001" +
    "\002\000\010\054\uffde\062\uffde\063\uffde\001\002\000\054" +
    "\007\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\020\uff7f\021" +
    "\uff7f\022\uff7f\025\uff7f\026\uff7f\027\uff7f\032\uff7f\033\uff7f" +
    "\034\uff7f\036\uff7f\037\uff7f\040\uff7f\052\uff7f\056\uff7f\057" +
    "\uff7f\066\uff7f\001\002\000\004\061\237\001\002\000\006" +
    "\054\uff77\062\uff77\001\002\000\054\007\uff71\012\uff71\013" +
    "\uff71\014\uff71\015\uff71\020\uff71\021\uff71\022\uff71\025\uff71" +
    "\026\uff71\027\uff71\032\uff71\033\uff71\034\uff71\036\uff71\037" +
    "\uff71\040\uff71\052\uff71\056\uff71\057\uff71\066\uff71\001\002" +
    "\000\006\055\244\057\047\001\002\000\004\063\uff6f\001" +
    "\002\000\004\063\uff6d\001\002\000\050\007\102\012\166" +
    "\013\143\014\161\015\145\020\175\021\172\022\203\025" +
    "\144\026\157\027\147\032\204\034\031\036\027\037\033" +
    "\040\030\052\026\057\127\066\167\001\002\000\004\063" +
    "\uff70\001\002\000\004\056\247\001\002\000\004\063\ufffd" +
    "\001\002\000\004\063\251\001\002\000\054\007\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\032\uffb5\033\uffb5\034\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\052\uffb5\056\uffb5\057\uffb5\066\uffb5" +
    "\001\002\000\004\064\264\001\002\000\012\057\047\061" +
    "\050\065\043\066\044\001\002\000\004\041\262\001\002" +
    "\000\006\046\260\060\uffe6\001\002\000\004\060\257\001" +
    "\002\000\010\045\uffe8\055\uffe8\064\uffe8\001\002\000\012" +
    "\057\047\061\050\065\043\066\044\001\002\000\004\060" +
    "\uffe7\001\002\000\012\057\047\061\050\065\043\066\044" +
    "\001\002\000\006\046\uffe5\060\uffe5\001\002\000\004\055" +
    "\266\001\002\000\054\007\uff93\012\uff93\013\uff93\014\uff93" +
    "\015\uff93\020\uff93\021\uff93\022\uff93\025\uff93\026\uff93\027" +
    "\uff93\032\uff93\033\uff93\034\uff93\036\uff93\037\uff93\040\uff93" +
    "\052\uff93\056\uff93\057\uff93\066\uff93\001\002\000\050\007" +
    "\102\012\166\013\143\014\161\015\145\020\175\021\172" +
    "\022\203\025\144\026\157\027\147\032\204\034\031\036" +
    "\027\037\033\040\030\052\026\057\127\066\167\001\002" +
    "\000\004\056\270\001\002\000\064\007\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\036\ufffd\037\ufffd\040\ufffd\052\ufffd" +
    "\056\ufffd\057\ufffd\066\ufffd\001\002\000\060\007\uffaf\011" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\025\uffaf\026\uffaf\027\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\051\uffaf\052\uffaf\056\uffaf" +
    "\057\uffaf\066\uffaf\001\002\000\012\034\031\036\027\037" +
    "\033\040\030\001\002\000\004\066\274\001\002\000\004" +
    "\047\275\001\002\000\004\066\276\001\002\000\004\060" +
    "\277\001\002\000\004\064\300\001\002\000\004\055\266" +
    "\001\002\000\054\007\uff90\012\uff90\013\uff90\014\uff90\015" +
    "\uff90\020\uff90\021\uff90\022\uff90\025\uff90\026\uff90\027\uff90" +
    "\032\uff90\033\uff90\034\uff90\036\uff90\037\uff90\040\uff90\052" +
    "\uff90\056\uff90\057\uff90\066\uff90\001\002\000\006\023\305" +
    "\024\306\001\002\000\054\007\uff88\012\uff88\013\uff88\014" +
    "\uff88\015\uff88\020\uff88\021\uff88\022\uff88\025\uff88\026\uff88" +
    "\027\uff88\032\uff88\033\uff88\034\uff88\036\uff88\037\uff88\040" +
    "\uff88\052\uff88\056\uff88\057\uff88\066\uff88\001\002\000\054" +
    "\007\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\025\uff8b\026\uff8b\027\uff8b\032\uff8b\033\uff8b" +
    "\034\uff8b\036\uff8b\037\uff8b\040\uff8b\052\uff8b\056\uff8b\057" +
    "\uff8b\066\uff8b\001\002\000\004\055\266\001\002\000\004" +
    "\055\266\001\002\000\056\007\uff89\012\uff89\013\uff89\014" +
    "\uff89\015\uff89\020\uff89\021\uff89\022\uff89\024\306\025\uff89" +
    "\026\uff89\027\uff89\032\uff89\033\uff89\034\uff89\036\uff89\037" +
    "\uff89\040\uff89\052\uff89\056\uff89\057\uff89\066\uff89\001\002" +
    "\000\060\007\uff86\012\uff86\013\uff86\014\uff86\015\uff86\020" +
    "\uff86\021\uff86\022\uff86\023\305\024\uff86\025\uff86\026\uff86" +
    "\027\uff86\032\uff86\033\uff86\034\uff86\036\uff86\037\uff86\040" +
    "\uff86\052\uff86\056\uff86\057\uff86\066\uff86\001\002\000\056" +
    "\007\uff87\012\uff87\013\uff87\014\uff87\015\uff87\020\uff87\021" +
    "\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027\uff87\032\uff87" +
    "\033\uff87\034\uff87\036\uff87\037\uff87\040\uff87\052\uff87\056" +
    "\uff87\057\uff87\066\uff87\001\002\000\054\007\uff8a\012\uff8a" +
    "\013\uff8a\014\uff8a\015\uff8a\020\uff8a\021\uff8a\022\uff8a\025" +
    "\uff8a\026\uff8a\027\uff8a\032\uff8a\033\uff8a\034\uff8a\036\uff8a" +
    "\037\uff8a\040\uff8a\052\uff8a\056\uff8a\057\uff8a\066\uff8a\001" +
    "\002\000\054\007\uff84\012\uff84\013\uff84\014\uff84\015\uff84" +
    "\020\uff84\021\uff84\022\uff84\025\uff84\026\uff84\027\uff84\032" +
    "\uff84\033\uff84\034\uff84\036\uff84\037\uff84\040\uff84\052\uff84" +
    "\056\uff84\057\uff84\066\uff84\001\002\000\060\007\uff85\012" +
    "\uff85\013\uff85\014\uff85\015\uff85\020\uff85\021\uff85\022\uff85" +
    "\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\032\uff85\033" +
    "\uff85\034\uff85\036\uff85\037\uff85\040\uff85\052\uff85\056\uff85" +
    "\057\uff85\066\uff85\001\002\000\010\032\ufffc\033\ufffc\056" +
    "\ufffc\001\002\000\012\057\317\061\050\065\043\066\044" +
    "\001\002\000\024\034\031\036\027\037\033\040\030\057" +
    "\047\060\uffe2\061\332\065\043\066\333\001\002\000\004" +
    "\063\331\001\002\000\004\063\330\001\002\000\004\045" +
    "\323\001\002\000\012\057\047\061\050\065\043\066\044" +
    "\001\002\000\004\064\325\001\002\000\012\057\047\061" +
    "\050\065\043\066\044\001\002\000\004\063\327\001\002" +
    "\000\054\007\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\020" +
    "\uff6c\021\uff6c\022\uff6c\025\uff6c\026\uff6c\027\uff6c\032\uff6c" +
    "\033\uff6c\034\uff6c\036\uff6c\037\uff6c\040\uff6c\052\uff6c\056" +
    "\uff6c\057\uff6c\066\uff6c\001\002\000\054\007\uff72\012\uff72" +
    "\013\uff72\014\uff72\015\uff72\020\uff72\021\uff72\022\uff72\025" +
    "\uff72\026\uff72\027\uff72\032\uff72\033\uff72\034\uff72\036\uff72" +
    "\037\uff72\040\uff72\052\uff72\056\uff72\057\uff72\066\uff72\001" +
    "\002\000\054\007\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\025\uffa9\026\uffa9\027\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\052\uffa9" +
    "\056\uffa9\057\uffa9\066\uffa9\001\002\000\016\041\uffd9\060" +
    "\uff63\067\uff63\070\uff63\071\uff63\072\uff63\001\002\000\016" +
    "\041\uffd8\060\uff64\067\uff64\070\uff64\071\uff64\072\uff64\001" +
    "\002\000\012\034\031\036\027\037\033\040\030\001\002" +
    "\000\004\054\336\001\002\000\004\066\337\001\002\000" +
    "\006\042\uff73\063\uff73\001\002\000\006\053\220\055\222" +
    "\001\002\000\054\007\uff76\012\uff76\013\uff76\014\uff76\015" +
    "\uff76\020\uff76\021\uff76\022\uff76\025\uff76\026\uff76\027\uff76" +
    "\032\uff76\033\uff76\034\uff76\036\uff76\037\uff76\040\uff76\052" +
    "\uff76\056\uff76\057\uff76\066\uff76\001\002\000\004\063\343" +
    "\001\002\000\054\007\uff74\012\uff74\013\uff74\014\uff74\015" +
    "\uff74\020\uff74\021\uff74\022\uff74\025\uff74\026\uff74\027\uff74" +
    "\032\uff74\033\uff74\034\uff74\036\uff74\037\uff74\040\uff74\052" +
    "\uff74\056\uff74\057\uff74\066\uff74\001\002\000\004\064\345" +
    "\001\002\000\004\055\266\001\002\000\054\007\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\020\uff94\021\uff94\022\uff94" +
    "\025\uff94\026\uff94\027\uff94\032\uff94\033\uff94\034\uff94\036" +
    "\uff94\037\uff94\040\uff94\052\uff94\056\uff94\057\uff94\066\uff94" +
    "\001\002\000\004\057\253\001\002\000\056\007\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\020\uff9b\021\uff9b\022\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\030\354\032\uff9b\033\uff9b\034" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\052\uff9b\056\uff9b\057\uff9b" +
    "\066\uff9b\001\002\000\060\007\uff99\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\020\uff99\021\uff99\022\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\347\032\uff99\033\uff99\034\uff99\036" +
    "\uff99\037\uff99\040\uff99\052\uff99\056\uff99\057\uff99\066\uff99" +
    "\001\002\000\056\007\uff98\012\uff98\013\uff98\014\uff98\015" +
    "\uff98\020\uff98\021\uff98\022\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\032\uff98\033\uff98\034\uff98\036\uff98\037\uff98\040" +
    "\uff98\052\uff98\056\uff98\057\uff98\066\uff98\001\002\000\054" +
    "\007\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\025\uff9a\026\uff9a\027\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\036\uff9a\037\uff9a\040\uff9a\052\uff9a\056\uff9a\057" +
    "\uff9a\066\uff9a\001\002\000\004\055\266\001\002\000\054" +
    "\007\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\025\uff9c\026\uff9c\027\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\036\uff9c\037\uff9c\040\uff9c\052\uff9c\056\uff9c\057" +
    "\uff9c\066\uff9c\001\002\000\054\007\uff95\012\uff95\013\uff95" +
    "\014\uff95\015\uff95\020\uff95\021\uff95\022\uff95\025\uff95\026" +
    "\uff95\027\uff95\032\uff95\033\uff95\034\uff95\036\uff95\037\uff95" +
    "\040\uff95\052\uff95\056\uff95\057\uff95\066\uff95\001\002\000" +
    "\004\055\266\001\002\000\060\007\uff96\012\uff96\013\uff96" +
    "\014\uff96\015\uff96\020\uff96\021\uff96\022\uff96\025\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\036\uff96\037\uff96\040\uff96\052\uff96\056\uff96\057\uff96\066" +
    "\uff96\001\002\000\004\060\362\001\002\000\004\063\363" +
    "\001\002\000\054\007\uff80\012\uff80\013\uff80\014\uff80\015" +
    "\uff80\020\uff80\021\uff80\022\uff80\025\uff80\026\uff80\027\uff80" +
    "\032\uff80\033\uff80\034\uff80\036\uff80\037\uff80\040\uff80\052" +
    "\uff80\056\uff80\057\uff80\066\uff80\001\002\000\004\056\366" +
    "\001\002\000\004\056\uffbc\001\002\000\026\005\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\034\uffbd\035\uffbd\036\uffbd\051\uffbd" +
    "\052\uffbd\056\uffbd\001\002\000\004\055\266\001\002\000" +
    "\060\007\uff97\012\uff97\013\uff97\014\uff97\015\uff97\020\uff97" +
    "\021\uff97\022\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\034\uff97\036\uff97\037\uff97\040\uff97" +
    "\052\uff97\056\uff97\057\uff97\066\uff97\001\002\000\054\007" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\025\uffa7\026\uffa7\027\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\052\uffa7\056\uffa7\057\uffa7" +
    "\066\uffa7\001\002\000\056\007\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\017\373\020\uffa6\021\uffa6\022\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\032\uffa6\033\uffa6\034\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\052\uffa6\056\uffa6\057\uffa6\066\uffa6\001\002" +
    "\000\004\064\u010a\001\002\000\060\007\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\375\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\025\uffa3\026\uffa3\027\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\052\uffa3\056\uffa3\057\uffa3" +
    "\066\uffa3\001\002\000\012\057\047\061\050\065\043\066" +
    "\044\001\002\000\004\064\377\001\002\000\004\055\u0100" +
    "\001\002\000\050\007\102\012\166\013\143\014\161\015" +
    "\145\020\175\021\172\022\203\025\144\026\157\027\147" +
    "\032\204\034\031\036\027\037\033\040\030\052\026\057" +
    "\127\066\167\001\002\000\060\007\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\052\uffa2\056\uffa2\057\uffa2\066" +
    "\uffa2\001\002\000\006\032\204\033\u0105\001\002\000\004" +
    "\056\uffa0\001\002\000\004\056\u0108\001\002\000\004\063" +
    "\u0107\001\002\000\004\056\uffa1\001\002\000\004\056\uff9e" +
    "\001\002\000\060\007\uff9d\012\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\032\uff9d\033\uff9d\034\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\052\uff9d\056\uff9d\057\uff9d\066\uff9d\001\002" +
    "\000\056\007\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\036\uffa4\037\uffa4\040\uffa4\052" +
    "\uffa4\056\uffa4\057\uffa4\066\uffa4\001\002\000\004\055\u0100" +
    "\001\002\000\054\007\uff9f\012\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f\052" +
    "\uff9f\056\uff9f\057\uff9f\066\uff9f\001\002\000\054\007\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\052\uffa8\056\uffa8\057\uffa8\066" +
    "\uffa8\001\002\000\012\057\047\061\050\065\043\066\044" +
    "\001\002\000\004\060\u010f\001\002\000\006\016\uffa5\017" +
    "\uffa5\001\002\000\012\057\047\061\050\065\043\066\044" +
    "\001\002\000\006\060\u0114\070\u0113\001\002\000\006\060" +
    "\uff82\070\uff82\001\002\000\012\057\047\061\050\065\043" +
    "\066\044\001\002\000\004\063\u0115\001\002\000\054\007" +
    "\uff83\012\uff83\013\uff83\014\uff83\015\uff83\020\uff83\021\uff83" +
    "\022\uff83\025\uff83\026\uff83\027\uff83\032\uff83\033\uff83\034" +
    "\uff83\036\uff83\037\uff83\040\uff83\052\uff83\056\uff83\057\uff83" +
    "\066\uff83\001\002\000\006\060\uff81\070\uff81\001\002\000" +
    "\004\052\026\001\002\000\004\066\u0119\001\002\000\004" +
    "\044\u011e\001\002\000\012\057\047\061\050\065\043\066" +
    "\044\001\002\000\004\060\u011c\001\002\000\004\055\266" +
    "\001\002\000\054\007\uff92\012\uff92\013\uff92\014\uff92\015" +
    "\uff92\020\uff92\021\uff92\022\uff92\025\uff92\026\uff92\027\uff92" +
    "\032\uff92\033\uff92\034\uff92\036\uff92\037\uff92\040\uff92\052" +
    "\uff92\056\uff92\057\uff92\066\uff92\001\002\000\004\063\u011f" +
    "\001\002\000\012\057\uff91\061\uff91\065\uff91\066\uff91\001" +
    "\002\000\026\005\uffb0\006\uffb0\007\uffb0\010\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\051\uffb0\052\uffb0\056\uffb0\001\002\000" +
    "\004\056\uffc5\001\002\000\004\055\u0124\001\002\000\026" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\051\uffb4\052\uffb4\056\uffb4\001\002\000\004\052\026" +
    "\001\002\000\006\052\026\056\u0126\001\002\000\026\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\051\uffb1\052\uffb1\056\uffb1\001\002\000\004\042\u0128\001" +
    "\002\000\006\053\220\055\222\001\002\000\004\063\u012a" +
    "\001\002\000\066\005\uffb3\006\uffb3\007\uffb3\010\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\051\uffb3\052\uffb3\056\uffb3" +
    "\057\uffb3\066\uffb3\001\002\000\004\055\u0124\001\002\000" +
    "\026\005\uffb2\006\uffb2\007\uffb2\010\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\051\uffb2\052\uffb2\056\uffb2\001\002\000\004\056" +
    "\uffc4\001\002\000\010\011\uffca\051\uffca\056\uffca\001\002" +
    "\000\006\002\uffd4\004\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\010\002\006\003\005\070\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\006\003\007\070\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\015\051\013" +
    "\120\016\001\001\000\010\013\022\053\023\071\024\001" +
    "\001\000\002\001\001\000\004\120\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\270\001\001\000\012\006\070\046\071" +
    "\054\066\121\072\001\001\000\002\001\001\000\004\043" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\124\035\125\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\112\044\123\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\065\053\074\052\117\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\074\065\117\051" +
    "\001\001\000\002\001\001\000\006\074\060\117\051\001" +
    "\001\000\002\001\001\000\004\117\064\001\001\000\004" +
    "\117\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\046\071\121\u012d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\105" +
    "\010\106\011\076\012\110\013\103\046\104\047\107\071" +
    "\024\122\077\001\001\000\024\007\105\010\106\011\076" +
    "\012\110\013\103\046\104\047\u012c\071\024\122\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\105\010\106\011\076\012" +
    "\110\013\103\046\104\047\u0120\071\u011f\122\077\001\001" +
    "\000\006\110\116\111\122\001\001\000\024\007\105\010" +
    "\106\011\076\012\110\013\103\046\104\047\115\071\024" +
    "\122\114\001\001\000\024\007\105\010\106\011\076\012" +
    "\110\013\103\046\104\047\113\071\024\122\077\001\001" +
    "\000\002\001\001\000\024\007\105\010\106\011\076\012" +
    "\110\013\103\046\104\047\111\071\024\122\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\125\001\001\000\002" +
    "\001\001\000\012\043\132\064\127\072\131\107\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\132\072" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\011\151\013\176\014\153\015\161\016\172\017\164\020" +
    "\147\021\140\022\175\023\200\024\201\025\150\026\154" +
    "\027\141\030\167\035\155\036\162\037\173\043\206\061" +
    "\204\066\152\071\024\073\170\102\145\103\177\113\157" +
    "\126\163\127\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\371\032\370\067\373\001\001\000\004\062" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\364\116\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\057\347\100\350\001\001\000\004\062\343\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\011\151\013\176\014\153\015\161" +
    "\016\172\017\164\020\147\021\140\022\175\023\200\024" +
    "\201\025\150\026\154\027\141\030\167\035\155\036\162" +
    "\037\173\043\206\061\204\066\314\071\024\073\170\102" +
    "\145\103\177\113\157\126\163\127\205\001\001\000\004" +
    "\060\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\251\001\001\000\006\112\247\123\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\210\055\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\215\001\001\000\002\001\001\000\006\044\222\050\220" +
    "\001\001\000\006\044\232\050\220\001\001\000\002\001" +
    "\001\000\010\042\226\112\225\123\045\001\001\000\002" +
    "\001\001\000\004\050\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\112\231\123\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\060\241\106" +
    "\244\123\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\011\151\013\176\014\153\015\161\016\172\017" +
    "\164\020\147\021\140\022\175\023\200\024\201\025\150" +
    "\026\154\027\141\030\167\035\155\036\162\037\173\043" +
    "\206\061\204\066\245\071\024\073\170\102\145\103\177" +
    "\113\157\126\163\127\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\063\255\077\254\112" +
    "\253\123\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\063\260\077" +
    "\254\112\253\123\045\001\001\000\002\001\001\000\006" +
    "\112\262\123\045\001\001\000\002\001\001\000\004\060" +
    "\264\001\001\000\002\001\001\000\072\011\151\013\176" +
    "\014\153\015\161\016\172\017\164\020\147\021\140\022" +
    "\175\023\200\024\201\025\150\026\154\027\141\030\167" +
    "\035\155\036\162\037\173\043\206\061\204\066\266\071" +
    "\024\073\170\102\145\103\177\113\157\126\163\127\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\300\001\001\000\002\001\001\000\012" +
    "\033\306\034\302\075\303\076\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\313\001\001\000\004" +
    "\060\312\001\001\000\004\034\311\001\001\000\006\033" +
    "\310\076\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\061\204\062\321\112\317\123\045\127\320\001\001" +
    "\000\030\043\132\063\255\064\127\065\053\072\131\074" +
    "\052\077\254\107\130\112\253\117\051\123\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\112\323\123\045\001\001\000\002\001\001\000\006" +
    "\112\325\123\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\345\001\001\000\002" +
    "\001\001\000\004\062\356\001\001\000\006\101\354\115" +
    "\352\001\001\000\006\057\351\100\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\355\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\367\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u010b\001\001\000\002\001\001" +
    "\000\006\031\u0108\067\373\001\001\000\006\112\375\123" +
    "\045\001\001\000\002\001\001\000\004\052\u0100\001\001" +
    "\000\072\011\151\013\176\014\153\015\161\016\172\017" +
    "\164\020\147\021\140\022\175\023\200\024\201\025\150" +
    "\026\154\027\141\030\167\035\155\036\162\037\173\043" +
    "\206\061\204\066\u0101\071\024\073\170\102\145\103\177" +
    "\113\157\126\163\127\205\001\001\000\002\001\001\000" +
    "\010\035\u0105\104\u0102\105\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\112\u010d\123\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\040\u0110\112\u0111\123\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\112\u0115\123\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\u0117\001\001\000\004\114\u0119\001\001" +
    "\000\002\001\001\000\012\063\u011a\077\254\112\253\123" +
    "\045\001\001\000\002\001\001\000\004\060\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\u0122\001\001" +
    "\000\002\001\001\000\006\013\u0124\071\024\001\001\000" +
    "\004\071\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0128\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Lexer lexer;
    private boolean sintaxiscorrecta = true;
    private List<String> errores = new ArrayList<>();

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public void syntax_error(Symbol s) {
        sintaxiscorrecta = false;
        String errorMsg = "Error de sintaxis en línea " + (s.left + 1) +
                        ", columna " + (s.right + 1) +
                        ". Token inesperado: '" + s.value + "'";
        System.err.println(errorMsg);
        errores.add(errorMsg);
        }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.sym == sym.EOF) {
                errores.add("Error inesperado al final del archivo");
                } else {
                    errores.add(message);
                }
        }
    }

    public boolean parseCode() {
        try {
            super.parse();
            if (sintaxiscorrecta) {
                System.out.println("compilación exitosa");
                return true;
                } else {
                    System.out.println(errores.size() + " errores encontrados:");
                    errores.forEach(System.out::println);
                    return false;
                }
            } catch (Exception e) {
                System.out.println("Error fatal " + e.getMessage());
                return false;
            }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicios EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicios ::= inicio inicios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicios ::= inicio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueexpresiones ::= LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueexpresiones",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= expresion expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= sis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= mientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= mientrashacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= porpuro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= porcadas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= intentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= impresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= escaneos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= declaracionarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= declaracionlistas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= lambdas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= ternarios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= rompers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= asignars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= selectors 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= enums 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloquecondiciones ::= PARENTESISABIERTO condiciones PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquecondiciones",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condiciones ::= condicion OPERADORCONLOGICO condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condiciones ::= condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= valor OPERADORRELACIONAL valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloqueparametros ::= PARENTESISABIERTO parametros PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueparametros",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= parametrolista 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametrolista ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametrolista ::= parametrolista COMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametro ::= tipos ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloquevalores ::= CORCHETEABIERTO listabloques CORCHETECERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloquevalores ::= LLAVEABIERTA valores LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valores ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valores ::= valores COMA valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= bloqueoperaritmetics 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // espacios ::= espacios espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // espacios ::= espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // espacio ::= AGRUPACIONPRINCIPAL ID LLAVEABIERTA libreriasopcional declaracionesopcional clasesopcional LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacio",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // clasesopcional ::= clases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // clasesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // libreriasopcional ::= librerias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // libreriasopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracionesopcional ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // librerias ::= librerias libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // librerias ::= libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // libreria ::= GESTIONRECURSOS ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // clases ::= clases clase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // clases ::= clase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // clase ::= modificadoresacceso AGRUPACIONSECUNDARIA ID LLAVEABIERTA miembrosclase LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // modificadoresacceso ::= MODIFICADORACCESO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // modificadoresacceso ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // miembrosclase ::= declaraciones miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // miembrosclase ::= enums miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // miembrosclase ::= funciones miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // miembrosclase ::= estructuras miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // miembrosclase ::= interfaces miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // miembrosclase ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funcion ::= modificadoresacceso funcionopcional DECLARACIONFUNCION ID bloqueparametros LLAVEABIERTA expresiones retornoopcional LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // retornoopcional ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoopcional",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // retornoopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoopcional",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // funcionopcional ::= tipofuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionopcional",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funcionopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionopcional",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipofuncion ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipofuncion ::= TIPOLOGICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipofuncion ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // retornos ::= RETORNAR valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornos",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructuras ::= AGRUPACIONESTRUCTURA ID bloquedeclaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // enums ::= AGRUPACIONENUMERATOR ID OPERADORASIGNAMIENTO bloquevalores PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enums",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // interfaces ::= AGRUPACIONINTERFAZ ID bloquedeclaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interfaces",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bloquedeclaraciones ::= LLAVEABIERTA declaraciones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquedeclaraciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracion ::= DEC tipos listadeclarar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // listadeclarar ::= declarador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclarar",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // listadeclarar ::= listadeclarar COMA declarador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclarar",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declarador ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarador",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declarador ::= ID OPERADORASIGNAMIENTO valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarador",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignars ::= ID OPERADORASIGNAMIENTO valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignars",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // selectors ::= selector casos defectos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // selectors ::= selector defectos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // selectors ::= selector casos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // selector ::= SELECTOR PARENTESISABIERTO valor PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // casos ::= caso casos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // caso ::= CASO valor PUNTODOBLE bloqueswitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // retornoalto ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // retornoalto ::= alto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // defectos ::= DEFECTO PUNTODOBLE bloqueswitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defectos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // alto ::= PARAR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alto",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bloqueswitch ::= LLAVEABIERTA expresiones retornoalto LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueswitch",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sis ::= si sinoshacer sinos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sis",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sinos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sinos ::= sino 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sinoshacer ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sinoshacer ::= sinohacer sinoshacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // si ::= SI bloquecondiciones bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sinohacer ::= SINOHACER bloquecondiciones bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinohacer",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sino ::= SINO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // mientras ::= MIENTRAS bloquecondiciones PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientras",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // mientrashacer ::= HACER bloquecondiciones PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientrashacer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // porpuro ::= POR PARENTESISABIERTO declaracion aumentodecremento condiciones PARENTESISCERRADO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porpuro",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // aumentodecremento ::= ID OPERADORDESPLAZAMIENTO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentodecremento",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // porcadas ::= PORCADA PARENTESISABIERTO tipos ID PARAMETROENTRADA ID PARENTESISCERRADO PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porcadas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipos ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipos ::= TIPOINFERIDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipos ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipos ::= TIPOCARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // intentos ::= INTENTAR bloqueexpresiones atraparterminar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intentos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // atraparterminar ::= atrapars terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // atraparterminar ::= atrapars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // atraparterminar ::= terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // atrapars ::= atrapar atrapars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // atrapars ::= atrapar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // atrapar ::= ATRAPAR bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapar",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // terminars ::= TERMINAR bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("terminars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // impresiones ::= IMPRIMIR PARENTESISABIERTO oraciones PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // oraciones ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // oraciones ::= oraciones MAS valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // escaneos ::= ESCANEAR PARENTESISABIERTO PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // declaracionarreglos ::= tipos CORCHETEABIERTO dimensionesopcional CORCHETECERRADO ID asignamientovariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionarreglos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asignamientovariables ::= OPERADORASIGNAMIENTO listabloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignamientovariables ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // listabloques ::= bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // listabloques ::= listabloques COMA bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // dimensionesopcional ::= dimensiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // dimensionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // dimensiones ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // dimensiones ::= dimensiones COMA NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // declaracionlistas ::= cuerpolista PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlistas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // declaracionlistas ::= declaracionlista 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlistas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // declaracionlista ::= cuerpolista OPERADORASIGNAMIENTO bloquevalores PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlista",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // cuerpolista ::= LISTA CORCHETEABIERTO tipos CORCHETECERRADO ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolista",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // lambdas ::= ID OPERADORASIGNAMIENTO lambda PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdas",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // lambdas ::= lambda PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdas",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // lambda ::= bloqueparametros OPERADORRESULTADO cuerpolambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambda",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // cuerpolambda ::= bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // cuerpolambda ::= LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // cuerpolambda ::= bloqueoperaritmetics 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ternarios ::= ID OPERADORASIGNAMIENTO bloquecondiciones OPERADORTERNARIO valor PUNTODOBLE valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ternarios",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // bloqueoperaritmetics ::= PARENTESISABIERTO operaritmetics PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueoperaritmetics",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // operaritmetics ::= operaritmetics MAS operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // operaritmetics ::= operaritmetics MENOS operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // operaritmetics ::= operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // operaritmetic ::= operaritmetic MULTI idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // operaritmetic ::= operaritmetic DIV idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // operaritmetic ::= idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // idnum ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // idnum ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

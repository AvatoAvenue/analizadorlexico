
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.codigo;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\002\003\000\002\061\005\000\002\067\004" +
    "\000\002\067\003\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\063\005\000\002\064\005\000\002\064\003\000\002\100" +
    "\005\000\002\062\005\000\002\065\003\000\002\065\002" +
    "\000\002\107\003\000\002\107\005\000\002\073\004\000" +
    "\002\055\005\000\002\004\004\000\002\004\003\000\002" +
    "\071\011\000\002\053\003\000\002\053\002\000\002\051" +
    "\003\000\002\051\002\000\002\052\003\000\002\052\002" +
    "\000\002\005\004\000\002\005\003\000\002\116\005\000" +
    "\002\006\004\000\002\006\003\000\002\117\010\000\002" +
    "\046\003\000\002\046\002\000\002\047\004\000\002\047" +
    "\004\000\002\047\004\000\002\047\004\000\002\047\004" +
    "\000\002\047\002\000\002\007\004\000\002\007\003\000" +
    "\002\120\003\000\002\120\003\000\002\057\011\000\002" +
    "\056\013\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\035\005\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\111\005\000\002\010\005\000" +
    "\002\011\007\000\002\012\005\000\002\013\003\000\002" +
    "\013\004\000\002\072\006\000\002\122\003\000\002\122" +
    "\005\000\002\123\003\000\002\123\005\000\002\036\006" +
    "\000\002\030\005\000\002\030\004\000\002\030\004\000" +
    "\002\103\006\000\002\031\004\000\002\031\003\000\002" +
    "\070\011\000\002\105\003\000\002\105\003\000\002\032" +
    "\010\000\002\104\004\000\002\014\005\000\002\102\002" +
    "\000\002\102\003\000\002\060\002\000\002\060\004\000" +
    "\002\112\005\000\002\101\005\000\002\114\004\000\002" +
    "\015\006\000\002\016\006\000\002\017\011\000\002\113" +
    "\005\000\002\020\013\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\021\007\000" +
    "\002\076\004\000\002\076\003\000\002\076\003\000\002" +
    "\033\004\000\002\033\003\000\002\077\006\000\002\034" +
    "\006\000\002\022\007\000\002\040\003\000\002\040\005" +
    "\000\002\023\006\000\002\024\011\000\002\041\004\000" +
    "\002\041\002\000\002\044\003\000\002\044\005\000\002" +
    "\050\005\000\002\050\005\000\002\042\003\000\002\042" +
    "\005\000\002\054\003\000\002\054\002\000\002\045\003" +
    "\000\002\045\005\000\002\025\014\000\002\026\003\000" +
    "\002\125\005\000\002\106\003\000\002\106\005\000\002" +
    "\106\005\000\002\027\012\000\002\066\005\000\002\066" +
    "\005\000\002\066\003\000\002\075\005\000\002\075\005" +
    "\000\002\075\003\000\002\115\003\000\002\115\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\065\012\001\002\000\004\002\011" +
    "\001\002\000\006\002\uffff\004\005\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002\000\004\054\013" +
    "\001\002\000\014\011\uffd7\047\015\050\uffd7\051\uffd7\055" +
    "\uffd7\001\002\000\012\011\uffd5\050\uffd5\051\026\055\uffd5" +
    "\001\002\000\004\065\021\001\002\000\014\011\uffd8\047" +
    "\015\050\uffd8\051\uffd8\055\uffd8\001\002\000\014\011\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\055\uffd3\001\002\000\014\011" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\055\uffd4\001\002\000\004" +
    "\062\022\001\002\000\014\011\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\055\uffd2\001\002\000\012\011\uffd6\050\uffd6\051\026" +
    "\055\uffd6\001\002\000\010\011\uffcd\050\067\055\uffd9\001" +
    "\002\000\072\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\020\uffb5\021\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\050\uffb5\051\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\065\uffb5\074\uffb5\001\002\000\012\033\031" +
    "\035\027\036\033\037\030\001\002\000\010\052\uff95\053" +
    "\uff95\065\uff95\001\002\000\010\052\uff92\053\uff92\065\uff92" +
    "\001\002\000\010\052\uff93\053\uff93\065\uff93\001\002\000" +
    "\004\065\035\001\002\000\010\052\uff94\053\uff94\065\uff94" +
    "\001\002\000\006\061\uffb2\062\uffb2\001\002\000\010\041" +
    "\042\061\uffb0\062\uffb0\001\002\000\006\061\037\062\040" +
    "\001\002\000\004\065\035\001\002\000\072\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\020\uffb3\021\uffb3\024\uffb3\025\uffb3\026\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\050\uffb3\051\uffb3\055\uffb3\056\uffb3\057\uffb3\065\uffb3\074" +
    "\uffb3\001\002\000\006\061\uffb1\062\uffb1\001\002\000\012" +
    "\056\046\060\047\064\043\065\044\001\002\000\022\040" +
    "\uffbc\045\uffbc\055\uffbc\057\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\067\uffbc\001\002\000\022\040\uffba\045\uffba\055\uffba\057" +
    "\uffba\061\uffba\062\uffba\063\uffba\067\uffba\001\002\000\006" +
    "\061\uffaf\062\uffaf\001\002\000\006\060\054\065\050\001" +
    "\002\000\022\040\uffbb\045\uffbb\055\uffbb\057\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\067\uffbb\001\002\000\014\057\uff6b\066" +
    "\uff6b\067\uff6b\070\uff6b\071\uff6b\001\002\000\014\057\uff6f" +
    "\066\uff6f\067\uff6f\070\062\071\061\001\002\000\014\057" +
    "\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\001\002\000\010" +
    "\057\056\066\057\067\055\001\002\000\014\057\uff6a\066" +
    "\uff6a\067\uff6a\070\uff6a\071\uff6a\001\002\000\006\060\054" +
    "\065\050\001\002\000\022\040\uffb9\045\uffb9\055\uffb9\057" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\067\uffb9\001\002\000\006" +
    "\060\054\065\050\001\002\000\014\057\uff70\066\uff70\067" +
    "\uff70\070\062\071\061\001\002\000\006\060\054\065\050" +
    "\001\002\000\006\060\054\065\050\001\002\000\014\057" +
    "\uff6e\066\uff6e\067\uff6e\070\uff6e\071\uff6e\001\002\000\014" +
    "\057\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d\001\002\000" +
    "\014\057\uff71\066\uff71\067\uff71\070\062\071\061\001\002" +
    "\000\004\055\u013a\001\002\000\014\005\uffce\011\uffce\033" +
    "\uffce\034\uffce\035\uffce\001\002\000\010\011\uffcd\050\067" +
    "\055\uffda\001\002\000\004\011\073\001\002\000\010\011" +
    "\uffd0\050\uffd0\055\uffd0\001\002\000\004\065\074\001\002" +
    "\000\004\054\075\001\002\000\026\005\uffcd\006\104\007" +
    "\101\010\103\033\uffcd\034\uffcd\035\uffcd\050\067\051\026" +
    "\055\uffc7\001\002\000\026\005\uffcd\006\104\007\101\010" +
    "\103\033\uffcd\034\uffcd\035\uffcd\050\067\051\026\055\uffc7" +
    "\001\002\000\026\005\uffc3\006\uffc3\007\uffc3\010\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\050\uffc3\051\uffc3\055\uffc3\001\002" +
    "\000\026\005\uffc5\006\uffc5\007\uffc5\010\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\050\uffc5\051\uffc5\055\uffc5\001\002\000\004" +
    "\065\u0134\001\002\000\026\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\050\uffc4\051\uffc4\055\uffc4" +
    "\001\002\000\004\065\u0132\001\002\000\004\065\u012d\001" +
    "\002\000\026\005\uffcd\006\104\007\101\010\103\033\uffcd" +
    "\034\uffcd\035\uffcd\050\067\051\026\055\uffc7\001\002\000" +
    "\012\005\124\033\121\034\122\035\120\001\002\000\026" +
    "\005\uffcd\006\104\007\101\010\103\033\uffcd\034\uffcd\035" +
    "\uffcd\050\067\051\026\055\uffc7\001\002\000\026\005\uffcd" +
    "\006\104\007\101\010\103\033\uffcd\034\uffcd\035\uffcd\050" +
    "\067\051\026\055\uffc7\001\002\000\004\055\114\001\002" +
    "\000\026\005\uffcd\006\104\007\101\010\103\033\uffcd\034" +
    "\uffcd\035\uffcd\050\067\051\026\055\uffc7\001\002\000\004" +
    "\055\uffc8\001\002\000\010\011\uffcf\050\uffcf\055\uffcf\001" +
    "\002\000\004\055\uffc9\001\002\000\026\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\033\uffc6\034\uffc6\035\uffc6\050\uffc6\051" +
    "\uffc6\055\uffc6\001\002\000\004\055\uffca\001\002\000\004" +
    "\005\uffbe\001\002\000\004\005\uffc0\001\002\000\004\005" +
    "\uffbf\001\002\000\004\005\u0124\001\002\000\004\065\125" +
    "\001\002\000\004\056\126\001\002\000\014\033\031\035" +
    "\027\036\033\037\030\057\uffe2\001\002\000\004\057\136" +
    "\001\002\000\006\057\uffe3\061\134\001\002\000\006\057" +
    "\uffe1\061\uffe1\001\002\000\004\065\133\001\002\000\006" +
    "\057\uffdf\061\uffdf\001\002\000\012\033\031\035\027\036" +
    "\033\037\030\001\002\000\006\057\uffe0\061\uffe0\001\002" +
    "\000\004\054\140\001\002\000\026\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\033\uffc2\034\uffc2\035\uffc2\050\uffc2\051\uffc2" +
    "\055\uffc2\001\002\000\050\007\101\012\166\013\143\014" +
    "\161\015\144\020\175\021\172\024\145\025\157\026\147" +
    "\031\204\033\031\035\027\036\033\037\030\051\026\056" +
    "\200\065\167\074\203\001\002\000\056\007\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\020\ufff5\021\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\051\ufff5\055\ufff5\056\ufff5\057\ufff5\065\ufff5\074" +
    "\ufff5\001\002\000\056\007\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\020\uffee\021\uffee\024\uffee\025\uffee\026\uffee\031" +
    "\uffee\032\uffee\033\uffee\035\uffee\036\uffee\037\uffee\051\uffee" +
    "\055\uffee\056\uffee\057\uffee\065\uffee\074\uffee\001\002\000" +
    "\004\056\u011b\001\002\000\004\056\u0118\001\002\000\004" +
    "\056\u0111\001\002\000\006\016\377\017\375\001\002\000" +
    "\004\056\277\001\002\000\056\007\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\020\ufff6\021\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\051\ufff6\055\ufff6\056\ufff6\057\ufff6\065\ufff6\074\ufff6\001" +
    "\002\000\056\007\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\020\ufff0\021\ufff0\024\ufff0\025\ufff0\026\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\035\ufff0\036\ufff0\037\ufff0\051\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\065\ufff0\074\ufff0\001\002\000\056\007" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\020\uffe9\021\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\031\uffe9\032\uffe9\033\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\051\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\065\uffe9\074\uffe9\001\002\000\004\055\370\001\002\000" +
    "\056\007\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\020\ufffa" +
    "\021\ufffa\024\ufffa\025\ufffa\026\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\051\ufffa\055\ufffa\056\ufffa" +
    "\057\ufffa\065\ufffa\074\ufffa\001\002\000\056\007\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\020\uffef\021\uffef\024\uffef" +
    "\025\uffef\026\uffef\031\uffef\032\uffef\033\uffef\035\uffef\036" +
    "\uffef\037\uffef\051\uffef\055\uffef\056\uffef\057\uffef\065\uffef" +
    "\074\uffef\001\002\000\056\007\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\020\uffed\021\uffed\024\uffed\025\uffed\026\uffed" +
    "\031\uffed\032\uffed\033\uffed\035\uffed\036\uffed\037\uffed\051" +
    "\uffed\055\uffed\056\uffed\057\uffed\065\uffed\074\uffed\001\002" +
    "\000\004\056\365\001\002\000\062\007\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\015\uff9f\020\uff9f\021\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\353\031\uff9f\032\uff9f\033\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\051\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\065\uff9f\074\uff9f\001\002\000\004\056\277\001\002\000" +
    "\056\007\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\020\ufff9" +
    "\021\ufff9\024\ufff9\025\ufff9\026\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\051\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\065\ufff9\074\ufff9\001\002\000\056\007\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\020\uffeb\021\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\051\uffeb\055\uffeb\056\uffeb\057\uffeb\065\uffeb" +
    "\074\uffeb\001\002\000\056\007\uff77\012\uff77\013\uff77\014" +
    "\uff77\015\uff77\020\uff77\021\uff77\024\uff77\025\uff77\026\uff77" +
    "\031\uff77\032\uff77\033\uff77\035\uff77\036\uff77\037\uff77\051" +
    "\uff77\055\uff77\056\uff77\057\uff77\065\uff77\074\uff77\001\002" +
    "\000\056\007\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\020" +
    "\ufff7\021\ufff7\024\ufff7\025\ufff7\026\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\035\ufff7\036\ufff7\037\ufff7\051\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\065\ufff7\074\ufff7\001\002\000\004\052\337" +
    "\001\002\000\004\041\247\001\002\000\056\007\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\020\uffea\021\uffea\024\uffea" +
    "\025\uffea\026\uffea\031\uffea\032\uffea\033\uffea\035\uffea\036" +
    "\uffea\037\uffea\051\uffea\055\uffea\056\uffea\057\uffea\065\uffea" +
    "\074\uffea\001\002\000\054\007\101\012\166\013\143\014" +
    "\161\015\144\020\175\021\172\024\145\025\157\026\147" +
    "\031\204\032\ufffb\033\031\035\027\036\033\037\030\051" +
    "\026\055\ufffb\056\200\065\167\074\203\001\002\000\004" +
    "\054\315\001\002\000\056\007\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\020\ufff8\021\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8\051" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\065\ufff8\074\ufff8\001\002" +
    "\000\056\007\uffec\012\uffec\013\uffec\014\uffec\015\uffec\020" +
    "\uffec\021\uffec\024\uffec\025\uffec\026\uffec\031\uffec\032\uffec" +
    "\033\uffec\035\uffec\036\uffec\037\uffec\051\uffec\055\uffec\056" +
    "\uffec\057\uffec\065\uffec\074\uffec\001\002\000\004\056\305" +
    "\001\002\000\056\007\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\020\ufff4\021\ufff4\024\ufff4\025\ufff4\026\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\035\ufff4\036\ufff4\037\ufff4\051\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\065\ufff4\074\ufff4\001\002\000\056" +
    "\007\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2\021" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\051\026\055\ufff2\056\ufff2\057" +
    "\ufff2\065\ufff2\074\ufff2\001\002\000\012\033\031\035\027" +
    "\036\033\037\030\001\002\000\056\007\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\020\ufff3\021\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\031\ufff3\032\ufff3\033\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\051\ufff3\055\ufff3\056\ufff3\057\ufff3\065\ufff3\074\ufff3" +
    "\001\002\000\056\007\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\020\ufff1\021\ufff1\024\ufff1\025\ufff1\026\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1\051\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\065\ufff1\074\ufff1\001\002\000\004" +
    "\056\277\001\002\000\012\056\046\060\047\064\043\065" +
    "\044\001\002\000\004\042\237\001\002\000\004\052\207" +
    "\001\002\000\006\053\uff7b\060\212\001\002\000\006\053" +
    "\uff7c\061\235\001\002\000\004\053\213\001\002\000\006" +
    "\053\uff7a\061\uff7a\001\002\000\004\065\214\001\002\000" +
    "\006\041\216\062\uff83\001\002\000\004\062\234\001\002" +
    "\000\006\052\217\054\221\001\002\000\006\052\217\054" +
    "\221\001\002\000\010\053\uff82\061\uff82\062\uff82\001\002" +
    "\000\012\056\046\060\047\064\043\065\044\001\002\000" +
    "\006\061\223\062\uff84\001\002\000\006\052\217\054\221" +
    "\001\002\000\010\053\uff81\061\uff81\062\uff81\001\002\000" +
    "\006\055\uff7e\061\uff7e\001\002\000\006\055\230\061\227" +
    "\001\002\000\012\056\046\060\047\064\043\065\044\001" +
    "\002\000\010\053\uff7f\061\uff7f\062\uff7f\001\002\000\006" +
    "\055\uff7d\061\uff7d\001\002\000\006\053\233\061\223\001" +
    "\002\000\010\053\uff80\061\uff80\062\uff80\001\002\000\056" +
    "\007\uff85\012\uff85\013\uff85\014\uff85\015\uff85\020\uff85\021" +
    "\uff85\024\uff85\025\uff85\026\uff85\031\uff85\032\uff85\033\uff85" +
    "\035\uff85\036\uff85\037\uff85\051\uff85\055\uff85\056\uff85\057" +
    "\uff85\065\uff85\074\uff85\001\002\000\004\060\236\001\002" +
    "\000\006\053\uff79\061\uff79\001\002\000\006\054\140\056" +
    "\241\001\002\000\056\007\uff75\012\uff75\013\uff75\014\uff75" +
    "\015\uff75\020\uff75\021\uff75\024\uff75\025\uff75\026\uff75\031" +
    "\uff75\032\uff75\033\uff75\035\uff75\036\uff75\037\uff75\051\uff75" +
    "\055\uff75\056\uff75\057\uff75\065\uff75\074\uff75\001\002\000" +
    "\052\007\101\012\166\013\143\014\161\015\144\020\175" +
    "\021\172\024\145\025\157\026\147\031\204\033\031\035" +
    "\027\036\033\037\030\051\026\056\200\060\054\065\244" +
    "\074\203\001\002\000\056\007\uff76\012\uff76\013\uff76\014" +
    "\uff76\015\uff76\020\uff76\021\uff76\024\uff76\025\uff76\026\uff76" +
    "\031\uff76\032\uff76\033\uff76\035\uff76\036\uff76\037\uff76\051" +
    "\uff76\055\uff76\056\uff76\057\uff76\065\uff76\074\uff76\001\002" +
    "\000\010\057\273\066\057\067\055\001\002\000\016\041" +
    "\247\057\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\001\002" +
    "\000\004\057\246\001\002\000\056\007\uff74\012\uff74\013" +
    "\uff74\014\uff74\015\uff74\020\uff74\021\uff74\024\uff74\025\uff74" +
    "\026\uff74\031\uff74\032\uff74\033\uff74\035\uff74\036\uff74\037" +
    "\uff74\051\uff74\055\uff74\056\uff74\057\uff74\065\uff74\074\uff74" +
    "\001\002\000\012\056\252\060\047\064\043\065\044\001" +
    "\002\000\004\044\266\001\002\000\004\062\265\001\002" +
    "\000\012\056\046\060\255\064\043\065\256\001\002\000" +
    "\004\040\263\001\002\000\004\057\262\001\002\000\016" +
    "\040\uffbb\057\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a\001" +
    "\002\000\016\040\uffba\057\uff6b\066\uff6b\067\uff6b\070\uff6b" +
    "\071\uff6b\001\002\000\006\045\260\057\uffe6\001\002\000" +
    "\012\056\046\060\047\064\043\065\044\001\002\000\004" +
    "\057\uffe7\001\002\000\010\044\uffe8\054\uffe8\063\uffe8\001" +
    "\002\000\012\056\046\060\047\064\043\065\044\001\002" +
    "\000\006\045\uffe5\057\uffe5\001\002\000\056\007\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\020\uffae\021\uffae\024\uffae" +
    "\025\uffae\026\uffae\031\uffae\032\uffae\033\uffae\035\uffae\036" +
    "\uffae\037\uffae\051\uffae\055\uffae\056\uffae\057\uffae\065\uffae" +
    "\074\uffae\001\002\000\012\056\046\060\047\064\043\065" +
    "\044\001\002\000\004\063\270\001\002\000\012\056\046" +
    "\060\047\064\043\065\044\001\002\000\004\062\272\001" +
    "\002\000\056\007\uff72\012\uff72\013\uff72\014\uff72\015\uff72" +
    "\020\uff72\021\uff72\024\uff72\025\uff72\026\uff72\031\uff72\032" +
    "\uff72\033\uff72\035\uff72\036\uff72\037\uff72\051\uff72\055\uff72" +
    "\056\uff72\057\uff72\065\uff72\074\uff72\001\002\000\056\007" +
    "\uff73\012\uff73\013\uff73\014\uff73\015\uff73\020\uff73\021\uff73" +
    "\024\uff73\025\uff73\026\uff73\031\uff73\032\uff73\033\uff73\035" +
    "\uff73\036\uff73\037\uff73\051\uff73\055\uff73\056\uff73\057\uff73" +
    "\065\uff73\074\uff73\001\002\000\004\062\275\001\002\000" +
    "\056\007\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\020\uffbd" +
    "\021\uffbd\024\uffbd\025\uffbd\026\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\051\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\065\uffbd\074\uffbd\001\002\000\004\063\300\001" +
    "\002\000\012\056\046\060\047\064\043\065\044\001\002" +
    "\000\004\054\140\001\002\000\056\007\uff99\012\uff99\013" +
    "\uff99\014\uff99\015\uff99\020\uff99\021\uff99\024\uff99\025\uff99" +
    "\026\uff99\031\uff99\032\uff99\033\uff99\035\uff99\036\uff99\037" +
    "\uff99\051\uff99\055\uff99\056\uff99\057\uff99\065\uff99\074\uff99" +
    "\001\002\000\006\057\303\061\134\001\002\000\006\042" +
    "\uffe4\054\uffe4\001\002\000\062\007\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\020\uffb4\021\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\050\uffb4\051\uffb4\055\uffb4\056\uffb4\057\uffb4\065" +
    "\uffb4\074\uffb4\001\002\000\012\033\031\035\027\036\033" +
    "\037\030\001\002\000\004\065\307\001\002\000\004\046" +
    "\310\001\002\000\004\065\311\001\002\000\004\057\312" +
    "\001\002\000\004\063\313\001\002\000\004\054\140\001" +
    "\002\000\056\007\uff96\012\uff96\013\uff96\014\uff96\015\uff96" +
    "\020\uff96\021\uff96\024\uff96\025\uff96\026\uff96\031\uff96\032" +
    "\uff96\033\uff96\035\uff96\036\uff96\037\uff96\051\uff96\055\uff96" +
    "\056\uff96\057\uff96\065\uff96\074\uff96\001\002\000\050\007" +
    "\101\012\166\013\143\014\161\015\144\020\175\021\172" +
    "\024\145\025\157\026\147\031\204\033\031\035\027\036" +
    "\033\037\030\051\026\056\200\065\167\074\203\001\002" +
    "\000\004\055\317\001\002\000\006\022\323\023\322\001" +
    "\002\000\056\007\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\020\uff8e\021\uff8e\024\uff8e\025\uff8e\026\uff8e\031\uff8e\032" +
    "\uff8e\033\uff8e\035\uff8e\036\uff8e\037\uff8e\051\uff8e\055\uff8e" +
    "\056\uff8e\057\uff8e\065\uff8e\074\uff8e\001\002\000\056\007" +
    "\uff91\012\uff91\013\uff91\014\uff91\015\uff91\020\uff91\021\uff91" +
    "\024\uff91\025\uff91\026\uff91\031\uff91\032\uff91\033\uff91\035" +
    "\uff91\036\uff91\037\uff91\051\uff91\055\uff91\056\uff91\057\uff91" +
    "\065\uff91\074\uff91\001\002\000\004\054\333\001\002\000" +
    "\004\054\330\001\002\000\060\007\uff8f\012\uff8f\013\uff8f" +
    "\014\uff8f\015\uff8f\020\uff8f\021\uff8f\023\322\024\uff8f\025" +
    "\uff8f\026\uff8f\031\uff8f\032\uff8f\033\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\051\uff8f\055\uff8f\056\uff8f\057\uff8f\065\uff8f\074" +
    "\uff8f\001\002\000\062\007\uff8c\012\uff8c\013\uff8c\014\uff8c" +
    "\015\uff8c\020\uff8c\021\uff8c\022\323\023\uff8c\024\uff8c\025" +
    "\uff8c\026\uff8c\031\uff8c\032\uff8c\033\uff8c\035\uff8c\036\uff8c" +
    "\037\uff8c\051\uff8c\055\uff8c\056\uff8c\057\uff8c\065\uff8c\074" +
    "\uff8c\001\002\000\060\007\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\020\uff8d\021\uff8d\023\uff8d\024\uff8d\025\uff8d\026" +
    "\uff8d\031\uff8d\032\uff8d\033\uff8d\035\uff8d\036\uff8d\037\uff8d" +
    "\051\uff8d\055\uff8d\056\uff8d\057\uff8d\065\uff8d\074\uff8d\001" +
    "\002\000\056\007\uff90\012\uff90\013\uff90\014\uff90\015\uff90" +
    "\020\uff90\021\uff90\024\uff90\025\uff90\026\uff90\031\uff90\032" +
    "\uff90\033\uff90\035\uff90\036\uff90\037\uff90\051\uff90\055\uff90" +
    "\056\uff90\057\uff90\065\uff90\074\uff90\001\002\000\050\007" +
    "\101\012\166\013\143\014\161\015\144\020\175\021\172" +
    "\024\145\025\157\026\147\031\204\033\031\035\027\036" +
    "\033\037\030\051\026\056\200\065\167\074\203\001\002" +
    "\000\004\055\332\001\002\000\062\007\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\031\uff8b\032\uff8b\033\uff8b\035" +
    "\uff8b\036\uff8b\037\uff8b\051\uff8b\055\uff8b\056\uff8b\057\uff8b" +
    "\065\uff8b\074\uff8b\001\002\000\050\007\101\012\166\013" +
    "\143\014\161\015\144\020\175\021\172\024\145\025\157" +
    "\026\147\031\204\033\031\035\027\036\033\037\030\051" +
    "\026\056\200\065\167\074\203\001\002\000\004\055\335" +
    "\001\002\000\056\007\uff8a\012\uff8a\013\uff8a\014\uff8a\015" +
    "\uff8a\020\uff8a\021\uff8a\024\uff8a\025\uff8a\026\uff8a\031\uff8a" +
    "\032\uff8a\033\uff8a\035\uff8a\036\uff8a\037\uff8a\051\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\065\uff8a\074\uff8a\001\002\000\010" +
    "\031\ufffc\032\ufffc\055\ufffc\001\002\000\012\033\031\035" +
    "\027\036\033\037\030\001\002\000\004\053\341\001\002" +
    "\000\004\065\342\001\002\000\004\041\343\001\002\000" +
    "\004\065\344\001\002\000\004\042\345\001\002\000\006" +
    "\052\217\054\221\001\002\000\006\061\223\062\347\001" +
    "\002\000\056\007\uff78\012\uff78\013\uff78\014\uff78\015\uff78" +
    "\020\uff78\021\uff78\024\uff78\025\uff78\026\uff78\031\uff78\032" +
    "\uff78\033\uff78\035\uff78\036\uff78\037\uff78\051\uff78\055\uff78" +
    "\056\uff78\057\uff78\065\uff78\074\uff78\001\002\000\004\063" +
    "\351\001\002\000\004\054\140\001\002\000\056\007\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\015\uff9a\020\uff9a\021\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\031\uff9a\032\uff9a\033\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\051\uff9a\055\uff9a\056\uff9a\057\uff9a\065" +
    "\uff9a\074\uff9a\001\002\000\004\056\277\001\002\000\060" +
    "\007\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\020\uffa1\021" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\360\031\uffa1\032\uffa1" +
    "\033\uffa1\035\uffa1\036\uffa1\037\uffa1\051\uffa1\055\uffa1\056" +
    "\uffa1\057\uffa1\065\uffa1\074\uffa1\001\002\000\062\007\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\020\uff9f\021\uff9f\024" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\353\031\uff9f\032\uff9f" +
    "\033\uff9f\035\uff9f\036\uff9f\037\uff9f\051\uff9f\055\uff9f\056" +
    "\uff9f\057\uff9f\065\uff9f\074\uff9f\001\002\000\060\007\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\020\uff9e\021\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\035\uff9e\036\uff9e\037\uff9e\051\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\065\uff9e\074\uff9e\001\002\000\056\007\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\020\uffa0\021\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\031\uffa0\032\uffa0\033\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\051\uffa0\055\uffa0\056\uffa0\057\uffa0\065\uffa0\074" +
    "\uffa0\001\002\000\004\054\140\001\002\000\056\007\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\020\uffa2\021\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\051\uffa2\055\uffa2\056\uffa2\057\uffa2\065" +
    "\uffa2\074\uffa2\001\002\000\056\007\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\015\uff9b\020\uff9b\021\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\051\uff9b\055\uff9b\056\uff9b\057\uff9b\065\uff9b\074\uff9b\001" +
    "\002\000\004\054\140\001\002\000\062\007\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\020\uff9c\021\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\051\uff9c\055\uff9c\056\uff9c\057" +
    "\uff9c\065\uff9c\074\uff9c\001\002\000\004\057\366\001\002" +
    "\000\004\062\367\001\002\000\056\007\uff86\012\uff86\013" +
    "\uff86\014\uff86\015\uff86\020\uff86\021\uff86\024\uff86\025\uff86" +
    "\026\uff86\031\uff86\032\uff86\033\uff86\035\uff86\036\uff86\037" +
    "\uff86\051\uff86\055\uff86\056\uff86\057\uff86\065\uff86\074\uff86" +
    "\001\002\000\074\005\ufffd\006\ufffd\007\ufffd\010\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd\021\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\050\ufffd\051\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\065\ufffd\074\ufffd\001\002\000" +
    "\004\054\140\001\002\000\062\007\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\020\uff9d\021\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\051\uff9d\055\uff9d\056\uff9d\057\uff9d\065" +
    "\uff9d\074\uff9d\001\002\000\056\007\uffac\012\uffac\013\uffac" +
    "\014\uffac\015\uffac\020\uffac\021\uffac\024\uffac\025\uffac\026" +
    "\uffac\031\uffac\032\uffac\033\uffac\035\uffac\036\uffac\037\uffac" +
    "\051\uffac\055\uffac\056\uffac\057\uffac\065\uffac\074\uffac\001" +
    "\002\000\060\007\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\017\375\020\uffab\021\uffab\024\uffab\025\uffab\026\uffab\031" +
    "\uffab\032\uffab\033\uffab\035\uffab\036\uffab\037\uffab\051\uffab" +
    "\055\uffab\056\uffab\057\uffab\065\uffab\074\uffab\001\002\000" +
    "\004\063\u010b\001\002\000\062\007\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\377\017\uffa8\020\uffa8\021\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\031\uffa8\032\uffa8\033\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\051\uffa8\055\uffa8\056\uffa8\057\uffa8\065" +
    "\uffa8\074\uffa8\001\002\000\012\056\046\060\047\064\043" +
    "\065\044\001\002\000\004\063\u0101\001\002\000\004\054" +
    "\u0102\001\002\000\050\007\101\012\166\013\143\014\161" +
    "\015\144\020\175\021\172\024\145\025\157\026\147\031" +
    "\204\033\031\035\027\036\033\037\030\051\026\056\200" +
    "\065\167\074\203\001\002\000\006\031\204\032\u0106\001" +
    "\002\000\004\055\u0109\001\002\000\004\055\uffa5\001\002" +
    "\000\004\062\u0108\001\002\000\004\055\uffa6\001\002\000" +
    "\004\055\uffa3\001\002\000\062\007\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\031\uffa7\032\uffa7\033\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\051\uffa7\055\uffa7\056\uffa7\057\uffa7\065" +
    "\uffa7\074\uffa7\001\002\000\060\007\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\017\uffa9\020\uffa9\021\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\031\uffa9\032\uffa9\033\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\051\uffa9\055\uffa9\056\uffa9\057\uffa9\065\uffa9\074" +
    "\uffa9\001\002\000\004\054\u010c\001\002\000\050\007\101" +
    "\012\166\013\143\014\161\015\144\020\175\021\172\024" +
    "\145\025\157\026\147\031\204\033\031\035\027\036\033" +
    "\037\030\051\026\056\200\065\167\074\203\001\002\000" +
    "\006\031\204\032\u0106\001\002\000\004\055\u010f\001\002" +
    "\000\056\007\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\020" +
    "\uffa4\021\uffa4\024\uffa4\025\uffa4\026\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\035\uffa4\036\uffa4\037\uffa4\051\uffa4\055\uffa4\056" +
    "\uffa4\057\uffa4\065\uffa4\074\uffa4\001\002\000\056\007\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\020\uffad\021\uffad\024" +
    "\uffad\025\uffad\026\uffad\031\uffad\032\uffad\033\uffad\035\uffad" +
    "\036\uffad\037\uffad\051\uffad\055\uffad\056\uffad\057\uffad\065" +
    "\uffad\074\uffad\001\002\000\012\056\046\060\047\064\043" +
    "\065\044\001\002\000\006\057\u0115\067\u0114\001\002\000" +
    "\006\057\uff88\067\uff88\001\002\000\012\056\046\060\047" +
    "\064\043\065\044\001\002\000\004\062\u0116\001\002\000" +
    "\056\007\uff89\012\uff89\013\uff89\014\uff89\015\uff89\020\uff89" +
    "\021\uff89\024\uff89\025\uff89\026\uff89\031\uff89\032\uff89\033" +
    "\uff89\035\uff89\036\uff89\037\uff89\051\uff89\055\uff89\056\uff89" +
    "\057\uff89\065\uff89\074\uff89\001\002\000\006\057\uff87\067" +
    "\uff87\001\002\000\012\056\046\060\047\064\043\065\044" +
    "\001\002\000\004\057\u011a\001\002\000\006\016\uffaa\017" +
    "\uffaa\001\002\000\004\051\026\001\002\000\004\065\u011d" +
    "\001\002\000\004\043\u0122\001\002\000\012\056\046\060" +
    "\047\064\043\065\044\001\002\000\004\057\u0120\001\002" +
    "\000\004\054\140\001\002\000\056\007\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\020\uff98\021\uff98\024\uff98\025\uff98" +
    "\026\uff98\031\uff98\032\uff98\033\uff98\035\uff98\036\uff98\037" +
    "\uff98\051\uff98\055\uff98\056\uff98\057\uff98\065\uff98\074\uff98" +
    "\001\002\000\004\062\u0123\001\002\000\012\056\uff97\060" +
    "\uff97\064\uff97\065\uff97\001\002\000\004\065\u0125\001\002" +
    "\000\004\056\200\001\002\000\004\054\u0127\001\002\000" +
    "\050\007\101\012\166\013\143\014\161\015\144\020\175" +
    "\021\172\024\145\025\157\026\147\031\204\033\031\035" +
    "\027\036\033\037\030\051\026\056\200\065\167\074\203" +
    "\001\002\000\004\031\204\001\002\000\004\055\u012a\001" +
    "\002\000\026\005\uffc1\006\uffc1\007\uffc1\010\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\050\uffc1\051\uffc1\055\uffc1\001\002\000" +
    "\026\005\uffb5\006\uffb5\007\uffb5\010\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\050\uffb5\051\uffb5\055\uffb5\001\002\000\004\055" +
    "\uffcc\001\002\000\004\054\u012f\001\002\000\026\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\033\uffb8\034\uffb8\035\uffb8\050" +
    "\uffb8\051\uffb8\055\uffb8\001\002\000\004\051\026\001\002" +
    "\000\006\051\026\055\u0131\001\002\000\026\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\033\uffde\034\uffde\035\uffde\050\uffde" +
    "\051\uffde\055\uffde\001\002\000\004\054\u012f\001\002\000" +
    "\026\005\uffb6\006\uffb6\007\uffb6\010\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\050\uffb6\051\uffb6\055\uffb6\001\002\000\004\041" +
    "\u0135\001\002\000\006\052\217\054\221\001\002\000\004" +
    "\062\u0137\001\002\000\070\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\020\uffb7\021\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\050\uffb7\051\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\065\uffb7\074\uffb7\001\002\000\004\055" +
    "\uffcb\001\002\000\010\011\uffd1\050\uffd1\055\uffd1\001\002" +
    "\000\006\002\uffdb\004\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\010\002\006\003\005\071\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\006\003\007\071\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\015\051\013" +
    "\116\016\001\001\000\010\013\022\052\023\072\024\001" +
    "\001\000\002\001\001\000\004\116\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\303\001\001\000\012\006\067\046\070" +
    "\053\065\117\071\001\001\000\002\001\001\000\004\043" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\122\035\123\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\123\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\111\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\066\052\075\050\115" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\075\064\115\051\001\001\000\002\001\001" +
    "\000\006\075\057\115\051\001\001\000\002\001\001\000" +
    "\004\115\063\001\001\000\004\115\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\070\117\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\106\010\107\011\075\012\111" +
    "\013\104\046\105\047\110\056\101\057\076\072\024\120" +
    "\077\001\001\000\030\007\106\010\107\011\075\012\111" +
    "\013\104\046\105\047\u0137\056\101\057\076\072\024\120" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\106\010\107\011\075\012\111\013\104" +
    "\046\105\047\u012b\056\101\057\076\072\u012a\120\077\001" +
    "\001\000\004\110\122\001\001\000\030\007\106\010\107" +
    "\011\075\012\111\013\104\046\105\047\116\056\101\057" +
    "\076\072\024\120\115\001\001\000\030\007\106\010\107" +
    "\011\075\012\111\013\104\046\105\047\114\056\101\057" +
    "\076\072\024\120\077\001\001\000\002\001\001\000\030" +
    "\007\106\010\107\011\075\012\111\013\104\046\105\047" +
    "\112\056\101\057\076\072\024\120\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\043\131\065\126\073\130\107\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\131" +
    "\073\134\001\001\000\002\001\001\000\004\061\136\001" +
    "\001\000\002\001\001\000\066\011\151\013\176\014\153" +
    "\015\161\016\172\017\164\020\147\021\140\022\175\023" +
    "\200\024\201\025\150\026\154\027\141\030\167\035\155" +
    "\036\162\037\173\043\205\062\204\067\152\072\024\074" +
    "\170\103\145\112\157\125\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\373\032\372\070\375\001\001" +
    "\000\004\063\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\060\353\101\354\001\001\000\004\063\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\011\151\013\176\014\153\015\161\016" +
    "\172\017\164\020\147\021\140\022\175\023\200\024\201" +
    "\025\150\026\154\027\141\030\167\035\155\036\162\037" +
    "\173\043\205\062\204\067\335\072\024\074\170\103\145" +
    "\112\157\125\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\303\001\001\000\010\043\131\073\130\107" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\275\001\001\000\004\111\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\207\054\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\214\001\001\000\002\001\001" +
    "\000\006\044\221\050\217\001\001\000\006\044\231\050" +
    "\217\001\001\000\002\001\001\000\006\042\225\111\224" +
    "\001\001\000\002\001\001\000\004\050\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\061\237\106\241\001" +
    "\001\000\002\001\001\000\072\011\151\013\176\014\153" +
    "\015\161\016\172\017\164\020\147\021\140\022\175\023" +
    "\200\024\201\025\150\026\154\027\141\030\167\035\155" +
    "\036\162\037\173\043\205\062\204\066\242\072\024\074" +
    "\244\075\050\103\145\112\157\115\051\125\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\063\247\111\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\064" +
    "\253\066\052\075\050\100\256\111\252\115\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\064\260\100\256" +
    "\111\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\266\001\001\000\002\001\001\000\004\111" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\064\253\100\256\111\252\001\001\000\004" +
    "\061\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\313\001\001" +
    "\000\002\001\001\000\066\011\151\013\176\014\153\015" +
    "\161\016\172\017\164\020\147\021\140\022\175\023\200" +
    "\024\201\025\150\026\154\027\141\030\167\035\155\036" +
    "\162\037\173\043\205\062\204\067\315\072\024\074\170" +
    "\103\145\112\157\125\163\001\001\000\002\001\001\000" +
    "\012\033\323\034\317\076\320\077\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\326\001\001\000\006\033\325\077\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\011" +
    "\151\013\176\014\153\015\161\016\172\017\164\020\147" +
    "\021\140\022\175\023\200\024\201\025\150\026\154\027" +
    "\141\030\167\035\155\036\162\037\173\043\205\062\204" +
    "\067\330\072\024\074\170\103\145\112\157\125\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\011\151" +
    "\013\176\014\153\015\161\016\172\017\164\020\147\021" +
    "\140\022\175\023\200\024\201\025\150\026\154\027\141" +
    "\030\167\035\155\036\162\037\173\043\205\062\204\067" +
    "\333\072\024\074\170\103\145\112\157\125\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\345\050\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\351\001\001\000" +
    "\002\001\001\000\004\063\362\001\001\000\006\102\360" +
    "\114\356\001\001\000\006\060\355\101\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u010f" +
    "\001\001\000\002\001\001\000\006\031\u0109\070\375\001" +
    "\001\000\004\111\377\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\011\151\013\176\014\153\015\161\016" +
    "\172\017\164\020\147\021\140\022\175\023\200\024\201" +
    "\025\150\026\154\027\141\030\167\035\155\036\162\037" +
    "\173\043\205\062\204\067\u0102\072\024\074\170\103\145" +
    "\112\157\125\163\001\001\000\010\035\u0106\104\u0104\105" +
    "\u0103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\011\151" +
    "\013\176\014\153\015\161\016\172\017\164\020\147\021" +
    "\140\022\175\023\200\024\201\025\150\026\154\027\141" +
    "\030\167\035\155\036\162\037\173\043\205\062\204\067" +
    "\u010c\072\024\074\170\103\145\112\157\125\163\001\001" +
    "\000\010\035\u0106\104\u0104\105\u010d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\u0111" +
    "\111\u0112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\111\u0118\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\u011b\001\001\000\004" +
    "\113\u011d\001\001\000\002\001\001\000\010\064\u011e\100" +
    "\256\111\252\001\001\000\002\001\001\000\004\061\u0120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u0125\001\001\000\002" +
    "\001\001\000\066\011\151\013\176\014\153\015\161\016" +
    "\172\017\164\020\147\021\140\022\175\023\200\024\201" +
    "\025\150\026\154\027\141\030\167\035\155\036\162\037" +
    "\173\043\205\062\204\067\u0127\072\024\074\170\103\145" +
    "\112\157\125\163\001\001\000\004\035\u0128\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\u012d\001\001\000\002\001\001\000" +
    "\006\013\u012f\072\024\001\001\000\004\072\303\001\001" +
    "\000\002\001\001\000\004\055\u0132\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



// Agrega esta línea al inicio del archivo .cup
    public Lexer lexer;
    private boolean sintaxiscorrecta = true;
    private List<String> errores = new ArrayList<>();

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public void syntax_error(Symbol s) {
        sintaxiscorrecta = false;
        String errorMsg = "Error de sintaxis en línea " + (s.left + 1) +
                        ", columna " + (s.right + 1) +
                        ". Token inesperado: '" + s.value + "'";
        System.err.println(errorMsg);
        errores.add(errorMsg);
        }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.sym == sym.EOF) {
                errores.add("Error inesperado al final del archivo");
                } else {
                    errores.add(message);
                }
        }
    }

    public boolean parseCode() {
        try {
            super.parse();
            if (sintaxiscorrecta) {
                System.out.println("compilación exitosa");
                return true;
                } else {
                    System.out.println(errores.size() + " errores encontrados:");
                    errores.forEach(System.out::println);
                    return false;
                }
            } catch (Exception e) {
                System.out.println("Error fatal " + e.getMessage());
                return false;
            }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicios EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicios ::= inicio inicios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicios ::= inicio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueexpresiones ::= LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueexpresiones",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= expresion expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= sis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= mientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= mientrashacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= porpuro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= porcadas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= intentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= impresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= escaneos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= declaracionarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= declaracionlistas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= lambdas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= ternarios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= rompers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= asignars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= selectors 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= enums 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloquecondiciones ::= PARENTESISABIERTO condiciones PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquecondiciones",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condiciones ::= condicion OPERADORCONLOGICO condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condiciones ::= condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= valor OPERADORRELACIONAL valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloqueparametros ::= PARENTESISABIERTO parametrolista PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueparametros",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= parametrolista 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametrolista ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametrolista ::= parametrolista COMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametro ::= tipos ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloquedeclaraciones ::= LLAVEABIERTA declaraciones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquedeclaraciones",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // espacios ::= espacios espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // espacios ::= espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // espacio ::= AGRUPACIONPRINCIPAL ID LLAVEABIERTA libreriasopcional declaracionesopcional clasesopcional LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacio",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // clasesopcional ::= clases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // clasesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // libreriasopcional ::= librerias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // libreriasopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracionesopcional ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // librerias ::= librerias libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // librerias ::= libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // libreria ::= GESTIONRECURSOS ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // clases ::= clases clase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // clases ::= clase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // clase ::= modificadoresacceso AGRUPACIONSECUNDARIA ID LLAVEABIERTA miembrosclase LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // modificadoresacceso ::= MODIFICADORACCESO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // modificadoresacceso ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // miembrosclase ::= declaraciones miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // miembrosclase ::= enums miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // miembrosclase ::= funciones miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // miembrosclase ::= estructuras miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // miembrosclase ::= interfaces miembrosclase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // miembrosclase ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcion ::= funcionesnormales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcion ::= funcionessinretorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funcionessinretorno ::= modificadoresacceso DECLARACIONFUNCION ID PARENTESISABIERTO parametros PARENTESISCERRADO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionessinretorno",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // funcionesnormales ::= modificadoresacceso tipofuncion DECLARACIONFUNCION ID bloqueparametros LLAVEABIERTA expresiones retornos LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesnormales",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipofuncion ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipofuncion ::= TIPOLOGICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipofuncion ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // retornos ::= RETORNAR valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornos",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor ::= PARENTESISABIERTO operaritmetics PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // estructuras ::= AGRUPACIONESTRUCTURA ID bloquedeclaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // enums ::= AGRUPACIONENUMERATOR ID OPERADORASIGNAMIENTO bloquevalores PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enums",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // interfaces ::= AGRUPACIONINTERFAZ ID bloquedeclaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interfaces",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracion ::= DEC tipos listadeclarar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // listadeclarar ::= declarador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclarar",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // listadeclarar ::= listadeclarar COMA declarador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclarar",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declarador ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarador",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declarador ::= ID OPERADORASIGNAMIENTO valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarador",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asignars ::= ID OPERADORASIGNAMIENTO valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignars",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // selectors ::= selector casos defectos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // selectors ::= selector defectos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // selectors ::= selector casos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // selector ::= SELECTOR PARENTESISABIERTO valor PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // casos ::= caso casos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // caso ::= CASO valor PUNTODOBLE LLAVEABIERTA expresiones retornoalto LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // retornoalto ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // retornoalto ::= alto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // defectos ::= DEFECTO PUNTODOBLE LLAVEABIERTA expresiones retornoalto LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defectos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // alto ::= PARAR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alto",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sis ::= si sinoshacer sinos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sis",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sinos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sinos ::= sino 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sinoshacer ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sinoshacer ::= sinohacer sinoshacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // si ::= SI bloquecondiciones bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sinohacer ::= SINOHACER bloquecondiciones bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinohacer",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sino ::= SINO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // mientras ::= MIENTRAS bloquecondiciones PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientras",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // mientrashacer ::= HACER bloquecondiciones PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientrashacer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // porpuro ::= POR PARENTESISABIERTO declaracion aumentodecremento condiciones PARENTESISCERRADO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porpuro",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // aumentodecremento ::= ID OPERADORDESPLAZAMIENTO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentodecremento",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // porcadas ::= PORCADA PARENTESISABIERTO tipos ID PARAMETROENTRADA ID PARENTESISCERRADO PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porcadas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipos ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipos ::= TIPOINFERIDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipos ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipos ::= TIPOCARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // intentos ::= INTENTAR LLAVEABIERTA expresiones LLAVECERRADA atraparterminar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intentos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // atraparterminar ::= atrapars terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // atraparterminar ::= atrapars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // atraparterminar ::= terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // atrapars ::= atrapar atrapars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // atrapars ::= atrapar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // atrapar ::= ATRAPAR LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapar",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // terminars ::= TERMINAR LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("terminars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // impresiones ::= IMPRIMIR PARENTESISABIERTO oraciones PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // oraciones ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // oraciones ::= oraciones MAS valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // escaneos ::= ESCANEAR PARENTESISABIERTO PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // declaracionarreglos ::= tipos CORCHETEABIERTO dimensionesopcional CORCHETECERRADO ID asignamientovariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionarreglos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // asignamientovariables ::= OPERADORASIGNAMIENTO listabloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // asignamientovariables ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // listabloques ::= bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // listabloques ::= listabloques COMA bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // bloquevalores ::= CORCHETEABIERTO listabloques CORCHETECERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // bloquevalores ::= LLAVEABIERTA valores LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // valores ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valores ::= valores COMA valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // dimensionesopcional ::= dimensiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // dimensionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // dimensiones ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // dimensiones ::= dimensiones COMA NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // declaracionlistas ::= LISTA CORCHETEABIERTO tipos CORCHETECERRADO ID OPERADORASIGNAMIENTO ID OPERADORRESULTADO listabloques PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlistas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // lambdas ::= lambdaexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdas",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lambdaexpr ::= bloqueparametros OPERADORRESULTADO cuerpolambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdaexpr",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cuerpolambda ::= bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cuerpolambda ::= PARENTESISABIERTO expresion PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // cuerpolambda ::= PARENTESISABIERTO operaritmetics PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ternarios ::= ID OPERADORASIGNAMIENTO bloquecondiciones OPERADORTERNARIO valor PUNTODOBLE valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ternarios",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // operaritmetics ::= operaritmetics MAS operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // operaritmetics ::= operaritmetics MENOS operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operaritmetics ::= operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operaritmetic ::= operaritmetic MULTI idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operaritmetic ::= operaritmetic DIV idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // operaritmetic ::= idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // idnum ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // idnum ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

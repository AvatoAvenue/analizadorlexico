
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.codigo;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\002\003\000\002\060\005\000\002\066\004" +
    "\000\002\066\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\062\005\000\002" +
    "\063\005\000\002\063\003\000\002\077\005\000\002\061" +
    "\005\000\002\064\003\000\002\064\002\000\002\106\003" +
    "\000\002\106\005\000\002\072\004\000\002\004\004\000" +
    "\002\004\003\000\002\070\011\000\002\053\003\000\002" +
    "\053\002\000\002\051\003\000\002\051\002\000\002\052" +
    "\003\000\002\052\002\000\002\005\004\000\002\005\003" +
    "\000\002\115\005\000\002\006\004\000\002\006\003\000" +
    "\002\116\010\000\002\046\003\000\002\046\002\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\002\000\002\007\004" +
    "\000\002\007\003\000\002\117\003\000\002\117\003\000" +
    "\002\056\011\000\002\055\013\000\002\107\003\000\002" +
    "\107\003\000\002\107\003\000\002\035\005\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\005" +
    "\000\002\010\007\000\002\011\010\000\002\012\007\000" +
    "\002\013\003\000\002\013\004\000\002\071\006\000\002" +
    "\121\003\000\002\121\005\000\002\122\003\000\002\122" +
    "\005\000\002\036\006\000\002\030\005\000\002\030\004" +
    "\000\002\030\004\000\002\102\006\000\002\031\004\000" +
    "\002\031\003\000\002\067\011\000\002\104\003\000\002" +
    "\104\003\000\002\032\010\000\002\103\004\000\002\014" +
    "\005\000\002\101\002\000\002\101\003\000\002\057\002" +
    "\000\002\057\004\000\002\111\005\000\002\100\005\000" +
    "\002\113\004\000\002\015\006\000\002\016\006\000\002" +
    "\017\011\000\002\112\005\000\002\020\013\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\021\007\000\002\075\004\000\002\075\003\000" +
    "\002\075\003\000\002\033\004\000\002\033\003\000\002" +
    "\076\006\000\002\034\006\000\002\022\007\000\002\040" +
    "\003\000\002\040\005\000\002\023\006\000\002\024\011" +
    "\000\002\041\004\000\002\041\002\000\002\044\003\000" +
    "\002\044\005\000\002\050\005\000\002\050\005\000\002" +
    "\042\003\000\002\042\005\000\002\054\003\000\002\054" +
    "\002\000\002\045\003\000\002\045\005\000\002\025\014" +
    "\000\002\026\004\000\002\026\004\000\002\123\005\000" +
    "\002\124\005\000\002\105\003\000\002\105\003\000\002" +
    "\027\011\000\002\065\005\000\002\065\005\000\002\065" +
    "\003\000\002\074\005\000\002\074\005\000\002\074\003" +
    "\000\002\114\003\000\002\114\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\004\004\005\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\065\012\001\002\000\004\002\011" +
    "\001\002\000\006\002\uffff\004\005\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002\000\004\054\013" +
    "\001\002\000\014\011\uffd9\047\015\050\uffd9\051\uffd9\055" +
    "\uffd9\001\002\000\012\011\uffd7\050\uffd7\051\026\055\uffd7" +
    "\001\002\000\004\065\021\001\002\000\014\011\uffda\047" +
    "\015\050\uffda\051\uffda\055\uffda\001\002\000\014\011\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\055\uffd5\001\002\000\014\011" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\055\uffd6\001\002\000\004" +
    "\062\022\001\002\000\014\011\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\055\uffd4\001\002\000\012\011\uffd8\050\uffd8\051\026" +
    "\055\uffd8\001\002\000\010\011\uffcf\050\067\055\uffdb\001" +
    "\002\000\060\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\020\uffb7\021\uffb7\024\uffb7\025\uffb7\026\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\035\uffb7\036\uffb7\037\uffb7\050\uffb7\051\uffb7" +
    "\055\uffb7\056\uffb7\062\uffb7\065\uffb7\074\uffb7\001\002\000" +
    "\012\033\031\035\027\036\033\037\030\001\002\000\010" +
    "\052\uff97\053\uff97\065\uff97\001\002\000\010\052\uff94\053" +
    "\uff94\065\uff94\001\002\000\010\052\uff95\053\uff95\065\uff95" +
    "\001\002\000\004\065\035\001\002\000\010\052\uff96\053" +
    "\uff96\065\uff96\001\002\000\006\061\uffb4\062\uffb4\001\002" +
    "\000\010\041\042\061\uffb2\062\uffb2\001\002\000\006\061" +
    "\037\062\040\001\002\000\004\065\035\001\002\000\060" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\020\uffb5\021" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\050\uffb5\051\uffb5\055\uffb5\056" +
    "\uffb5\062\uffb5\065\uffb5\074\uffb5\001\002\000\006\061\uffb3" +
    "\062\uffb3\001\002\000\012\056\046\060\047\064\044\065" +
    "\043\001\002\000\024\040\uffbc\044\uffbc\045\uffbc\055\uffbc" +
    "\057\uffbc\061\uffbc\062\uffbc\063\uffbc\067\uffbc\001\002\000" +
    "\024\040\uffbe\044\uffbe\045\uffbe\055\uffbe\057\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\067\uffbe\001\002\000\006\061\uffb1\062" +
    "\uffb1\001\002\000\006\060\054\065\050\001\002\000\024" +
    "\040\uffbd\044\uffbd\045\uffbd\055\uffbd\057\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\067\uffbd\001\002\000\014\057\uff6c\066\uff6c" +
    "\067\uff6c\070\uff6c\071\uff6c\001\002\000\014\057\uff6d\066" +
    "\uff6d\067\uff6d\070\uff6d\071\uff6d\001\002\000\014\057\uff70" +
    "\066\uff70\067\uff70\070\062\071\061\001\002\000\010\057" +
    "\056\066\057\067\055\001\002\000\014\057\uff6b\066\uff6b" +
    "\067\uff6b\070\uff6b\071\uff6b\001\002\000\006\060\054\065" +
    "\050\001\002\000\024\040\uffbb\044\uffbb\045\uffbb\055\uffbb" +
    "\057\uffbb\061\uffbb\062\uffbb\063\uffbb\067\uffbb\001\002\000" +
    "\006\060\054\065\050\001\002\000\014\057\uff71\066\uff71" +
    "\067\uff71\070\062\071\061\001\002\000\006\060\054\065" +
    "\050\001\002\000\006\060\054\065\050\001\002\000\014" +
    "\057\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\001\002\000" +
    "\014\057\uff6e\066\uff6e\067\uff6e\070\uff6e\071\uff6e\001\002" +
    "\000\014\057\uff72\066\uff72\067\uff72\070\062\071\061\001" +
    "\002\000\004\055\u0132\001\002\000\014\005\uffd0\011\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\001\002\000\010\011\uffcf\050" +
    "\067\055\uffdc\001\002\000\004\011\073\001\002\000\010" +
    "\011\uffd2\050\uffd2\055\uffd2\001\002\000\004\065\074\001" +
    "\002\000\004\054\075\001\002\000\026\005\uffcf\006\104" +
    "\007\103\010\102\033\uffcf\034\uffcf\035\uffcf\050\067\051" +
    "\026\055\uffc9\001\002\000\004\055\uffcd\001\002\000\016" +
    "\005\uffc5\033\uffc5\034\uffc5\035\uffc5\050\uffc5\055\uffc5\001" +
    "\002\000\016\005\uffc7\033\uffc7\034\uffc7\035\uffc7\050\uffc7" +
    "\055\uffc7\001\002\000\016\005\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\050\uffc6\055\uffc6\001\002\000\004\065\u012d\001\002" +
    "\000\004\065\u0128\001\002\000\004\065\u0124\001\002\000" +
    "\006\051\026\055\uffce\001\002\000\012\005\121\033\116" +
    "\034\117\035\115\001\002\000\016\005\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\050\067\055\uffcc\001\002\000\004\055\uffcb" +
    "\001\002\000\004\055\113\001\002\000\004\055\uffca\001" +
    "\002\000\010\011\uffd1\050\uffd1\055\uffd1\001\002\000\016" +
    "\005\uffc8\033\uffc8\034\uffc8\035\uffc8\050\uffc8\055\uffc8\001" +
    "\002\000\004\005\uffc0\001\002\000\004\005\uffc2\001\002" +
    "\000\004\005\uffc1\001\002\000\004\005\u011d\001\002\000" +
    "\004\065\122\001\002\000\004\056\123\001\002\000\014" +
    "\033\031\035\027\036\033\037\030\057\uffe3\001\002\000" +
    "\004\057\133\001\002\000\006\057\uffe4\061\131\001\002" +
    "\000\004\065\130\001\002\000\006\057\uffe2\061\uffe2\001" +
    "\002\000\006\057\uffe0\061\uffe0\001\002\000\012\033\031" +
    "\035\027\036\033\037\030\001\002\000\006\057\uffe1\061" +
    "\uffe1\001\002\000\004\054\135\001\002\000\016\005\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\050\uffc4\055\uffc4\001\002\000" +
    "\046\012\162\013\140\014\155\015\141\020\171\021\166" +
    "\024\142\025\153\026\144\031\201\033\031\035\027\036" +
    "\033\037\030\051\026\056\175\065\163\074\200\001\002" +
    "\000\054\012\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5\021" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\051\ufff5\055\ufff5\056\ufff5\062" +
    "\ufff5\065\ufff5\074\ufff5\001\002\000\054\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\020\uffee\021\uffee\024\uffee\025\uffee\026" +
    "\uffee\031\uffee\032\uffee\033\uffee\035\uffee\036\uffee\037\uffee" +
    "\051\uffee\055\uffee\056\uffee\062\uffee\065\uffee\074\uffee\001" +
    "\002\000\004\056\u0114\001\002\000\004\056\u0111\001\002" +
    "\000\004\056\u010a\001\002\000\006\016\370\017\365\001" +
    "\002\000\004\056\243\001\002\000\054\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\020\ufff6\021\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\051\ufff6\055\ufff6\056\ufff6\062\ufff6\065\ufff6\074\ufff6\001" +
    "\002\000\054\012\ufff0\013\ufff0\014\ufff0\015\ufff0\020\ufff0" +
    "\021\ufff0\024\ufff0\025\ufff0\026\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\051\ufff0\055\ufff0\056\ufff0" +
    "\062\ufff0\065\ufff0\074\ufff0\001\002\000\004\055\361\001" +
    "\002\000\054\012\ufffa\013\ufffa\014\ufffa\015\ufffa\020\ufffa" +
    "\021\ufffa\024\ufffa\025\ufffa\026\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\051\ufffa\055\ufffa\056\ufffa" +
    "\062\ufffa\065\ufffa\074\ufffa\001\002\000\054\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\020\uffef\021\uffef\024\uffef\025\uffef" +
    "\026\uffef\031\uffef\032\uffef\033\uffef\035\uffef\036\uffef\037" +
    "\uffef\051\uffef\055\uffef\056\uffef\062\uffef\065\uffef\074\uffef" +
    "\001\002\000\054\012\uffed\013\uffed\014\uffed\015\uffed\020" +
    "\uffed\021\uffed\024\uffed\025\uffed\026\uffed\031\uffed\032\uffed" +
    "\033\uffed\035\uffed\036\uffed\037\uffed\051\uffed\055\uffed\056" +
    "\uffed\062\uffed\065\uffed\074\uffed\001\002\000\004\056\356" +
    "\001\002\000\060\012\uffa1\013\uffa1\014\uffa1\015\uffa1\020" +
    "\uffa1\021\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\344" +
    "\031\uffa1\032\uffa1\033\uffa1\035\uffa1\036\uffa1\037\uffa1\051" +
    "\uffa1\055\uffa1\056\uffa1\062\uffa1\065\uffa1\074\uffa1\001\002" +
    "\000\004\056\243\001\002\000\054\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\020\ufff9\021\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\035\ufff9\036\ufff9\037\ufff9\051" +
    "\ufff9\055\ufff9\056\ufff9\062\ufff9\065\ufff9\074\ufff9\001\002" +
    "\000\054\012\uffeb\013\uffeb\014\uffeb\015\uffeb\020\uffeb\021" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\051\uffeb\055\uffeb\056\uffeb\062" +
    "\uffeb\065\uffeb\074\uffeb\001\002\000\004\062\340\001\002" +
    "\000\054\012\ufff7\013\ufff7\014\ufff7\015\ufff7\020\ufff7\021" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\051\ufff7\055\ufff7\056\ufff7\062" +
    "\ufff7\065\ufff7\074\ufff7\001\002\000\004\052\327\001\002" +
    "\000\014\041\314\056\046\060\047\064\044\065\043\001" +
    "\002\000\054\012\uffea\013\uffea\014\uffea\015\uffea\020\uffea" +
    "\021\uffea\024\uffea\025\uffea\026\uffea\031\uffea\032\uffea\033" +
    "\uffea\035\uffea\036\uffea\037\uffea\051\uffea\055\uffea\056\uffea" +
    "\062\uffea\065\uffea\074\uffea\001\002\000\052\012\162\013" +
    "\140\014\155\015\141\020\171\021\166\024\142\025\153" +
    "\026\144\031\201\032\ufffb\033\031\035\027\036\033\037" +
    "\030\051\026\055\ufffb\056\175\065\163\074\200\001\002" +
    "\000\004\054\272\001\002\000\054\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\020\ufff8\021\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8\051" +
    "\ufff8\055\ufff8\056\ufff8\062\ufff8\065\ufff8\074\ufff8\001\002" +
    "\000\054\012\uffec\013\uffec\014\uffec\015\uffec\020\uffec\021" +
    "\uffec\024\uffec\025\uffec\026\uffec\031\uffec\032\uffec\033\uffec" +
    "\035\uffec\036\uffec\037\uffec\051\uffec\055\uffec\056\uffec\062" +
    "\uffec\065\uffec\074\uffec\001\002\000\004\056\262\001\002" +
    "\000\054\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\021" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\051\ufff4\055\ufff4\056\ufff4\062" +
    "\ufff4\065\ufff4\074\ufff4\001\002\000\004\062\261\001\002" +
    "\000\054\012\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2\021" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\051\026\055\ufff2\056\ufff2\062" +
    "\ufff2\065\ufff2\074\ufff2\001\002\000\012\033\031\035\027" +
    "\036\033\037\030\001\002\000\054\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\020\ufff3\021\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\035\ufff3\036\ufff3\037\ufff3\051" +
    "\ufff3\055\ufff3\056\ufff3\062\ufff3\065\ufff3\074\ufff3\001\002" +
    "\000\054\012\ufff1\013\ufff1\014\ufff1\015\ufff1\020\ufff1\021" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\051\ufff1\055\ufff1\056\ufff1\062" +
    "\ufff1\065\ufff1\074\ufff1\001\002\000\004\056\243\001\002" +
    "\000\012\056\046\060\047\064\044\065\043\001\002\000" +
    "\004\042\234\001\002\000\004\052\204\001\002\000\006" +
    "\053\uff7d\060\207\001\002\000\006\053\uff7e\061\232\001" +
    "\002\000\004\053\210\001\002\000\006\053\uff7c\061\uff7c" +
    "\001\002\000\004\065\211\001\002\000\006\041\213\062" +
    "\uff85\001\002\000\004\062\231\001\002\000\006\052\214" +
    "\054\216\001\002\000\006\052\214\054\216\001\002\000" +
    "\010\053\uff84\061\uff84\062\uff84\001\002\000\012\056\046" +
    "\060\047\064\044\065\043\001\002\000\006\061\220\062" +
    "\uff86\001\002\000\006\052\214\054\216\001\002\000\010" +
    "\053\uff83\061\uff83\062\uff83\001\002\000\006\055\uff80\061" +
    "\uff80\001\002\000\006\055\225\061\224\001\002\000\012" +
    "\056\046\060\047\064\044\065\043\001\002\000\010\053" +
    "\uff81\061\uff81\062\uff81\001\002\000\006\055\uff7f\061\uff7f" +
    "\001\002\000\006\053\230\061\220\001\002\000\010\053" +
    "\uff82\061\uff82\062\uff82\001\002\000\054\012\uff87\013\uff87" +
    "\014\uff87\015\uff87\020\uff87\021\uff87\024\uff87\025\uff87\026" +
    "\uff87\031\uff87\032\uff87\033\uff87\035\uff87\036\uff87\037\uff87" +
    "\051\uff87\055\uff87\056\uff87\062\uff87\065\uff87\074\uff87\001" +
    "\002\000\004\060\233\001\002\000\006\053\uff7b\061\uff7b" +
    "\001\002\000\050\012\162\013\140\014\155\015\141\020" +
    "\171\021\166\024\142\025\153\026\144\031\201\033\031" +
    "\035\027\036\033\037\030\051\026\054\135\056\175\065" +
    "\163\074\200\001\002\000\004\062\uff74\001\002\000\004" +
    "\062\uff75\001\002\000\004\062\uff76\001\002\000\004\062" +
    "\241\001\002\000\054\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\020\uffbf\021\uffbf\024\uffbf\025\uffbf\026\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\035\uffbf\036\uffbf\037\uffbf\051\uffbf\055\uffbf" +
    "\056\uffbf\062\uffbf\065\uffbf\074\uffbf\001\002\000\004\063" +
    "\254\001\002\000\012\056\046\060\047\064\044\065\043" +
    "\001\002\000\004\040\252\001\002\000\010\044\uffe7\045" +
    "\250\057\uffe7\001\002\000\004\057\247\001\002\000\006" +
    "\054\uffe9\063\uffe9\001\002\000\012\056\046\060\047\064" +
    "\044\065\043\001\002\000\006\044\uffe8\057\uffe8\001\002" +
    "\000\012\056\046\060\047\064\044\065\043\001\002\000" +
    "\010\044\uffe6\045\uffe6\057\uffe6\001\002\000\004\054\135" +
    "\001\002\000\054\012\uff9b\013\uff9b\014\uff9b\015\uff9b\020" +
    "\uff9b\021\uff9b\024\uff9b\025\uff9b\026\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\035\uff9b\036\uff9b\037\uff9b\051\uff9b\055\uff9b\056" +
    "\uff9b\062\uff9b\065\uff9b\074\uff9b\001\002\000\006\057\257" +
    "\061\131\001\002\000\006\042\uffe5\054\uffe5\001\002\000" +
    "\060\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\020\uffb6" +
    "\021\uffb6\024\uffb6\025\uffb6\026\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\050\uffb6\051\uffb6\055\uffb6" +
    "\056\uffb6\062\uffb6\065\uffb6\074\uffb6\001\002\000\054\012" +
    "\uff79\013\uff79\014\uff79\015\uff79\020\uff79\021\uff79\024\uff79" +
    "\025\uff79\026\uff79\031\uff79\032\uff79\033\uff79\035\uff79\036" +
    "\uff79\037\uff79\051\uff79\055\uff79\056\uff79\062\uff79\065\uff79" +
    "\074\uff79\001\002\000\012\033\031\035\027\036\033\037" +
    "\030\001\002\000\004\065\264\001\002\000\004\046\265" +
    "\001\002\000\004\065\266\001\002\000\004\057\267\001" +
    "\002\000\004\063\270\001\002\000\004\054\135\001\002" +
    "\000\054\012\uff98\013\uff98\014\uff98\015\uff98\020\uff98\021" +
    "\uff98\024\uff98\025\uff98\026\uff98\031\uff98\032\uff98\033\uff98" +
    "\035\uff98\036\uff98\037\uff98\051\uff98\055\uff98\056\uff98\062" +
    "\uff98\065\uff98\074\uff98\001\002\000\046\012\162\013\140" +
    "\014\155\015\141\020\171\021\166\024\142\025\153\026" +
    "\144\031\201\033\031\035\027\036\033\037\030\051\026" +
    "\056\175\065\163\074\200\001\002\000\004\055\274\001" +
    "\002\000\006\022\277\023\300\001\002\000\054\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\020\uff90\021\uff90\024\uff90\025" +
    "\uff90\026\uff90\031\uff90\032\uff90\033\uff90\035\uff90\036\uff90" +
    "\037\uff90\051\uff90\055\uff90\056\uff90\062\uff90\065\uff90\074" +
    "\uff90\001\002\000\054\012\uff93\013\uff93\014\uff93\015\uff93" +
    "\020\uff93\021\uff93\024\uff93\025\uff93\026\uff93\031\uff93\032" +
    "\uff93\033\uff93\035\uff93\036\uff93\037\uff93\051\uff93\055\uff93" +
    "\056\uff93\062\uff93\065\uff93\074\uff93\001\002\000\004\054" +
    "\310\001\002\000\004\054\305\001\002\000\056\012\uff91" +
    "\013\uff91\014\uff91\015\uff91\020\uff91\021\uff91\023\300\024" +
    "\uff91\025\uff91\026\uff91\031\uff91\032\uff91\033\uff91\035\uff91" +
    "\036\uff91\037\uff91\051\uff91\055\uff91\056\uff91\062\uff91\065" +
    "\uff91\074\uff91\001\002\000\060\012\uff8e\013\uff8e\014\uff8e" +
    "\015\uff8e\020\uff8e\021\uff8e\022\277\023\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\031\uff8e\032\uff8e\033\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\051\uff8e\055\uff8e\056\uff8e\062\uff8e\065\uff8e\074" +
    "\uff8e\001\002\000\056\012\uff8f\013\uff8f\014\uff8f\015\uff8f" +
    "\020\uff8f\021\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\031" +
    "\uff8f\032\uff8f\033\uff8f\035\uff8f\036\uff8f\037\uff8f\051\uff8f" +
    "\055\uff8f\056\uff8f\062\uff8f\065\uff8f\074\uff8f\001\002\000" +
    "\054\012\uff92\013\uff92\014\uff92\015\uff92\020\uff92\021\uff92" +
    "\024\uff92\025\uff92\026\uff92\031\uff92\032\uff92\033\uff92\035" +
    "\uff92\036\uff92\037\uff92\051\uff92\055\uff92\056\uff92\062\uff92" +
    "\065\uff92\074\uff92\001\002\000\046\012\162\013\140\014" +
    "\155\015\141\020\171\021\166\024\142\025\153\026\144" +
    "\031\201\033\031\035\027\036\033\037\030\051\026\056" +
    "\175\065\163\074\200\001\002\000\004\055\307\001\002" +
    "\000\054\012\uff8c\013\uff8c\014\uff8c\015\uff8c\020\uff8c\021" +
    "\uff8c\024\uff8c\025\uff8c\026\uff8c\031\uff8c\032\uff8c\033\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\051\uff8c\055\uff8c\056\uff8c\062" +
    "\uff8c\065\uff8c\074\uff8c\001\002\000\046\012\162\013\140" +
    "\014\155\015\141\020\171\021\166\024\142\025\153\026" +
    "\144\031\201\033\031\035\027\036\033\037\030\051\026" +
    "\056\175\065\163\074\200\001\002\000\004\055\312\001" +
    "\002\000\060\012\uff8d\013\uff8d\014\uff8d\015\uff8d\020\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\035\uff8d\036\uff8d\037\uff8d\051\uff8d" +
    "\055\uff8d\056\uff8d\062\uff8d\065\uff8d\074\uff8d\001\002\000" +
    "\010\031\ufffc\032\ufffc\055\ufffc\001\002\000\012\056\325" +
    "\060\047\064\044\065\043\001\002\000\004\044\316\001" +
    "\002\000\012\056\046\060\047\064\044\065\043\001\002" +
    "\000\004\063\320\001\002\000\012\056\046\060\047\064" +
    "\044\065\043\001\002\000\004\062\322\001\002\000\054" +
    "\012\uff73\013\uff73\014\uff73\015\uff73\020\uff73\021\uff73\024" +
    "\uff73\025\uff73\026\uff73\031\uff73\032\uff73\033\uff73\035\uff73" +
    "\036\uff73\037\uff73\051\uff73\055\uff73\056\uff73\062\uff73\065" +
    "\uff73\074\uff73\001\002\000\004\062\uff77\001\002\000\004" +
    "\062\326\001\002\000\016\033\031\035\027\036\033\037" +
    "\030\060\054\065\050\001\002\000\054\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\020\uffb0\021\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\051\uffb0\055\uffb0\056\uffb0\062\uffb0\065\uffb0\074\uffb0\001" +
    "\002\000\012\033\031\035\027\036\033\037\030\001\002" +
    "\000\004\053\331\001\002\000\004\065\332\001\002\000" +
    "\004\041\333\001\002\000\004\065\334\001\002\000\004" +
    "\042\335\001\002\000\006\052\214\054\216\001\002\000" +
    "\006\061\220\062\337\001\002\000\054\012\uff7a\013\uff7a" +
    "\014\uff7a\015\uff7a\020\uff7a\021\uff7a\024\uff7a\025\uff7a\026" +
    "\uff7a\031\uff7a\032\uff7a\033\uff7a\035\uff7a\036\uff7a\037\uff7a" +
    "\051\uff7a\055\uff7a\056\uff7a\062\uff7a\065\uff7a\074\uff7a\001" +
    "\002\000\054\012\uff78\013\uff78\014\uff78\015\uff78\020\uff78" +
    "\021\uff78\024\uff78\025\uff78\026\uff78\031\uff78\032\uff78\033" +
    "\uff78\035\uff78\036\uff78\037\uff78\051\uff78\055\uff78\056\uff78" +
    "\062\uff78\065\uff78\074\uff78\001\002\000\004\063\342\001" +
    "\002\000\004\054\135\001\002\000\054\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\020\uff9c\021\uff9c\024\uff9c\025\uff9c\026" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\035\uff9c\036\uff9c\037\uff9c" +
    "\051\uff9c\055\uff9c\056\uff9c\062\uff9c\065\uff9c\074\uff9c\001" +
    "\002\000\004\056\243\001\002\000\056\012\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\020\uffa3\021\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\352\031\uffa3\032\uffa3\033\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\051\uffa3\055\uffa3\056\uffa3\062\uffa3\065\uffa3\074" +
    "\uffa3\001\002\000\060\012\uffa1\013\uffa1\014\uffa1\015\uffa1" +
    "\020\uffa1\021\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030" +
    "\344\031\uffa1\032\uffa1\033\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\051\uffa1\055\uffa1\056\uffa1\062\uffa1\065\uffa1\074\uffa1\001" +
    "\002\000\056\012\uffa0\013\uffa0\014\uffa0\015\uffa0\020\uffa0" +
    "\021\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\035\uffa0\036\uffa0\037\uffa0\051\uffa0\055\uffa0" +
    "\056\uffa0\062\uffa0\065\uffa0\074\uffa0\001\002\000\054\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\020\uffa2\021\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\051\uffa2\055\uffa2\056\uffa2\062\uffa2\065\uffa2" +
    "\074\uffa2\001\002\000\054\012\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\020\uffa4\021\uffa4\024\uffa4\025\uffa4\026\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\035\uffa4\036\uffa4\037\uffa4\051\uffa4\055" +
    "\uffa4\056\uffa4\062\uffa4\065\uffa4\074\uffa4\001\002\000\004" +
    "\054\135\001\002\000\054\012\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\020\uff9d\021\uff9d\024\uff9d\025\uff9d\026\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\035\uff9d\036\uff9d\037\uff9d\051\uff9d\055" +
    "\uff9d\056\uff9d\062\uff9d\065\uff9d\074\uff9d\001\002\000\004" +
    "\054\135\001\002\000\060\012\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\020\uff9e\021\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\051\uff9e\055\uff9e\056\uff9e\062\uff9e\065\uff9e\074\uff9e" +
    "\001\002\000\004\057\357\001\002\000\004\062\360\001" +
    "\002\000\054\012\uff88\013\uff88\014\uff88\015\uff88\020\uff88" +
    "\021\uff88\024\uff88\025\uff88\026\uff88\031\uff88\032\uff88\033" +
    "\uff88\035\uff88\036\uff88\037\uff88\051\uff88\055\uff88\056\uff88" +
    "\062\uff88\065\uff88\074\uff88\001\002\000\066\005\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd\021\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\050\ufffd\051\ufffd" +
    "\055\ufffd\056\ufffd\062\ufffd\065\ufffd\074\ufffd\001\002\000" +
    "\004\054\135\001\002\000\060\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\020\uff9f\021\uff9f\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\051\uff9f\055\uff9f\056\uff9f\062\uff9f\065\uff9f\074" +
    "\uff9f\001\002\000\054\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\020\uffae\021\uffae\024\uffae\025\uffae\026\uffae\031\uffae\032" +
    "\uffae\033\uffae\035\uffae\036\uffae\037\uffae\051\uffae\055\uffae" +
    "\056\uffae\062\uffae\065\uffae\074\uffae\001\002\000\004\063" +
    "\u0105\001\002\000\056\012\uffad\013\uffad\014\uffad\015\uffad" +
    "\017\365\020\uffad\021\uffad\024\uffad\025\uffad\026\uffad\031" +
    "\uffad\032\uffad\033\uffad\035\uffad\036\uffad\037\uffad\051\uffad" +
    "\055\uffad\056\uffad\062\uffad\065\uffad\074\uffad\001\002\000" +
    "\060\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\370\017\uffaa" +
    "\020\uffaa\021\uffaa\024\uffaa\025\uffaa\026\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\035\uffaa\036\uffaa\037\uffaa\051\uffaa\055\uffaa" +
    "\056\uffaa\062\uffaa\065\uffaa\074\uffaa\001\002\000\012\056" +
    "\046\060\047\064\044\065\043\001\002\000\004\063\372" +
    "\001\002\000\004\054\373\001\002\000\046\012\162\013" +
    "\140\014\155\015\141\020\171\021\166\024\142\025\153" +
    "\026\144\031\201\033\031\035\027\036\033\037\030\051" +
    "\026\056\175\065\163\074\200\001\002\000\006\031\201" +
    "\032\377\001\002\000\004\055\u0102\001\002\000\004\055" +
    "\uffa7\001\002\000\004\062\u0101\001\002\000\004\055\uffa8" +
    "\001\002\000\004\055\uffa5\001\002\000\060\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\031\uffa9\032\uffa9\033\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\051\uffa9\055\uffa9\056\uffa9\062\uffa9" +
    "\065\uffa9\074\uffa9\001\002\000\056\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\017\uffab\020\uffab\021\uffab\024\uffab\025\uffab" +
    "\026\uffab\031\uffab\032\uffab\033\uffab\035\uffab\036\uffab\037" +
    "\uffab\051\uffab\055\uffab\056\uffab\062\uffab\065\uffab\074\uffab" +
    "\001\002\000\054\012\uffaf\013\uffaf\014\uffaf\015\uffaf\020" +
    "\uffaf\021\uffaf\024\uffaf\025\uffaf\026\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\035\uffaf\036\uffaf\037\uffaf\051\uffaf\055\uffaf\056" +
    "\uffaf\062\uffaf\065\uffaf\074\uffaf\001\002\000\004\054\u0106" +
    "\001\002\000\046\012\162\013\140\014\155\015\141\020" +
    "\171\021\166\024\142\025\153\026\144\031\201\033\031" +
    "\035\027\036\033\037\030\051\026\056\175\065\163\074" +
    "\200\001\002\000\006\031\201\032\377\001\002\000\004" +
    "\055\u0109\001\002\000\054\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\020\uffa6\021\uffa6\024\uffa6\025\uffa6\026\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\035\uffa6\036\uffa6\037\uffa6\051\uffa6\055" +
    "\uffa6\056\uffa6\062\uffa6\065\uffa6\074\uffa6\001\002\000\012" +
    "\056\046\060\047\064\044\065\043\001\002\000\006\057" +
    "\u010e\067\u010d\001\002\000\006\057\uff8a\067\uff8a\001\002" +
    "\000\012\056\046\060\047\064\044\065\043\001\002\000" +
    "\004\062\u010f\001\002\000\054\012\uff8b\013\uff8b\014\uff8b" +
    "\015\uff8b\020\uff8b\021\uff8b\024\uff8b\025\uff8b\026\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\035\uff8b\036\uff8b\037\uff8b\051\uff8b" +
    "\055\uff8b\056\uff8b\062\uff8b\065\uff8b\074\uff8b\001\002\000" +
    "\006\057\uff89\067\uff89\001\002\000\012\056\046\060\047" +
    "\064\044\065\043\001\002\000\004\057\u0113\001\002\000" +
    "\006\016\uffac\017\uffac\001\002\000\004\051\026\001\002" +
    "\000\004\065\u0116\001\002\000\004\043\u011b\001\002\000" +
    "\012\056\046\060\047\064\044\065\043\001\002\000\004" +
    "\057\u0119\001\002\000\004\054\135\001\002\000\054\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\020\uff9a\021\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\031\uff9a\032\uff9a\033\uff9a\035\uff9a\036" +
    "\uff9a\037\uff9a\051\uff9a\055\uff9a\056\uff9a\062\uff9a\065\uff9a" +
    "\074\uff9a\001\002\000\004\062\u011c\001\002\000\012\056" +
    "\uff99\060\uff99\064\uff99\065\uff99\001\002\000\004\065\u011e" +
    "\001\002\000\004\056\175\001\002\000\004\054\u0120\001" +
    "\002\000\046\012\162\013\140\014\155\015\141\020\171" +
    "\021\166\024\142\025\153\026\144\031\201\033\031\035" +
    "\027\036\033\037\030\051\026\056\175\065\163\074\200" +
    "\001\002\000\004\031\201\001\002\000\004\055\u0123\001" +
    "\002\000\016\005\uffc3\033\uffc3\034\uffc3\035\uffc3\050\uffc3" +
    "\055\uffc3\001\002\000\004\054\u0125\001\002\000\004\051" +
    "\026\001\002\000\006\051\026\055\u0127\001\002\000\004" +
    "\055\uffba\001\002\000\004\054\u0129\001\002\000\012\056" +
    "\046\060\047\064\044\065\043\001\002\000\006\055\u012b" +
    "\061\224\001\002\000\004\062\u012c\001\002\000\004\055" +
    "\uffb9\001\002\000\004\054\u012e\001\002\000\004\051\026" +
    "\001\002\000\006\051\026\055\u0130\001\002\000\004\055" +
    "\uffb8\001\002\000\010\011\uffd3\050\uffd3\055\uffd3\001\002" +
    "\000\006\002\uffdd\004\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\010\002\006\003\005\070\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\006\003\007\070\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\015\051\013" +
    "\115\016\001\001\000\010\013\022\052\023\071\024\001" +
    "\001\000\002\001\001\000\004\115\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\257\001\001\000\012\006\067\046\070" +
    "\053\065\116\071\001\001\000\002\001\001\000\004\043" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\121\035\122\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\110\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\065\052\074\051\114" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\074\064\114\050\001\001\000\002\001\001" +
    "\000\006\074\057\114\050\001\001\000\002\001\001\000" +
    "\004\114\063\001\001\000\004\114\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\070\116\u0130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\106\010\107\011\075\012\111" +
    "\013\104\046\105\047\110\055\100\056\076\071\024\117" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\257\001\001\000\004" +
    "\107\117\001\001\000\012\046\105\055\100\056\076\117" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\043\125\064" +
    "\123\072\126\106\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\125\072\131\001\001\000\002\001\001" +
    "\000\004\060\133\001\001\000\002\001\001\000\066\013" +
    "\173\014\147\015\155\016\166\017\160\020\144\021\135" +
    "\022\171\023\175\024\176\025\145\026\150\027\136\030" +
    "\163\035\151\036\156\037\167\043\202\061\201\066\146" +
    "\071\024\073\164\102\142\111\153\123\172\124\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\365\032" +
    "\363\067\366\001\001\000\004\062\361\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\057\344\100\345\001\001\000\004\062\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\063\314\077" +
    "\244\110\243\001\001\000\002\001\001\000\066\013\173" +
    "\014\147\015\155\016\166\017\160\020\144\021\135\022" +
    "\171\023\175\024\176\025\145\026\150\027\136\030\163" +
    "\035\151\036\156\037\167\043\202\061\201\066\312\071" +
    "\024\073\164\102\142\111\153\123\172\124\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\257\001\001\000\010\043\125\072\126\106\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\241" +
    "\001\001\000\004\110\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\204\054\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\211\001\001\000\002\001\001\000\006" +
    "\044\216\050\214\001\001\000\006\044\226\050\214\001" +
    "\001\000\002\001\001\000\006\042\222\110\221\001\001" +
    "\000\002\001\001\000\004\050\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\110\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\013\173\014\147\015\155\016" +
    "\166\017\160\020\144\021\135\022\171\023\175\024\176" +
    "\025\145\026\150\027\136\030\163\035\151\036\156\037" +
    "\167\043\202\060\235\061\201\071\024\073\234\102\142" +
    "\105\236\111\153\123\172\124\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\063\245\077" +
    "\244\110\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\063\250\077" +
    "\244\110\243\001\001\000\002\001\001\000\004\110\252" +
    "\001\001\000\002\001\001\000\004\060\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\270\001\001\000" +
    "\002\001\001\000\066\013\173\014\147\015\155\016\166" +
    "\017\160\020\144\021\135\022\171\023\175\024\176\025" +
    "\145\026\150\027\136\030\163\035\151\036\156\037\167" +
    "\043\202\061\201\066\272\071\024\073\164\102\142\111" +
    "\153\123\172\124\157\001\001\000\002\001\001\000\012" +
    "\033\300\034\274\075\275\076\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\303\001\001\000\006\033\302\076\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\013\173" +
    "\014\147\015\155\016\166\017\160\020\144\021\135\022" +
    "\171\023\175\024\176\025\145\026\150\027\136\030\163" +
    "\035\151\036\156\037\167\043\202\061\201\066\305\071" +
    "\024\073\164\102\142\111\153\123\172\124\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\013\173\014" +
    "\147\015\155\016\166\017\160\020\144\021\135\022\171" +
    "\023\175\024\176\025\145\026\150\027\136\030\163\035" +
    "\151\036\156\037\167\043\202\061\201\066\310\071\024" +
    "\073\164\102\142\111\153\123\172\124\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\061\201\110\323\124\322\001\001\000\002\001\001\000" +
    "\004\110\316\001\001\000\002\001\001\000\004\110\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\043\125\065\052\072\126" +
    "\074\051\106\255\114\050\001\001\000\002\001\001\000" +
    "\004\043\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\335\050\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\342\001\001\000\002\001\001\000\004\062\353\001\001" +
    "\000\006\101\350\113\347\001\001\000\006\057\346\100" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\352\001\001\000\002\001\001\000" +
    "\004\060\354\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u0103\001\001\000\006\031" +
    "\u0102\067\366\001\001\000\004\110\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\066\013\173\014\147\015" +
    "\155\016\166\017\160\020\144\021\135\022\171\023\175" +
    "\024\176\025\145\026\150\027\136\030\163\035\151\036" +
    "\156\037\167\043\202\061\201\066\373\071\024\073\164" +
    "\102\142\111\153\123\172\124\157\001\001\000\010\035" +
    "\377\103\375\104\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\013\173\014\147\015\155\016" +
    "\166\017\160\020\144\021\135\022\171\023\175\024\176" +
    "\025\145\026\150\027\136\030\163\035\151\036\156\037" +
    "\167\043\202\061\201\066\u0106\071\024\073\164\102\142" +
    "\111\153\123\172\124\157\001\001\000\010\035\377\103" +
    "\375\104\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\u010a\110\u010b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\110\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\110\u0111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\u0114" +
    "\001\001\000\004\112\u0116\001\001\000\002\001\001\000" +
    "\010\063\u0117\077\244\110\243\001\001\000\002\001\001" +
    "\000\004\060\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u011e" +
    "\001\001\000\002\001\001\000\066\013\173\014\147\015" +
    "\155\016\166\017\160\020\144\021\135\022\171\023\175" +
    "\024\176\025\145\026\150\027\136\030\163\035\151\036" +
    "\156\037\167\043\202\061\201\066\u0120\071\024\073\164" +
    "\102\142\111\153\123\172\124\157\001\001\000\004\035" +
    "\u0121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\u0125\071\024\001\001\000\004\071" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\u0129\110\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\u012e" +
    "\071\024\001\001\000\004\071\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



// Agrega esta línea al inicio del archivo .cup
    public Lexer lexer;
    private boolean sintaxiscorrecta = true;
    private List<String> errores = new ArrayList<>();

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public void syntax_error(Symbol s) {
        sintaxiscorrecta = false;
        String errorMsg = "Error de sintaxis en línea " + (s.left + 1) +
                        ", columna " + (s.right + 1) +
                        ". Token inesperado: '" + s.value + "'";
        System.err.println(errorMsg);
        errores.add(errorMsg);
        }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.sym == sym.EOF) {
                errores.add("Error inesperado al final del archivo");
                } else {
                    errores.add(message);
                }
        }
    }

    public boolean parseCode() {
        try {
            super.parse();
            if (sintaxiscorrecta) {
                System.out.println("compilación exitosa");
                return true;
                } else {
                    System.out.println(errores.size() + " errores encontrados:");
                    errores.forEach(System.out::println);
                    return false;
                }
            } catch (Exception e) {
                System.out.println("Error fatal " + e.getMessage());
                return false;
            }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicios EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicios ::= inicio inicios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicios ::= inicio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueexpresiones ::= LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueexpresiones",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= expresion expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= sis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= mientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= mientrashacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= porpuro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= porcadas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= intentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= impresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= escaneos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= declaracionarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= declaracionlistas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= lambdas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= ternarios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= rompers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= asignars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= selectors 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloquecondiciones ::= PARENTESISABIERTO condiciones PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquecondiciones",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condiciones ::= condicion OPERADORCONLOGICO condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condiciones ::= condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= valor OPERADORRELACIONAL valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloqueparametros ::= PARENTESISABIERTO parametrolista PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueparametros",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros ::= parametrolista 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametrolista ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametrolista ::= parametrolista COMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametro ::= tipos ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // espacios ::= espacios espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // espacios ::= espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // espacio ::= AGRUPACIONPRINCIPAL ID LLAVEABIERTA libreriasopcional declaracionesopcional clasesopcional LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacio",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // clasesopcional ::= clases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // clasesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // libreriasopcional ::= librerias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // libreriasopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracionesopcional ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // librerias ::= librerias libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // librerias ::= libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // libreria ::= GESTIONRECURSOS ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // clases ::= clases clase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // clases ::= clase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // clase ::= modificadoresacceso AGRUPACIONSECUNDARIA ID LLAVEABIERTA miembrosclase LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // modificadoresacceso ::= MODIFICADORACCESO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // modificadoresacceso ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // miembrosclase ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // miembrosclase ::= enums 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // miembrosclase ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // miembrosclase ::= estructuras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // miembrosclase ::= interfaces 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // miembrosclase ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funcion ::= funcionesnormales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funcion ::= funcionessinretorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcionessinretorno ::= modificadoresacceso DECLARACIONFUNCION ID PARENTESISABIERTO parametros PARENTESISCERRADO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionessinretorno",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcionesnormales ::= modificadoresacceso tipofuncion DECLARACIONFUNCION ID bloqueparametros LLAVEABIERTA expresiones retornos LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesnormales",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipofuncion ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipofuncion ::= TIPOLOGICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipofuncion ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // retornos ::= RETORNAR valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornos",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor ::= PARENTESISABIERTO operaritmetics PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // estructuras ::= AGRUPACIONESTRUCTURA ID LLAVEABIERTA declaraciones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // enums ::= AGRUPACIONENUMERATOR ID LLAVEABIERTA valores LLAVECERRADA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enums",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // interfaces ::= AGRUPACIONINTERFAZ ID LLAVEABIERTA declaraciones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interfaces",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracion ::= DEC tipos listadeclarar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // listadeclarar ::= declarador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclarar",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // listadeclarar ::= listadeclarar COMA declarador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listadeclarar",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declarador ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarador",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declarador ::= ID OPERADORASIGNAMIENTO valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarador",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignars ::= ID OPERADORASIGNAMIENTO valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignars",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // selectors ::= selector casos defectos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // selectors ::= selector defectos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // selectors ::= selector casos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // selector ::= SELECTOR PARENTESISABIERTO valor PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // casos ::= caso casos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // caso ::= CASO valor PUNTODOBLE LLAVEABIERTA expresiones retornoalto LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // retornoalto ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // retornoalto ::= alto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // defectos ::= DEFECTO PUNTODOBLE LLAVEABIERTA expresiones retornoalto LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defectos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // alto ::= PARAR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alto",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sis ::= si sinoshacer sinos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sis",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sinos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sinos ::= sino 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sinoshacer ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sinoshacer ::= sinohacer sinoshacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // si ::= SI bloquecondiciones bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sinohacer ::= SINOHACER bloquecondiciones bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinohacer",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sino ::= SINO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // mientras ::= MIENTRAS bloquecondiciones PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientras",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // mientrashacer ::= HACER bloquecondiciones PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientrashacer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // porpuro ::= POR PARENTESISABIERTO declaracion aumentodecremento condiciones PARENTESISCERRADO bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porpuro",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // aumentodecremento ::= ID OPERADORDESPLAZAMIENTO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentodecremento",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // porcadas ::= PORCADA PARENTESISABIERTO tipos ID PARAMETROENTRADA ID PARENTESISCERRADO PUNTODOBLE bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porcadas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipos ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipos ::= TIPOINFERIDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipos ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipos ::= TIPOCARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // intentos ::= INTENTAR LLAVEABIERTA expresiones LLAVECERRADA atraparterminar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intentos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // atraparterminar ::= atrapars terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // atraparterminar ::= atrapars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // atraparterminar ::= terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // atrapars ::= atrapar atrapars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // atrapars ::= atrapar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // atrapar ::= ATRAPAR LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapar",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // terminars ::= TERMINAR LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("terminars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // impresiones ::= IMPRIMIR PARENTESISABIERTO oraciones PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // oraciones ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // oraciones ::= oraciones MAS valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // escaneos ::= ESCANEAR PARENTESISABIERTO PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declaracionarreglos ::= tipos CORCHETEABIERTO dimensionesopcional CORCHETECERRADO ID asignamientovariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionarreglos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // asignamientovariables ::= OPERADORASIGNAMIENTO listabloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // asignamientovariables ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // listabloques ::= bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // listabloques ::= listabloques COMA bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // bloquevalores ::= CORCHETEABIERTO listabloques CORCHETECERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // bloquevalores ::= LLAVEABIERTA valores LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valores ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valores ::= valores COMA valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // dimensionesopcional ::= dimensiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // dimensionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // dimensiones ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // dimensiones ::= dimensiones COMA NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // declaracionlistas ::= LISTA CORCHETEABIERTO tipos CORCHETECERRADO ID OPERADORASIGNAMIENTO ID OPERADORRESULTADO listabloques PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlistas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // lambdas ::= lambdaasignar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdas",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // lambdas ::= lambdaexpr PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdas",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // lambdaasignar ::= ID OPERADORASIGNAMIENTO lambdaexpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdaasignar",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lambdaexpr ::= bloqueparametros OPERADORRESULTADO cuerpolambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdaexpr",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cuerpolambda ::= bloqueexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cuerpolambda ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ternarios ::= ID condiciones OPERADORTERNARIO valor PUNTODOBLE valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ternarios",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // operaritmetics ::= operaritmetics MAS operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // operaritmetics ::= operaritmetics MENOS operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // operaritmetics ::= operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operaritmetic ::= operaritmetic MULTI idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operaritmetic ::= operaritmetic DIV idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operaritmetic ::= idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // idnum ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // idnum ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.codigo;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\262\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\002\003\000\002\002\003\000\002\060\004" +
    "\000\002\060\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\005\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\004\000\002\064\004" +
    "\000\002\064\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\061\005\000\002\061\003\000\002\076" +
    "\005\000\002\062\003\000\002\062\002\000\002\105\003" +
    "\000\002\105\005\000\002\071\004\000\002\123\005\000" +
    "\002\123\011\000\002\123\005\000\002\123\003\000\002" +
    "\123\003\000\002\004\004\000\002\004\003\000\002\067" +
    "\011\000\002\053\003\000\002\053\002\000\002\051\003" +
    "\000\002\051\002\000\002\052\003\000\002\052\002\000" +
    "\002\005\004\000\002\005\003\000\002\117\005\000\002" +
    "\006\004\000\002\006\003\000\002\120\010\000\002\046" +
    "\003\000\002\046\002\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\002\000\002\007\004\000\002\007\003\000\002" +
    "\122\003\000\002\122\003\000\002\056\013\000\002\055" +
    "\015\000\002\106\003\000\002\106\003\000\002\106\003" +
    "\000\002\035\005\000\002\107\003\000\002\107\003\000" +
    "\002\107\003\000\002\107\005\000\002\010\007\000\002" +
    "\011\007\000\002\012\007\000\002\013\004\000\002\013" +
    "\003\000\002\070\006\000\002\070\010\000\002\036\006" +
    "\000\002\030\005\000\002\030\004\000\002\030\004\000" +
    "\002\101\006\000\002\031\004\000\002\031\003\000\002" +
    "\065\011\000\002\103\003\000\002\103\003\000\002\032" +
    "\010\000\002\102\004\000\002\014\005\000\002\100\002" +
    "\000\002\100\003\000\002\057\002\000\002\057\004\000" +
    "\002\110\011\000\002\077\011\000\002\113\006\000\002" +
    "\015\012\000\002\016\012\000\002\017\022\000\002\111" +
    "\005\000\002\020\015\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\021\007\000" +
    "\002\074\004\000\002\074\003\000\002\074\003\000\002" +
    "\033\004\000\002\033\003\000\002\075\006\000\002\034" +
    "\006\000\002\022\007\000\002\040\003\000\002\040\005" +
    "\000\002\023\006\000\002\024\011\000\002\041\004\000" +
    "\002\041\002\000\002\044\003\000\002\044\005\000\002" +
    "\050\005\000\002\050\005\000\002\042\003\000\002\042" +
    "\005\000\002\054\003\000\002\054\002\000\002\045\003" +
    "\000\002\045\005\000\002\025\014\000\002\026\005\000" +
    "\002\115\007\000\002\115\007\000\002\104\005\000\002" +
    "\104\003\000\002\027\011\000\002\063\005\000\002\063" +
    "\005\000\002\063\003\000\002\073\005\000\002\073\005" +
    "\000\002\073\003\000\002\116\003\000\002\116\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\074\004\053\005\uffb0\006\020\007\077\010" +
    "\051\012\045\013\010\014\076\015\041\016\015\021\063" +
    "\022\057\025\013\026\037\027\021\032\101\034\007\035" +
    "\uffb0\036\056\037\071\040\070\042\016\051\073\052\103" +
    "\055\064\061\066\063\030\067\050\074\011\001\002\000" +
    "\100\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\021\ufff5\022" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\032\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\042\ufff5\051\ufff5\052\ufff5\055" +
    "\ufff5\056\ufff5\061\ufff5\063\ufff5\067\ufff5\074\ufff5\001\002" +
    "\000\100\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\021\uffee" +
    "\022\uffee\025\uffee\026\uffee\027\uffee\032\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\042\uffee\051\uffee\052\uffee" +
    "\055\uffee\056\uffee\061\uffee\063\uffee\067\uffee\074\uffee\001" +
    "\002\000\100\002\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\021" +
    "\uffa6\022\uffa6\025\uffa6\026\uffa6\027\uffa6\032\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\042\uffa6\051\uffa6\052" +
    "\uffa6\055\uffa6\056\uffa6\061\uffa6\063\uffa6\067\uffa6\074\uffa6" +
    "\001\002\000\010\053\uff79\054\uff79\067\uff79\001\002\000" +
    "\004\057\u0168\001\002\000\004\063\u0167\001\002\000\100" +
    "\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\021\uffe4\022\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\032\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\042\uffe4\051\uffe4\052\uffe4\055\uffe4" +
    "\056\uffe4\061\uffe4\063\uffe4\067\uffe4\074\uffe4\001\002\000" +
    "\004\057\u0160\001\002\000\012\057\u0140\061\130\066\124" +
    "\067\123\001\002\000\004\057\u0155\001\002\000\012\057" +
    "\u0140\061\130\066\124\067\123\001\002\000\006\017\u012c" +
    "\020\u0129\001\002\000\004\067\u0124\001\002\000\004\057" +
    "\u011e\001\002\000\076\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\021\ufffd\022\ufffd\025\ufffd\026\ufffd\027\ufffd\032\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\042\ufffd\051" +
    "\ufffd\052\ufffd\055\ufffd\061\ufffd\063\ufffd\067\ufffd\074\ufffd" +
    "\001\002\000\100\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\021\ufff0\022\ufff0\025\ufff0\026\ufff0\027\ufff0\032\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\051\ufff0" +
    "\052\ufff0\055\ufff0\056\ufff0\061\ufff0\063\ufff0\067\ufff0\074" +
    "\ufff0\001\002\000\100\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\021\ufff6\022\ufff6\025\ufff6\026\ufff6\027\ufff6\032\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\042\ufff6\051" +
    "\ufff6\052\ufff6\055\ufff6\056\ufff6\061\ufff6\063\ufff6\067\ufff6" +
    "\074\ufff6\001\002\000\100\002\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\021\uffe6\022\uffe6\025\uffe6\026\uffe6\027\uffe6\032" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6" +
    "\051\uffe6\052\uffe6\055\uffe6\056\uffe6\061\uffe6\063\uffe6\067" +
    "\uffe6\074\uffe6\001\002\000\112\002\uff55\004\uff55\005\uff55" +
    "\006\uff55\007\uff55\010\uff55\012\uff55\013\uff55\014\uff55\015" +
    "\uff55\016\uff55\021\uff55\022\uff55\025\uff55\026\uff55\027\uff55" +
    "\032\uff55\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55\042" +
    "\uff55\051\uff55\052\uff55\055\uff55\056\uff55\060\uff55\061\uff55" +
    "\063\uff55\067\uff55\070\uff55\071\uff55\072\143\073\142\074" +
    "\uff55\001\002\000\100\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\021\ufffa\022\ufffa\025\ufffa\026\ufffa\027\ufffa\032\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\042\ufffa\051" +
    "\ufffa\052\ufffa\055\ufffa\056\ufffa\061\ufffa\063\ufffa\067\ufffa" +
    "\074\ufffa\001\002\000\100\002\uffc2\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\021\uffc2\022\uffc2\025\uffc2\026\uffc2\027\uffc2\032" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2" +
    "\051\uffc2\052\uffc2\055\uffc2\056\uffc2\061\uffc2\063\uffc2\067" +
    "\uffc2\074\uffc2\001\002\000\100\002\uffe7\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\021\uffe7\022\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\032\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042" +
    "\uffe7\051\uffe7\052\uffe7\055\uffe7\056\uffe7\061\uffe7\063\uffe7" +
    "\067\uffe7\074\uffe7\001\002\000\112\002\uff52\004\uff52\005" +
    "\uff52\006\uff52\007\uff52\010\uff52\012\uff52\013\uff52\014\uff52" +
    "\015\uff52\016\uff52\021\uff52\022\uff52\025\uff52\026\uff52\027" +
    "\uff52\032\uff52\034\uff52\035\uff52\036\uff52\037\uff52\040\uff52" +
    "\042\uff52\051\uff52\052\uff52\055\uff52\056\uff52\060\uff52\061" +
    "\uff52\063\uff52\067\uff52\070\uff52\071\uff52\072\uff52\073\uff52" +
    "\074\uff52\001\002\000\100\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\021\uffef\022\uffef\025\uffef\026\uffef\027\uffef\032" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef" +
    "\051\uffef\052\uffef\055\uffef\056\uffef\061\uffef\063\uffef\067" +
    "\uffef\074\uffef\001\002\000\100\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\021\uffed\022\uffed\025\uffed\026\uffed\027\uffed" +
    "\032\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\042" +
    "\uffed\051\uffed\052\uffed\055\uffed\056\uffed\061\uffed\063\uffed" +
    "\067\uffed\074\uffed\001\002\000\076\002\uffff\004\053\005" +
    "\uffb0\006\020\007\077\010\051\012\045\013\010\014\076" +
    "\015\041\016\015\021\063\022\057\025\013\026\037\027" +
    "\021\032\101\034\007\035\uffb0\036\056\037\071\040\070" +
    "\042\016\051\073\052\103\055\064\061\066\063\030\067" +
    "\050\074\011\001\002\000\004\002\u011c\001\002\000\004" +
    "\057\u0119\001\002\000\110\002\uff85\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\010\uff85\012\uff85\013\uff85\014\uff85\015\uff85" +
    "\016\uff85\021\uff85\022\uff85\025\uff85\026\uff85\027\uff85\030" +
    "\uff85\031\u0109\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85" +
    "\037\uff85\040\uff85\042\uff85\051\uff85\052\uff85\055\uff85\056" +
    "\uff85\061\uff85\063\uff85\064\uff85\067\uff85\074\uff85\001\002" +
    "\000\004\057\u0102\001\002\000\100\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\021\ufff9\022\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\032\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\042\ufff9\051\ufff9\052\ufff9\055\ufff9\056\ufff9\061\ufff9\063" +
    "\ufff9\067\ufff9\074\ufff9\001\002\000\100\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\021\uffeb\022\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\042\uffeb\051\uffeb\052\uffeb\055\uffeb\056\uffeb\061\uffeb" +
    "\063\uffeb\067\uffeb\074\uffeb\001\002\000\100\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\021\ufff7\022\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\042\ufff7\051\ufff7\052\ufff7\055\ufff7\056\ufff7\061" +
    "\ufff7\063\ufff7\067\ufff7\074\ufff7\001\002\000\004\053\371" +
    "\001\002\000\100\002\ufffb\004\ufffb\005\ufffb\006\020\007" +
    "\077\010\051\012\045\013\010\014\076\015\041\016\015" +
    "\021\063\022\057\025\013\026\037\027\021\032\101\034" +
    "\007\035\ufffb\036\056\037\071\040\070\042\016\051\073" +
    "\052\103\055\064\056\ufffb\061\066\063\030\067\050\074" +
    "\011\001\002\000\104\002\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\021\uffc1\022\uffc1\025\uffc1\026\uffc1\027\uffc1\032\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\042\uffc1\051" +
    "\uffc1\052\uffc1\055\uffc1\056\uffc1\061\uffc1\063\uffc1\067\uffc1" +
    "\070\140\071\136\074\uffc1\001\002\000\110\002\uff51\004" +
    "\uff51\005\uff51\006\uff51\007\uff51\010\uff51\012\uff51\013\uff51" +
    "\014\uff51\015\uff51\016\uff51\021\uff51\022\uff51\025\uff51\026" +
    "\uff51\027\uff51\032\uff51\034\uff51\035\uff51\036\uff51\037\uff51" +
    "\040\uff51\042\231\051\uff51\052\uff51\055\uff51\056\uff51\061" +
    "\uff51\063\uff51\067\uff51\070\uff51\071\uff51\072\uff51\073\uff51" +
    "\074\uff51\001\002\000\004\067\364\001\002\000\076\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\021\ufffe\022\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\032\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\042\ufffe\051\ufffe\052\ufffe\055\ufffe\061" +
    "\ufffe\063\ufffe\067\ufffe\074\ufffe\001\002\000\004\067\331" +
    "\001\002\000\012\005\302\034\277\035\300\036\276\001" +
    "\002\000\100\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\021" +
    "\uffe8\022\uffe8\025\uffe8\026\uffe8\027\uffe8\032\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\051\uffe8\052" +
    "\uffe8\055\uffe8\056\uffe8\061\uffe8\063\uffe8\067\uffe8\074\uffe8" +
    "\001\002\000\010\053\uff7b\054\uff7b\067\uff7b\001\002\000" +
    "\004\055\255\001\002\000\100\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\021\ufff8\022\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\032\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\042" +
    "\ufff8\051\ufff8\052\ufff8\055\ufff8\056\ufff8\061\ufff8\063\ufff8" +
    "\067\ufff8\074\ufff8\001\002\000\100\002\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\021\uffec\022\uffec\025\uffec\026\uffec\027" +
    "\uffec\032\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\042\uffec\051\uffec\052\uffec\055\uffec\056\uffec\061\uffec\063" +
    "\uffec\067\uffec\074\uffec\001\002\000\100\002\uffa8\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\021\uffa8\022\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\032\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\042\uffa8\051\uffa8\052\uffa8\055\uffa8\056\uffa8\061\uffa8" +
    "\063\uffa8\067\uffa8\074\uffa8\001\002\000\004\057\243\001" +
    "\002\000\072\005\uffb0\006\020\007\077\010\051\012\045" +
    "\013\010\014\076\015\041\016\015\021\063\022\057\025" +
    "\013\026\037\027\021\032\101\034\007\035\uffb0\036\056" +
    "\037\071\040\070\042\016\051\073\052\103\055\064\061" +
    "\066\063\030\067\050\074\011\001\002\000\100\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\021\ufff4\022\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\042\ufff4\051\ufff4\052\ufff4\055\ufff4\056\ufff4" +
    "\061\ufff4\063\ufff4\067\ufff4\074\ufff4\001\002\000\112\002" +
    "\uff50\004\uff50\005\uff50\006\uff50\007\uff50\010\uff50\012\uff50" +
    "\013\uff50\014\uff50\015\uff50\016\uff50\021\uff50\022\uff50\025" +
    "\uff50\026\uff50\027\uff50\032\uff50\034\uff50\035\uff50\036\uff50" +
    "\037\uff50\040\uff50\042\uff50\051\uff50\052\uff50\055\uff50\056" +
    "\uff50\060\uff50\061\uff50\063\uff50\067\uff50\070\uff50\071\uff50" +
    "\072\uff50\073\uff50\074\uff50\001\002\000\100\002\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\032\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\042\ufff2\051\ufff2\052\ufff2\055\ufff2\056\ufff2\061" +
    "\ufff2\063\ufff2\067\ufff2\074\ufff2\001\002\000\010\053\uff78" +
    "\054\uff78\067\uff78\001\002\000\010\053\uff7a\054\uff7a\067" +
    "\uff7a\001\002\000\100\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\021\ufff3\022\ufff3\025\ufff3\026\ufff3\027\ufff3\032\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\042\ufff3\051" +
    "\ufff3\052\ufff3\055\ufff3\056\ufff3\061\ufff3\063\ufff3\067\ufff3" +
    "\074\ufff3\001\002\000\014\005\uffb1\011\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\001\002\000\100\002\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\021\ufff1\022\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\032\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\042" +
    "\ufff1\051\ufff1\052\ufff1\055\ufff1\056\ufff1\061\ufff1\063\ufff1" +
    "\067\ufff1\074\ufff1\001\002\000\100\002\uffa7\004\uffa7\005" +
    "\uffa7\006\uffa7\007\uffa7\010\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\021\uffa7\022\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\032\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\042\uffa7\051\uffa7\052\uffa7\055\uffa7\056\uffa7\061\uffa7\063" +
    "\uffa7\067\uffa7\074\uffa7\001\002\000\004\057\175\001\002" +
    "\000\004\067\171\001\002\000\076\002\uffbf\004\053\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\021\uffbf\022\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\032\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\042\uffbf\051\uffbf\052\uffbf\055\uffbf\061\uffbf\063\uffbf\067" +
    "\uffbf\074\uffbf\001\002\000\012\057\126\061\130\066\124" +
    "\067\123\001\002\000\100\002\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\021\uffea\022\uffea\025\uffea\026\uffea\027\uffea\032" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea" +
    "\051\073\052\uffea\055\uffea\056\uffea\061\uffea\063\uffea\067" +
    "\uffea\074\uffea\001\002\000\012\034\007\036\056\037\071" +
    "\040\070\001\002\000\106\002\uff97\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\021\uff97\022\uff97\025\uff97\026\uff97\027" +
    "\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\042\uff97\051\uff97\052\103\055\uff97\056\uff97\061" +
    "\uff97\063\uff97\064\uff97\067\uff97\074\uff97\001\002\000\100" +
    "\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\021\uffe5\022\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\032\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\042\uffe5\051\uffe5\052\uffe5\055\uffe5" +
    "\056\uffe5\061\uffe5\063\uffe5\067\uffe5\074\uffe5\001\002\000" +
    "\004\053\107\001\002\000\006\054\uff61\061\112\001\002" +
    "\000\006\054\uff62\062\154\001\002\000\004\054\113\001" +
    "\002\000\006\054\uff60\062\uff60\001\002\000\004\067\114" +
    "\001\002\000\006\042\116\063\uff69\001\002\000\004\063" +
    "\153\001\002\000\006\053\117\055\122\001\002\000\006" +
    "\053\117\055\122\001\002\000\010\054\uff68\062\uff68\063" +
    "\uff68\001\002\000\006\062\147\063\uff6a\001\002\000\012" +
    "\057\126\061\130\066\124\067\123\001\002\000\026\041" +
    "\uff9d\045\uff9d\046\uff9d\054\uff9d\056\uff9d\060\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\071\uff9d\001\002\000\026\041\uff9f\045" +
    "\uff9f\046\uff9f\054\uff9f\056\uff9f\060\uff9f\062\uff9f\063\uff9f" +
    "\064\uff9f\071\uff9f\001\002\000\006\056\uff64\062\uff64\001" +
    "\002\000\006\061\066\067\134\001\002\000\006\056\132" +
    "\062\131\001\002\000\026\041\uff9e\045\uff9e\046\uff9e\054" +
    "\uff9e\056\uff9e\060\uff9e\062\uff9e\063\uff9e\064\uff9e\071\uff9e" +
    "\001\002\000\012\057\126\061\130\066\124\067\123\001" +
    "\002\000\010\054\uff65\062\uff65\063\uff65\001\002\000\006" +
    "\056\uff63\062\uff63\001\002\000\112\002\uff51\004\uff51\005" +
    "\uff51\006\uff51\007\uff51\010\uff51\012\uff51\013\uff51\014\uff51" +
    "\015\uff51\016\uff51\021\uff51\022\uff51\025\uff51\026\uff51\027" +
    "\uff51\032\uff51\034\uff51\035\uff51\036\uff51\037\uff51\040\uff51" +
    "\042\uff51\051\uff51\052\uff51\055\uff51\056\uff51\060\uff51\061" +
    "\uff51\063\uff51\067\uff51\070\uff51\071\uff51\072\uff51\073\uff51" +
    "\074\uff51\001\002\000\010\060\137\070\140\071\136\001" +
    "\002\000\006\061\066\067\134\001\002\000\026\041\uff9c" +
    "\045\uff9c\046\uff9c\054\uff9c\056\uff9c\060\uff9c\062\uff9c\063" +
    "\uff9c\064\uff9c\071\uff9c\001\002\000\006\061\066\067\134" +
    "\001\002\000\112\002\uff56\004\uff56\005\uff56\006\uff56\007" +
    "\uff56\010\uff56\012\uff56\013\uff56\014\uff56\015\uff56\016\uff56" +
    "\021\uff56\022\uff56\025\uff56\026\uff56\027\uff56\032\uff56\034" +
    "\uff56\035\uff56\036\uff56\037\uff56\040\uff56\042\uff56\051\uff56" +
    "\052\uff56\055\uff56\056\uff56\060\uff56\061\uff56\063\uff56\067" +
    "\uff56\070\uff56\071\uff56\072\143\073\142\074\uff56\001\002" +
    "\000\006\061\066\067\134\001\002\000\006\061\066\067" +
    "\134\001\002\000\112\002\uff54\004\uff54\005\uff54\006\uff54" +
    "\007\uff54\010\uff54\012\uff54\013\uff54\014\uff54\015\uff54\016" +
    "\uff54\021\uff54\022\uff54\025\uff54\026\uff54\027\uff54\032\uff54" +
    "\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54\042\uff54\051" +
    "\uff54\052\uff54\055\uff54\056\uff54\060\uff54\061\uff54\063\uff54" +
    "\067\uff54\070\uff54\071\uff54\072\uff54\073\uff54\074\uff54\001" +
    "\002\000\112\002\uff53\004\uff53\005\uff53\006\uff53\007\uff53" +
    "\010\uff53\012\uff53\013\uff53\014\uff53\015\uff53\016\uff53\021" +
    "\uff53\022\uff53\025\uff53\026\uff53\027\uff53\032\uff53\034\uff53" +
    "\035\uff53\036\uff53\037\uff53\040\uff53\042\uff53\051\uff53\052" +
    "\uff53\055\uff53\056\uff53\060\uff53\061\uff53\063\uff53\067\uff53" +
    "\070\uff53\071\uff53\072\uff53\073\uff53\074\uff53\001\002\000" +
    "\112\002\uff57\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57" +
    "\012\uff57\013\uff57\014\uff57\015\uff57\016\uff57\021\uff57\022" +
    "\uff57\025\uff57\026\uff57\027\uff57\032\uff57\034\uff57\035\uff57" +
    "\036\uff57\037\uff57\040\uff57\042\uff57\051\uff57\052\uff57\055" +
    "\uff57\056\uff57\060\uff57\061\uff57\063\uff57\067\uff57\070\uff57" +
    "\071\uff57\072\143\073\142\074\uff57\001\002\000\006\053" +
    "\117\055\122\001\002\000\010\054\uff67\062\uff67\063\uff67" +
    "\001\002\000\006\054\152\062\147\001\002\000\010\054" +
    "\uff66\062\uff66\063\uff66\001\002\000\104\002\uff6b\004\uff6b" +
    "\005\uff6b\006\uff6b\007\uff6b\010\uff6b\012\uff6b\013\uff6b\014" +
    "\uff6b\015\uff6b\016\uff6b\021\uff6b\022\uff6b\025\uff6b\026\uff6b" +
    "\027\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037" +
    "\uff6b\040\uff6b\042\uff6b\051\uff6b\052\uff6b\055\uff6b\056\uff6b" +
    "\061\uff6b\063\uff6b\064\uff6b\067\uff6b\074\uff6b\001\002\000" +
    "\004\061\155\001\002\000\006\054\uff5f\062\uff5f\001\002" +
    "\000\106\002\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98" +
    "\021\uff98\022\uff98\025\uff98\026\uff98\027\uff98\032\uff98\033" +
    "\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\042\uff98" +
    "\051\uff98\052\uff98\055\uff98\056\uff98\061\uff98\063\uff98\064" +
    "\uff98\067\uff98\074\uff98\001\002\000\004\067\160\001\002" +
    "\000\006\042\162\063\161\001\002\000\110\002\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96" +
    "\013\uff96\014\uff96\015\uff96\016\uff96\021\uff96\022\uff96\025" +
    "\uff96\026\uff96\027\uff96\032\uff96\033\uff96\034\uff96\035\uff96" +
    "\036\uff96\037\uff96\040\uff96\042\uff96\051\uff96\052\uff96\055" +
    "\uff96\056\uff96\060\uff96\061\uff96\063\uff96\064\uff96\067\uff96" +
    "\074\uff96\001\002\000\012\057\126\061\130\066\124\067" +
    "\123\001\002\000\004\063\164\001\002\000\110\002\uff95" +
    "\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\014\uff95\015\uff95\016\uff95\021\uff95\022\uff95" +
    "\025\uff95\026\uff95\027\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\042\uff95\051\uff95\052\uff95" +
    "\055\uff95\056\uff95\060\uff95\061\uff95\063\uff95\064\uff95\067" +
    "\uff95\074\uff95\001\002\000\100\002\uffa9\004\uffa9\005\uffb0" +
    "\006\uffa9\007\uffa9\010\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\021\uffa9\022\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\032\uffa9\034\uffb0\035\uffb0\036\uffb0\037\uffa9\040\uffa9\042" +
    "\uffa9\051\073\052\uffa9\055\uffa9\056\uffa9\061\uffa9\063\uffa9" +
    "\067\uffa9\074\uffa9\001\002\000\004\063\167\001\002\000" +
    "\104\002\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\021\uffa0\022" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\042\uffa0\051\uffa0\052" +
    "\uffa0\055\uffa0\056\uffa0\061\uffa0\063\uffa0\064\uffa0\067\uffa0" +
    "\074\uffa0\001\002\000\076\002\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\021\uffc0\022\uffc0\025\uffc0\026\uffc0\027\uffc0\032" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0" +
    "\051\uffc0\052\uffc0\055\uffc0\061\uffc0\063\uffc0\067\uffc0\074" +
    "\uffc0\001\002\000\004\055\172\001\002\000\012\057\126" +
    "\061\130\066\124\067\123\001\002\000\006\056\174\062" +
    "\131\001\002\000\100\002\uff9a\004\uff9a\005\uff9a\006\uff9a" +
    "\007\uff9a\010\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\021\uff9a\022\uff9a\025\uff9a\026\uff9a\027\uff9a\032\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\042\uff9a\051" +
    "\uff9a\052\uff9a\055\uff9a\056\uff9a\061\uff9a\063\uff9a\067\uff9a" +
    "\074\uff9a\001\002\000\012\057\126\061\130\066\124\067" +
    "\123\001\002\000\004\041\237\001\002\000\012\045\uffcc" +
    "\046\235\054\uffcc\060\uffcc\001\002\000\004\060\201\001" +
    "\002\000\004\064\202\001\002\000\004\055\203\001\002" +
    "\000\044\012\045\013\010\014\076\015\041\016\015\021" +
    "\063\022\057\025\013\026\037\027\021\032\101\034\007" +
    "\036\056\037\071\040\070\052\103\067\217\001\002\000" +
    "\054\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\021\uffdb" +
    "\022\uffdb\025\uffdb\026\uffdb\027\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\052\uffdb\056\uffdb\063\uffdb" +
    "\064\uffdb\067\uffdb\001\002\000\054\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\021\uffd4\022\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\052\uffd4\056\uffd4\063\uffd4\064\uffd4\067\uffd4\001\002" +
    "\000\054\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\021" +
    "\uffdc\022\uffdc\025\uffdc\026\uffdc\027\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\036\uffdc\037\uffdc\040\uffdc\052\uffdc\056\uffdc\063" +
    "\uffdc\064\uffdc\067\uffdc\001\002\000\054\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\021\uffd6\022\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\052\uffd6\056\uffd6\063\uffd6\064\uffd6\067\uffd6\001" +
    "\002\000\054\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\021\uffe0\022\uffe0\025\uffe0\026\uffe0\027\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0\052\uffe0\056\uffe0" +
    "\063\uffe0\064\uffe0\067\uffe0\001\002\000\004\056\234\001" +
    "\002\000\054\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\021\uffd5\022\uffd5\025\uffd5\026\uffd5\027\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\052\uffd5\056\uffd5" +
    "\063\uffd5\064\uffd5\067\uffd5\001\002\000\054\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\021\uffd3\022\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\052\uffd3\056\uffd3\063\uffd3\064\uffd3\067\uffd3" +
    "\001\002\000\054\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\021\uffdf\022\uffdf\025\uffdf\026\uffdf\027\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\036\uffdf\037\uffdf\040\uffdf\052\uffdf\056" +
    "\uffdf\063\uffdf\064\uffdf\067\uffdf\001\002\000\054\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\021\uffd1\022\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\052\uffd1\056\uffd1\063\uffd1\064\uffd1\067" +
    "\uffd1\001\002\000\054\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\021\uffdd\022\uffdd\025\uffdd\026\uffdd\027\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd\052\uffdd" +
    "\056\uffdd\063\uffdd\064\uffdd\067\uffdd\001\002\000\004\042" +
    "\231\001\002\000\054\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\021\uffd0\022\uffd0\025\uffd0\026\uffd0\027\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\036\uffd0\037\uffd0\040\uffd0\052\uffd0" +
    "\056\uffd0\063\uffd0\064\uffd0\067\uffd0\001\002\000\054\012" +
    "\045\013\010\014\076\015\041\016\015\021\063\022\057" +
    "\025\013\026\037\027\021\032\101\033\uffe1\034\007\036" +
    "\056\037\071\040\070\052\103\056\uffe1\063\uffe1\064\uffe1" +
    "\067\217\001\002\000\054\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\021\uffde\022\uffde\025\uffde\026\uffde\027\uffde" +
    "\032\uffde\033\uffde\034\uffde\036\uffde\037\uffde\040\uffde\052" +
    "\uffde\056\uffde\063\uffde\064\uffde\067\uffde\001\002\000\054" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\021\uffd2\022" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\052\uffd2\056\uffd2\063\uffd2\064" +
    "\uffd2\067\uffd2\001\002\000\054\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\021\uffda\022\uffda\025\uffda\026\uffda\027" +
    "\uffda\032\uffda\033\uffda\034\uffda\036\uffda\037\uffda\040\uffda" +
    "\052\uffda\056\uffda\063\uffda\064\uffda\067\uffda\001\002\000" +
    "\054\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\021\uffd8" +
    "\022\uffd8\025\uffd8\026\uffd8\027\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\052\uffd8\056\uffd8\063\uffd8" +
    "\064\uffd8\067\uffd8\001\002\000\054\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\021\uffd9\022\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\052\uffd9\056\uffd9\063\uffd9\064\uffd9\067\uffd9\001\002" +
    "\000\054\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\021" +
    "\uffd7\022\uffd7\025\uffd7\026\uffd7\027\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\036\uffd7\037\uffd7\040\uffd7\052\uffd7\056\uffd7\063" +
    "\uffd7\064\uffd7\067\uffd7\001\002\000\014\032\uffe2\033\uffe2" +
    "\056\uffe2\063\uffe2\064\uffe2\001\002\000\012\057\126\061" +
    "\130\066\124\067\123\001\002\000\004\063\233\001\002" +
    "\000\106\002\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010" +
    "\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\021\uff94" +
    "\022\uff94\025\uff94\026\uff94\027\uff94\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\042\uff94\051\uff94" +
    "\052\uff94\055\uff94\056\uff94\060\uff94\061\uff94\063\uff94\064" +
    "\uff94\067\uff94\074\uff94\001\002\000\104\002\uff7f\004\uff7f" +
    "\005\uff7f\006\uff7f\007\uff7f\010\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\021\uff7f\022\uff7f\025\uff7f\026\uff7f" +
    "\027\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\042\uff7f\051\uff7f\052\uff7f\055\uff7f\056\uff7f" +
    "\061\uff7f\063\uff7f\064\uff7f\067\uff7f\074\uff7f\001\002\000" +
    "\012\057\126\061\130\066\124\067\123\001\002\000\010" +
    "\045\uffcd\054\uffcd\060\uffcd\001\002\000\012\057\126\061" +
    "\130\066\124\067\123\001\002\000\012\045\uffcb\046\uffcb" +
    "\054\uffcb\060\uffcb\001\002\000\004\056\242\001\002\000" +
    "\100\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\021\uffe9\022" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\032\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\042\uffe9\051\uffe9\052\uffe9\055" +
    "\uffe9\056\uffe9\061\uffe9\063\uffe9\067\uffe9\074\uffe9\001\002" +
    "\000\012\034\007\036\056\037\071\040\070\001\002\000" +
    "\004\067\245\001\002\000\004\047\246\001\002\000\004" +
    "\067\247\001\002\000\004\060\250\001\002\000\004\064" +
    "\251\001\002\000\004\055\252\001\002\000\044\012\045" +
    "\013\010\014\076\015\041\016\015\021\063\022\057\025" +
    "\013\026\037\027\021\032\101\034\007\036\056\037\071" +
    "\040\070\052\103\067\217\001\002\000\004\056\254\001" +
    "\002\000\104\002\uff7c\004\uff7c\005\uff7c\006\uff7c\007\uff7c" +
    "\010\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c\021" +
    "\uff7c\022\uff7c\025\uff7c\026\uff7c\027\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\042\uff7c\051" +
    "\uff7c\052\uff7c\055\uff7c\056\uff7c\061\uff7c\063\uff7c\064\uff7c" +
    "\067\uff7c\074\uff7c\001\002\000\044\012\045\013\010\014" +
    "\076\015\041\016\015\021\063\022\057\025\013\026\037" +
    "\027\021\032\101\034\007\036\056\037\071\040\070\052" +
    "\103\067\217\001\002\000\004\056\257\001\002\000\006" +
    "\023\262\024\263\001\002\000\104\002\uff74\004\uff74\005" +
    "\uff74\006\uff74\007\uff74\010\uff74\012\uff74\013\uff74\014\uff74" +
    "\015\uff74\016\uff74\021\uff74\022\uff74\025\uff74\026\uff74\027" +
    "\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74" +
    "\040\uff74\042\uff74\051\uff74\052\uff74\055\uff74\056\uff74\061" +
    "\uff74\063\uff74\064\uff74\067\uff74\074\uff74\001\002\000\104" +
    "\002\uff77\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77\012" +
    "\uff77\013\uff77\014\uff77\015\uff77\016\uff77\021\uff77\022\uff77" +
    "\025\uff77\026\uff77\027\uff77\032\uff77\033\uff77\034\uff77\035" +
    "\uff77\036\uff77\037\uff77\040\uff77\042\uff77\051\uff77\052\uff77" +
    "\055\uff77\056\uff77\061\uff77\063\uff77\064\uff77\067\uff77\074" +
    "\uff77\001\002\000\004\055\273\001\002\000\004\055\270" +
    "\001\002\000\106\002\uff75\004\uff75\005\uff75\006\uff75\007" +
    "\uff75\010\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75" +
    "\021\uff75\022\uff75\024\263\025\uff75\026\uff75\027\uff75\032" +
    "\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75" +
    "\042\uff75\051\uff75\052\uff75\055\uff75\056\uff75\061\uff75\063" +
    "\uff75\064\uff75\067\uff75\074\uff75\001\002\000\110\002\uff72" +
    "\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\012\uff72\013" +
    "\uff72\014\uff72\015\uff72\016\uff72\021\uff72\022\uff72\023\262" +
    "\024\uff72\025\uff72\026\uff72\027\uff72\032\uff72\033\uff72\034" +
    "\uff72\035\uff72\036\uff72\037\uff72\040\uff72\042\uff72\051\uff72" +
    "\052\uff72\055\uff72\056\uff72\061\uff72\063\uff72\064\uff72\067" +
    "\uff72\074\uff72\001\002\000\106\002\uff73\004\uff73\005\uff73" +
    "\006\uff73\007\uff73\010\uff73\012\uff73\013\uff73\014\uff73\015" +
    "\uff73\016\uff73\021\uff73\022\uff73\024\uff73\025\uff73\026\uff73" +
    "\027\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037" +
    "\uff73\040\uff73\042\uff73\051\uff73\052\uff73\055\uff73\056\uff73" +
    "\061\uff73\063\uff73\064\uff73\067\uff73\074\uff73\001\002\000" +
    "\104\002\uff76\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76" +
    "\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76\021\uff76\022" +
    "\uff76\025\uff76\026\uff76\027\uff76\032\uff76\033\uff76\034\uff76" +
    "\035\uff76\036\uff76\037\uff76\040\uff76\042\uff76\051\uff76\052" +
    "\uff76\055\uff76\056\uff76\061\uff76\063\uff76\064\uff76\067\uff76" +
    "\074\uff76\001\002\000\044\012\045\013\010\014\076\015" +
    "\041\016\015\021\063\022\057\025\013\026\037\027\021" +
    "\032\101\034\007\036\056\037\071\040\070\052\103\067" +
    "\217\001\002\000\004\056\272\001\002\000\104\002\uff70" +
    "\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70\012\uff70\013" +
    "\uff70\014\uff70\015\uff70\016\uff70\021\uff70\022\uff70\025\uff70" +
    "\026\uff70\027\uff70\032\uff70\033\uff70\034\uff70\035\uff70\036" +
    "\uff70\037\uff70\040\uff70\042\uff70\051\uff70\052\uff70\055\uff70" +
    "\056\uff70\061\uff70\063\uff70\064\uff70\067\uff70\074\uff70\001" +
    "\002\000\044\012\045\013\010\014\076\015\041\016\015" +
    "\021\063\022\057\025\013\026\037\027\021\032\101\034" +
    "\007\036\056\037\071\040\070\052\103\067\217\001\002" +
    "\000\004\056\275\001\002\000\110\002\uff71\004\uff71\005" +
    "\uff71\006\uff71\007\uff71\010\uff71\012\uff71\013\uff71\014\uff71" +
    "\015\uff71\016\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025" +
    "\uff71\026\uff71\027\uff71\032\uff71\033\uff71\034\uff71\035\uff71" +
    "\036\uff71\037\uff71\040\uff71\042\uff71\051\uff71\052\uff71\055" +
    "\uff71\056\uff71\061\uff71\063\uff71\064\uff71\067\uff71\074\uff71" +
    "\001\002\000\004\005\uffa1\001\002\000\004\005\uffa3\001" +
    "\002\000\004\005\uffa2\001\002\000\004\005\320\001\002" +
    "\000\004\067\303\001\002\000\004\057\304\001\002\000" +
    "\014\034\007\036\056\037\071\040\070\060\uffc9\001\002" +
    "\000\004\060\314\001\002\000\006\060\uffca\062\312\001" +
    "\002\000\004\067\311\001\002\000\006\060\uffc8\062\uffc8" +
    "\001\002\000\006\060\uffc6\062\uffc6\001\002\000\012\034" +
    "\007\036\056\037\071\040\070\001\002\000\006\060\uffc7" +
    "\062\uffc7\001\002\000\004\055\315\001\002\000\044\012" +
    "\045\013\010\014\076\015\041\016\015\021\063\022\057" +
    "\025\013\026\037\027\021\032\101\034\007\036\056\037" +
    "\071\040\070\052\103\067\217\001\002\000\004\056\317" +
    "\001\002\000\100\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\021\uffa5\022\uffa5\025\uffa5\026\uffa5\027\uffa5\032\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042\uffa5\051\uffa5" +
    "\052\uffa5\055\uffa5\056\uffa5\061\uffa5\063\uffa5\067\uffa5\074" +
    "\uffa5\001\002\000\004\067\321\001\002\000\004\057\322" +
    "\001\002\000\014\034\007\036\056\037\071\040\070\060" +
    "\uffc9\001\002\000\004\060\324\001\002\000\004\055\325" +
    "\001\002\000\044\012\045\013\010\014\076\015\041\016" +
    "\015\021\063\022\057\025\013\026\037\027\021\032\101" +
    "\034\007\036\056\037\071\040\070\052\103\067\217\001" +
    "\002\000\004\032\101\001\002\000\004\056\330\001\002" +
    "\000\100\002\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\021\uffa4" +
    "\022\uffa4\025\uffa4\026\uffa4\027\uffa4\032\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\042\uffa4\051\uffa4\052\uffa4" +
    "\055\uffa4\056\uffa4\061\uffa4\063\uffa4\067\uffa4\074\uffa4\001" +
    "\002\000\004\055\332\001\002\000\014\011\uffba\050\335" +
    "\051\uffba\052\uffba\056\uffba\001\002\000\012\011\uffb8\051" +
    "\uffb8\052\103\056\uffb8\001\002\000\012\011\uffbb\051\uffbb" +
    "\052\uffbb\056\uffbb\001\002\000\004\067\340\001\002\000" +
    "\014\011\uffb6\050\335\051\uffb6\052\uffb6\056\uffb6\001\002" +
    "\000\012\011\uffb7\051\uffb7\052\uffb7\056\uffb7\001\002\000" +
    "\004\063\341\001\002\000\014\011\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\056\uffb5\001\002\000\010\011\uffb9\051\uffb9\056" +
    "\uffb9\001\002\000\010\011\uffb0\051\073\056\uffbc\001\002" +
    "\000\004\056\363\001\002\000\004\056\uffbd\001\002\000" +
    "\004\011\351\001\002\000\010\011\uffb0\051\073\056\uffb3" +
    "\001\002\000\004\056\uffb4\001\002\000\004\067\352\001" +
    "\002\000\004\055\353\001\002\000\026\005\uffb0\006\020" +
    "\007\077\010\051\034\uffb0\035\uffb0\036\uffb0\051\073\052" +
    "\103\056\uffaa\001\002\000\004\056\uffae\001\002\000\004" +
    "\056\uffaf\001\002\000\016\005\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\051\073\056\uffad\001\002\000\004\056\uffac\001\002" +
    "\000\004\056\362\001\002\000\004\056\uffab\001\002\000" +
    "\010\011\uffb2\051\uffb2\056\uffb2\001\002\000\076\002\uffbe" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\021\uffbe\022\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\032\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\042\uffbe\051\uffbe\052\uffbe\055\uffbe\061\uffbe" +
    "\063\uffbe\067\uffbe\074\uffbe\001\002\000\004\055\365\001" +
    "\002\000\004\052\103\001\002\000\004\056\367\001\002" +
    "\000\100\002\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\021\uff99" +
    "\022\uff99\025\uff99\026\uff99\027\uff99\032\uff99\034\uff99\035" +
    "\uff99\036\uff99\037\uff99\040\uff99\042\uff99\051\uff99\052\uff99" +
    "\055\uff99\056\uff99\061\uff99\063\uff99\067\uff99\074\uff99\001" +
    "\002\000\100\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\021" +
    "\ufffc\022\ufffc\025\ufffc\026\ufffc\027\ufffc\032\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\042\ufffc\051\ufffc\052" +
    "\ufffc\055\ufffc\056\ufffc\061\ufffc\063\ufffc\067\ufffc\074\ufffc" +
    "\001\002\000\012\034\007\036\056\037\071\040\070\001" +
    "\002\000\004\054\373\001\002\000\004\067\374\001\002" +
    "\000\004\042\375\001\002\000\004\067\376\001\002\000" +
    "\004\043\377\001\002\000\006\053\117\055\122\001\002" +
    "\000\006\062\147\063\u0101\001\002\000\104\002\uff5e\004" +
    "\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e\012\uff5e\013\uff5e" +
    "\014\uff5e\015\uff5e\016\uff5e\021\uff5e\022\uff5e\025\uff5e\026" +
    "\uff5e\027\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e" +
    "\037\uff5e\040\uff5e\042\uff5e\051\uff5e\052\uff5e\055\uff5e\056" +
    "\uff5e\061\uff5e\063\uff5e\064\uff5e\067\uff5e\074\uff5e\001\002" +
    "\000\012\057\126\061\130\066\124\067\123\001\002\000" +
    "\004\060\u0104\001\002\000\004\064\u0105\001\002\000\004" +
    "\055\u0106\001\002\000\044\012\045\013\010\014\076\015" +
    "\041\016\015\021\063\022\057\025\013\026\037\027\021" +
    "\032\101\034\007\036\056\037\071\040\070\052\103\067" +
    "\217\001\002\000\004\056\u0108\001\002\000\104\002\uff80" +
    "\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80\012\uff80\013" +
    "\uff80\014\uff80\015\uff80\016\uff80\021\uff80\022\uff80\025\uff80" +
    "\026\uff80\027\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036" +
    "\uff80\037\uff80\040\uff80\042\uff80\051\uff80\052\uff80\055\uff80" +
    "\056\uff80\061\uff80\063\uff80\064\uff80\067\uff80\074\uff80\001" +
    "\002\000\004\057\u0113\001\002\000\106\002\uff87\004\uff87" +
    "\005\uff87\006\uff87\007\uff87\010\uff87\012\uff87\013\uff87\014" +
    "\uff87\015\uff87\016\uff87\021\uff87\022\uff87\025\uff87\026\uff87" +
    "\027\uff87\030\u010f\032\uff87\033\uff87\034\uff87\035\uff87\036" +
    "\uff87\037\uff87\040\uff87\042\uff87\051\uff87\052\uff87\055\uff87" +
    "\056\uff87\061\uff87\063\uff87\064\uff87\067\uff87\074\uff87\001" +
    "\002\000\110\002\uff85\004\uff85\005\uff85\006\uff85\007\uff85" +
    "\010\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\021" +
    "\uff85\022\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\u0109" +
    "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\042\uff85\051\uff85\052\uff85\055\uff85\056\uff85\061\uff85" +
    "\063\uff85\064\uff85\067\uff85\074\uff85\001\002\000\106\002" +
    "\uff84\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\012\uff84" +
    "\013\uff84\014\uff84\015\uff84\016\uff84\021\uff84\022\uff84\025" +
    "\uff84\026\uff84\027\uff84\030\uff84\032\uff84\033\uff84\034\uff84" +
    "\035\uff84\036\uff84\037\uff84\040\uff84\042\uff84\051\uff84\052" +
    "\uff84\055\uff84\056\uff84\061\uff84\063\uff84\064\uff84\067\uff84" +
    "\074\uff84\001\002\000\104\002\uff86\004\uff86\005\uff86\006" +
    "\uff86\007\uff86\010\uff86\012\uff86\013\uff86\014\uff86\015\uff86" +
    "\016\uff86\021\uff86\022\uff86\025\uff86\026\uff86\027\uff86\032" +
    "\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86" +
    "\042\uff86\051\uff86\052\uff86\055\uff86\056\uff86\061\uff86\063" +
    "\uff86\064\uff86\067\uff86\074\uff86\001\002\000\104\002\uff88" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\012\uff88\013" +
    "\uff88\014\uff88\015\uff88\016\uff88\021\uff88\022\uff88\025\uff88" +
    "\026\uff88\027\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036" +
    "\uff88\037\uff88\040\uff88\042\uff88\051\uff88\052\uff88\055\uff88" +
    "\056\uff88\061\uff88\063\uff88\064\uff88\067\uff88\074\uff88\001" +
    "\002\000\004\055\u0110\001\002\000\044\012\045\013\010" +
    "\014\076\015\041\016\015\021\063\022\057\025\013\026" +
    "\037\027\021\032\101\034\007\036\056\037\071\040\070" +
    "\052\103\067\217\001\002\000\004\056\u0112\001\002\000" +
    "\104\002\uff81\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81" +
    "\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\021\uff81\022" +
    "\uff81\025\uff81\026\uff81\027\uff81\032\uff81\033\uff81\034\uff81" +
    "\035\uff81\036\uff81\037\uff81\040\uff81\042\uff81\051\uff81\052" +
    "\uff81\055\uff81\056\uff81\061\uff81\063\uff81\064\uff81\067\uff81" +
    "\074\uff81\001\002\000\012\057\126\061\130\066\124\067" +
    "\123\001\002\000\004\060\u0115\001\002\000\004\055\u0116" +
    "\001\002\000\044\012\045\013\010\014\076\015\041\016" +
    "\015\021\063\022\057\025\013\026\037\027\021\032\101" +
    "\034\007\036\056\037\071\040\070\052\103\067\217\001" +
    "\002\000\004\056\u0118\001\002\000\110\002\uff82\004\uff82" +
    "\005\uff82\006\uff82\007\uff82\010\uff82\012\uff82\013\uff82\014" +
    "\uff82\015\uff82\016\uff82\021\uff82\022\uff82\025\uff82\026\uff82" +
    "\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035" +
    "\uff82\036\uff82\037\uff82\040\uff82\042\uff82\051\uff82\052\uff82" +
    "\055\uff82\056\uff82\061\uff82\063\uff82\064\uff82\067\uff82\074" +
    "\uff82\001\002\000\004\060\u011a\001\002\000\004\063\u011b" +
    "\001\002\000\104\002\uff6c\004\uff6c\005\uff6c\006\uff6c\007" +
    "\uff6c\010\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c" +
    "\021\uff6c\022\uff6c\025\uff6c\026\uff6c\027\uff6c\032\uff6c\033" +
    "\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\042\uff6c" +
    "\051\uff6c\052\uff6c\055\uff6c\056\uff6c\061\uff6c\063\uff6c\064" +
    "\uff6c\067\uff6c\074\uff6c\001\002\000\004\002\001\001\002" +
    "\000\004\002\000\001\002\000\012\057\126\061\130\066" +
    "\124\067\123\001\002\000\004\060\u0120\001\002\000\004" +
    "\055\u0121\001\002\000\044\012\045\013\010\014\076\015" +
    "\041\016\015\021\063\022\057\025\013\026\037\027\021" +
    "\032\101\034\007\036\056\037\071\040\070\052\103\067" +
    "\217\001\002\000\004\056\u0123\001\002\000\110\002\uff83" +
    "\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\012\uff83\013" +
    "\uff83\014\uff83\015\uff83\016\uff83\021\uff83\022\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\042\uff83\051\uff83" +
    "\052\uff83\055\uff83\056\uff83\061\uff83\063\uff83\064\uff83\067" +
    "\uff83\074\uff83\001\002\000\004\055\u0125\001\002\000\044" +
    "\012\045\013\010\014\076\015\041\016\015\021\063\022" +
    "\057\025\013\026\037\027\021\032\101\034\007\036\056" +
    "\037\071\040\070\052\103\067\217\001\002\000\004\056" +
    "\u0127\001\002\000\100\002\uff9b\004\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016" +
    "\uff9b\021\uff9b\022\uff9b\025\uff9b\026\uff9b\027\uff9b\032\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\042\uff9b\051" +
    "\uff9b\052\uff9b\055\uff9b\056\uff9b\061\uff9b\063\uff9b\067\uff9b" +
    "\074\uff9b\001\002\000\104\002\uff92\004\uff92\005\uff92\006" +
    "\uff92\007\uff92\010\uff92\012\uff92\013\uff92\014\uff92\015\uff92" +
    "\016\uff92\021\uff92\022\uff92\025\uff92\026\uff92\027\uff92\032" +
    "\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92" +
    "\042\uff92\051\uff92\052\uff92\055\uff92\056\uff92\061\uff92\063" +
    "\uff92\064\uff92\067\uff92\074\uff92\001\002\000\004\064\u0139" +
    "\001\002\000\106\002\uff91\004\uff91\005\uff91\006\uff91\007" +
    "\uff91\010\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91" +
    "\020\u0129\021\uff91\022\uff91\025\uff91\026\uff91\027\uff91\032" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\042\uff91\051\uff91\052\uff91\055\uff91\056\uff91\061\uff91\063" +
    "\uff91\064\uff91\067\uff91\074\uff91\001\002\000\110\002\uff8e" +
    "\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\013" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\017\u012c\020\uff8e\021\uff8e" +
    "\022\uff8e\025\uff8e\026\uff8e\027\uff8e\032\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\042\uff8e\051\uff8e" +
    "\052\uff8e\055\uff8e\056\uff8e\061\uff8e\063\uff8e\064\uff8e\067" +
    "\uff8e\074\uff8e\001\002\000\012\057\126\061\130\066\124" +
    "\067\123\001\002\000\004\064\u012e\001\002\000\004\055" +
    "\u012f\001\002\000\044\012\045\013\010\014\076\015\041" +
    "\016\015\021\063\022\057\025\013\026\037\027\021\032" +
    "\101\034\007\036\056\037\071\040\070\052\103\067\217" +
    "\001\002\000\006\032\101\033\u0133\001\002\000\004\056" +
    "\u0136\001\002\000\004\056\uff8b\001\002\000\004\063\u0135" +
    "\001\002\000\004\056\uff8c\001\002\000\004\056\uff89\001" +
    "\002\000\110\002\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\020\uff8d\021\uff8d\022\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\042\uff8d\051\uff8d\052\uff8d\055\uff8d\056\uff8d\061\uff8d" +
    "\063\uff8d\064\uff8d\067\uff8d\074\uff8d\001\002\000\106\002" +
    "\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\012\uff8f" +
    "\013\uff8f\014\uff8f\015\uff8f\016\uff8f\020\uff8f\021\uff8f\022" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\040\uff8f\042\uff8f\051\uff8f\052" +
    "\uff8f\055\uff8f\056\uff8f\061\uff8f\063\uff8f\064\uff8f\067\uff8f" +
    "\074\uff8f\001\002\000\104\002\uff93\004\uff93\005\uff93\006" +
    "\uff93\007\uff93\010\uff93\012\uff93\013\uff93\014\uff93\015\uff93" +
    "\016\uff93\021\uff93\022\uff93\025\uff93\026\uff93\027\uff93\032" +
    "\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93" +
    "\042\uff93\051\uff93\052\uff93\055\uff93\056\uff93\061\uff93\063" +
    "\uff93\064\uff93\067\uff93\074\uff93\001\002\000\004\055\u013a" +
    "\001\002\000\044\012\045\013\010\014\076\015\041\016" +
    "\015\021\063\022\057\025\013\026\037\027\021\032\101" +
    "\034\007\036\056\037\071\040\070\052\103\067\217\001" +
    "\002\000\006\032\101\033\u0133\001\002\000\004\056\u013d" +
    "\001\002\000\104\002\uff8a\004\uff8a\005\uff8a\006\uff8a\007" +
    "\uff8a\010\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\021\uff8a\022\uff8a\025\uff8a\026\uff8a\027\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\042\uff8a" +
    "\051\uff8a\052\uff8a\055\uff8a\056\uff8a\061\uff8a\063\uff8a\064" +
    "\uff8a\067\uff8a\074\uff8a\001\002\000\004\063\u0154\001\002" +
    "\000\006\041\237\063\u0153\001\002\000\016\034\007\036" +
    "\056\037\071\040\070\061\066\067\134\001\002\000\004" +
    "\045\u0142\001\002\000\044\012\045\013\010\014\076\015" +
    "\041\016\015\021\063\022\057\025\013\026\037\027\021" +
    "\032\101\034\007\036\056\037\071\040\070\052\103\067" +
    "\217\001\002\000\004\064\u0144\001\002\000\044\012\045" +
    "\013\010\014\076\015\041\016\015\021\063\022\057\025" +
    "\013\026\037\027\021\032\101\034\007\036\056\037\071" +
    "\040\070\052\103\067\217\001\002\000\004\063\u0146\001" +
    "\002\000\100\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\021" +
    "\uffc4\022\uffc4\025\uffc4\026\uffc4\027\uffc4\032\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\042\uffc4\051\uffc4\052" +
    "\uffc4\055\uffc4\056\uffc4\061\uffc4\063\uffc4\067\uffc4\074\uffc4" +
    "\001\002\000\006\060\u0150\062\312\001\002\000\006\060" +
    "\u0149\062\uffc8\001\002\000\004\043\u014a\001\002\000\046" +
    "\012\045\013\010\014\076\015\041\016\015\021\063\022" +
    "\057\025\013\026\037\027\021\032\101\034\007\036\056" +
    "\037\071\040\070\052\103\055\u014c\067\217\001\002\000" +
    "\004\063\uff59\001\002\000\044\012\045\013\010\014\076" +
    "\015\041\016\015\021\063\022\057\025\013\026\037\027" +
    "\021\032\101\034\007\036\056\037\071\040\070\052\103" +
    "\067\217\001\002\000\004\063\uff5b\001\002\000\004\056" +
    "\u014f\001\002\000\004\063\uff5a\001\002\000\004\043\u0151" +
    "\001\002\000\046\012\045\013\010\014\076\015\041\016" +
    "\015\021\063\022\057\025\013\026\037\027\021\032\101" +
    "\034\007\036\056\037\071\040\070\052\103\055\u014c\067" +
    "\217\001\002\000\004\063\uff5c\001\002\000\100\002\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\021\uffc3\022\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\042\uffc3\051\uffc3\052\uffc3\055\uffc3\056\uffc3" +
    "\061\uffc3\063\uffc3\067\uffc3\074\uffc3\001\002\000\100\002" +
    "\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\016\uffc5\021\uffc5\022\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\042\uffc5\051\uffc5\052\uffc5\055\uffc5\056" +
    "\uffc5\061\uffc5\063\uffc5\067\uffc5\074\uffc5\001\002\000\012" +
    "\057\126\061\130\066\124\067\123\001\002\000\004\060" +
    "\u0157\001\002\000\006\017\uff90\020\uff90\001\002\000\004" +
    "\063\u015f\001\002\000\004\045\u015a\001\002\000\044\012" +
    "\045\013\010\014\076\015\041\016\015\021\063\022\057" +
    "\025\013\026\037\027\021\032\101\034\007\036\056\037" +
    "\071\040\070\052\103\067\217\001\002\000\004\064\u015c" +
    "\001\002\000\044\012\045\013\010\014\076\015\041\016" +
    "\015\021\063\022\057\025\013\026\037\027\021\032\101" +
    "\034\007\036\056\037\071\040\070\052\103\067\217\001" +
    "\002\000\004\063\u015e\001\002\000\104\002\uff58\004\uff58" +
    "\005\uff58\006\uff58\007\uff58\010\uff58\012\uff58\013\uff58\014" +
    "\uff58\015\uff58\016\uff58\021\uff58\022\uff58\025\uff58\026\uff58" +
    "\027\uff58\032\uff58\033\uff58\034\uff58\035\uff58\036\uff58\037" +
    "\uff58\040\uff58\042\uff58\051\uff58\052\uff58\055\uff58\056\uff58" +
    "\061\uff58\063\uff58\064\uff58\067\uff58\074\uff58\001\002\000" +
    "\104\002\uff5d\004\uff5d\005\uff5d\006\uff5d\007\uff5d\010\uff5d" +
    "\012\uff5d\013\uff5d\014\uff5d\015\uff5d\016\uff5d\021\uff5d\022" +
    "\uff5d\025\uff5d\026\uff5d\027\uff5d\032\uff5d\033\uff5d\034\uff5d" +
    "\035\uff5d\036\uff5d\037\uff5d\040\uff5d\042\uff5d\051\uff5d\052" +
    "\uff5d\055\uff5d\056\uff5d\061\uff5d\063\uff5d\064\uff5d\067\uff5d" +
    "\074\uff5d\001\002\000\012\057\126\061\130\066\124\067" +
    "\123\001\002\000\006\060\u0164\071\u0163\001\002\000\006" +
    "\060\uff6e\071\uff6e\001\002\000\012\057\126\061\130\066" +
    "\124\067\123\001\002\000\004\063\u0165\001\002\000\104" +
    "\002\uff6f\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\012" +
    "\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\021\uff6f\022\uff6f" +
    "\025\uff6f\026\uff6f\027\uff6f\032\uff6f\033\uff6f\034\uff6f\035" +
    "\uff6f\036\uff6f\037\uff6f\040\uff6f\042\uff6f\051\uff6f\052\uff6f" +
    "\055\uff6f\056\uff6f\061\uff6f\063\uff6f\064\uff6f\067\uff6f\074" +
    "\uff6f\001\002\000\006\060\uff6d\071\uff6d\001\002\000\100" +
    "\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\021\uffe3\022\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\032\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\042\uffe3\051\uffe3\052\uffe3\055\uffe3" +
    "\056\uffe3\061\uffe3\063\uffe3\067\uffe3\074\uffe3\001\002\000" +
    "\004\052\103\001\002\000\004\060\u016a\001\002\000\004" +
    "\057\u016b\001\002\000\004\067\217\001\002\000\004\060" +
    "\u016d\001\002\000\004\057\u016e\001\002\000\004\067\u016f" +
    "\001\002\000\004\044\u0178\001\002\000\004\060\u0171\001" +
    "\002\000\004\053\u0172\001\002\000\012\057\126\061\130" +
    "\066\124\067\123\001\002\000\004\054\u0174\001\002\000" +
    "\004\055\u0175\001\002\000\044\012\045\013\010\014\076" +
    "\015\041\016\015\021\063\022\057\025\013\026\037\027" +
    "\021\032\101\034\007\036\056\037\071\040\070\052\103" +
    "\067\217\001\002\000\004\056\u0177\001\002\000\104\002" +
    "\uff7e\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\012\uff7e" +
    "\013\uff7e\014\uff7e\015\uff7e\016\uff7e\021\uff7e\022\uff7e\025" +
    "\uff7e\026\uff7e\027\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e" +
    "\036\uff7e\037\uff7e\040\uff7e\042\uff7e\051\uff7e\052\uff7e\055" +
    "\uff7e\056\uff7e\061\uff7e\063\uff7e\064\uff7e\067\uff7e\074\uff7e" +
    "\001\002\000\004\063\u0179\001\002\000\004\060\uff7d\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\122\002\034\003\035\004\051\007\101\010" +
    "\104\011\024\012\011\013\066\014\026\015\041\016\057" +
    "\017\043\020\023\021\003\022\064\023\071\024\073\025" +
    "\022\026\032\027\004\030\054\035\033\036\042\037\060" +
    "\043\105\046\053\055\074\056\005\060\021\063\046\066" +
    "\045\067\077\070\103\073\025\101\016\110\037\116\031" +
    "\121\013\122\061\123\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\061\u0158\076\176\107\175\115\u0157\001\001" +
    "\000\002\001\001\000\012\061\u0140\076\176\107\u013e\115" +
    "\u013d\001\001\000\010\031\u0129\032\u0127\065\u012a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\122\002\034\003\u011c\004\051\007\101\010\104\011" +
    "\024\012\011\013\066\014\026\015\041\016\057\017\043" +
    "\020\023\021\003\022\064\023\071\024\073\025\022\026" +
    "\032\027\004\030\054\035\033\036\042\037\060\043\105" +
    "\046\053\055\074\056\005\060\021\063\046\066\045\067" +
    "\077\070\103\073\025\101\016\110\037\116\031\121\013" +
    "\122\061\123\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\057\u0109\077\u010a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\112\007\101\010\104\011\024\012\011" +
    "\013\066\014\026\015\041\016\057\017\043\020\023\021" +
    "\003\022\064\023\071\024\073\025\022\026\032\027\004" +
    "\030\054\035\033\036\042\037\060\043\105\046\053\055" +
    "\074\056\005\060\367\063\046\066\045\070\103\073\025" +
    "\101\016\110\037\116\031\121\013\122\061\123\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\106\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\112\007\101\010\104\011\024\012\011" +
    "\013\066\014\026\015\041\016\057\017\043\020\023\021" +
    "\003\022\064\023\071\024\073\025\022\026\032\027\004" +
    "\030\054\035\033\036\042\037\060\043\105\046\053\055" +
    "\074\056\005\060\240\063\046\066\045\070\103\073\025" +
    "\101\016\110\037\116\031\121\013\122\061\123\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\167\001\001\000" +
    "\004\107\165\001\001\000\014\007\164\046\053\055\074" +
    "\056\005\122\061\001\001\000\004\043\156\001\001\000" +
    "\006\013\155\070\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\107\054\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\114\001\001\000\002\001\001\000\006\044" +
    "\120\050\117\001\001\000\006\044\150\050\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\126\107" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\063\134\073\025\116\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\073\145\116\031\001\001\000\002" +
    "\001\001\000\006\073\140\116\031\001\001\000\002\001" +
    "\001\000\004\116\144\001\001\000\004\116\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\164\046\053" +
    "\055\074\056\005\122\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\172\107\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\061\177\076\176\107\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\013\224\014\207\015\213" +
    "\016\221\017\215\020\205\021\203\022\223\023\225\024" +
    "\226\025\206\026\211\027\204\030\217\035\212\036\214" +
    "\037\222\043\105\064\210\070\103\072\220\101\016\110" +
    "\037\121\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\013\224\014\207\015\213" +
    "\016\221\017\215\020\205\021\203\022\223\023\225\024" +
    "\226\025\206\026\211\027\204\030\217\035\212\036\214" +
    "\037\222\043\105\064\227\070\103\072\220\101\016\110" +
    "\037\121\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\061\235\076\176\107\175\001\001\000\002\001\001" +
    "\000\004\107\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\013\224" +
    "\014\207\015\213\016\221\017\215\020\205\021\203\022" +
    "\223\023\225\024\226\025\206\026\211\027\204\030\217" +
    "\035\212\036\214\037\222\043\105\064\252\070\103\072" +
    "\220\101\016\110\037\121\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\013\224\014\207\015\213\016" +
    "\221\017\215\020\205\021\203\022\223\023\225\024\226" +
    "\025\206\026\211\027\204\030\217\035\212\036\214\037" +
    "\222\043\105\064\255\070\103\072\220\101\016\110\037" +
    "\121\013\001\001\000\002\001\001\000\012\033\263\034" +
    "\257\074\260\075\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\266\001\001\000\006\033\265\075\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\013\224\014\207\015" +
    "\213\016\221\017\215\020\205\021\203\022\223\023\225" +
    "\024\226\025\206\026\211\027\204\030\217\035\212\036" +
    "\214\037\222\043\105\064\270\070\103\072\220\101\016" +
    "\110\037\121\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\013\224\014\207\015\213\016\221\017\215" +
    "\020\205\021\203\022\223\023\225\024\226\025\206\026" +
    "\211\027\204\030\217\035\212\036\214\037\222\043\105" +
    "\064\273\070\103\072\220\101\016\110\037\121\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\043\306\062\304" +
    "\071\307\105\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\306\071\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\013\224\014\207\015\213\016\221" +
    "\017\215\020\205\021\203\022\223\023\225\024\226\025" +
    "\206\026\211\027\204\030\217\035\212\036\214\037\222" +
    "\043\105\064\315\070\103\072\220\101\016\110\037\121" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\043\306\062\322\071" +
    "\307\105\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\013\224\014\207\015\213\016\221\017\215\020" +
    "\205\021\203\022\223\023\225\024\226\025\206\026\211" +
    "\027\204\030\217\035\212\036\214\037\222\043\105\064" +
    "\325\070\103\072\220\101\016\110\037\121\013\001\001" +
    "\000\004\035\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\333\051\332\117\335" +
    "\001\001\000\010\013\341\052\342\070\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\336\117\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\344\046\345\053\343" +
    "\120\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\347\046\345\120\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\355\010\356\011\353\012\360\013\354\046\053" +
    "\047\357\055\074\056\005\070\103\122\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\164\046\053" +
    "\055\074\056\005\122\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\365\070\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\377\050\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\061\u0102\076\176\107\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\013\224\014\207\015\213\016\221\017\215\020\205" +
    "\021\203\022\223\023\225\024\226\025\206\026\211\027" +
    "\204\030\217\035\212\036\214\037\222\043\105\064\u0106" +
    "\070\103\072\220\101\016\110\037\121\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\100\u010d\113\u010c\001\001\000\006\057\u010b\077\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\013\224\014\207\015\213\016" +
    "\221\017\215\020\205\021\203\022\223\023\225\024\226" +
    "\025\206\026\211\027\204\030\217\035\212\036\214\037" +
    "\222\043\105\064\u0110\070\103\072\220\101\016\110\037" +
    "\121\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\061\u0113\076\176\107\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\013\224\014\207\015\213\016" +
    "\221\017\215\020\205\021\203\022\223\023\225\024\226" +
    "\025\206\026\211\027\204\030\217\035\212\036\214\037" +
    "\222\043\105\064\u0116\070\103\072\220\101\016\110\037" +
    "\121\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\061\u011e\076\176\107" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\013\224\014\207\015\213\016\221\017\215\020\205\021" +
    "\203\022\223\023\225\024\226\025\206\026\211\027\204" +
    "\030\217\035\212\036\214\037\222\043\105\064\u0121\070" +
    "\103\072\220\101\016\110\037\121\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\013" +
    "\224\014\207\015\213\016\221\017\215\020\205\021\203" +
    "\022\223\023\225\024\226\025\206\026\211\027\204\030" +
    "\217\035\212\036\214\037\222\043\105\064\u0125\070\103" +
    "\072\220\101\016\110\037\121\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u0137\001\001\000\006\031\u0136\065\u012a\001" +
    "\001\000\004\107\u012c\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\013\224\014\207\015\213\016\221\017" +
    "\215\020\205\021\203\022\223\023\225\024\226\025\206" +
    "\026\211\027\204\030\217\035\212\036\214\037\222\043" +
    "\105\064\u012f\070\103\072\220\101\016\110\037\121\013" +
    "\001\001\000\010\035\u0133\102\u0131\103\u0130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\013\224" +
    "\014\207\015\213\016\221\017\215\020\205\021\203\022" +
    "\223\023\225\024\226\025\206\026\211\027\204\030\217" +
    "\035\212\036\214\037\222\043\105\064\u013a\070\103\072" +
    "\220\101\016\110\037\121\013\001\001\000\010\035\u0133" +
    "\102\u0131\103\u013b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\043\306" +
    "\063\134\071\u0147\073\025\105\u0146\116\031\001\001\000" +
    "\002\001\001\000\062\013\224\014\207\015\213\016\221" +
    "\017\215\020\205\021\203\022\223\023\225\024\226\025" +
    "\206\026\211\027\204\030\217\035\212\036\214\037\222" +
    "\043\105\064\u0142\070\103\072\220\101\016\110\037\121" +
    "\013\001\001\000\002\001\001\000\062\013\224\014\207" +
    "\015\213\016\221\017\215\020\205\021\203\022\223\023" +
    "\225\024\226\025\206\026\211\027\204\030\217\035\212" +
    "\036\214\037\222\043\105\064\u0144\070\103\072\220\101" +
    "\016\110\037\121\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\013\224\014\207\015\213\016\221\017\215" +
    "\020\205\021\203\022\223\023\225\024\226\025\206\026" +
    "\211\027\204\030\217\035\212\036\214\037\222\043\105" +
    "\070\103\072\u014a\101\016\104\u014c\110\037\121\013\001" +
    "\001\000\002\001\001\000\062\013\224\014\207\015\213" +
    "\016\221\017\215\020\205\021\203\022\223\023\225\024" +
    "\226\025\206\026\211\027\204\030\217\035\212\036\214" +
    "\037\222\043\105\064\u014d\070\103\072\220\101\016\110" +
    "\037\121\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\013\224\014" +
    "\207\015\213\016\221\017\215\020\205\021\203\022\223" +
    "\023\225\024\226\025\206\026\211\027\204\030\217\035" +
    "\212\036\214\037\222\043\105\070\103\072\u014a\101\016" +
    "\104\u0151\110\037\121\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\u0155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\013\224\014\207\015\213\016\221" +
    "\017\215\020\205\021\203\022\223\023\225\024\226\025" +
    "\206\026\211\027\204\030\217\035\212\036\214\037\222" +
    "\043\105\064\u015a\070\103\072\220\101\016\110\037\121" +
    "\013\001\001\000\002\001\001\000\062\013\224\014\207" +
    "\015\213\016\221\017\215\020\205\021\203\022\223\023" +
    "\225\024\226\025\206\026\211\027\204\030\217\035\212" +
    "\036\214\037\222\043\105\064\u015c\070\103\072\220\101" +
    "\016\110\037\121\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\u0160\107\u0161\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\u0165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\u0168\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u016b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\111\u016f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\061\u0172\076\176\107\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\013\224\014\207\015\213\016" +
    "\221\017\215\020\205\021\203\022\223\023\225\024\226" +
    "\025\206\026\211\027\204\030\217\035\212\036\214\037" +
    "\222\043\105\064\u0175\070\103\072\220\101\016\110\037" +
    "\121\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



// Agrega esta línea al inicio del archivo .cup
    public Lexer lexer;
    private boolean sintaxiscorrecta = true;
    private List<String> errores = new ArrayList<>();

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public void syntax_error(Symbol s) {
        sintaxiscorrecta = false;
        String errorMsg = "Error de sintaxis en línea " + (s.left + 1) +
                        ", columna " + (s.right + 1) +
                        ". Token inesperado: '" + s.value + "'";
        System.err.println(errorMsg);
        errores.add(errorMsg);
        }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.sym == sym.EOF) {
                errores.add("Error inesperado al final del archivo");
                } else {
                    errores.add(message);
                }
        }
    }

    public boolean parseCode() {
        try {
            super.parse();
            if (sintaxiscorrecta) {
                System.out.println("compilación exitosa");
                return true;
                } else {
                    System.out.println(errores.size() + " errores encontrados:");
                    errores.forEach(System.out::println);
                    return false;
                }
            } catch (Exception e) {
                System.out.println("Error fatal " + e.getMessage());
                return false;
            }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicios EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicios ::= inicio inicios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicios ::= inicio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= espacios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= instruccion instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= sis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= mientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= mientrashacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= porpuro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= porcadas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= intentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= impresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= escaneos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= declaracionarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= declaracionlistas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= lambdas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= ternarios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= rompers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= asignars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= LLAVEABIERTA instrucciones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= selectors 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= id_continuacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= enums 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= estructuras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= interfaces 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= ERRORL PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresiones ::= expresion expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= sis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= mientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= mientrashacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= porpuro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= porcadas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= intentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= impresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= escaneos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= declaracionarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= declaracionlistas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= lambdas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= ternarios 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= rompers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= asignars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= selectors 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= declaracionlistas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= declaracionarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condiciones ::= condicion OPERADORCONLOGICO condiciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condiciones ::= condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicion ::= valor OPERADORRELACIONAL valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros ::= parametrolista 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametrolista ::= parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametrolista ::= parametrolista COMA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrolista",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametro ::= tipos ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // id_continuacion ::= OPERADORASIGNAMIENTO lambda PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_continuacion",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // id_continuacion ::= OPERADORASIGNAMIENTO condiciones OPERADORTERNARIO expresiones PUNTODOBLE expresiones PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_continuacion",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // id_continuacion ::= OPERADORASIGNAMIENTO valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_continuacion",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // id_continuacion ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_continuacion",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // id_continuacion ::= operaritmetics 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_continuacion",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // espacios ::= espacio espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // espacios ::= espacio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacios",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // espacio ::= AGRUPACIONPRINCIPAL ID LLAVEABIERTA libreriasopcional declaracionesopcional clasesopcional LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("espacio",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // clasesopcional ::= clases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // clasesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clasesopcional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // libreriasopcional ::= librerias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // libreriasopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreriasopcional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracionesopcional ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionesopcional",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // librerias ::= libreria librerias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // librerias ::= libreria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("librerias",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // libreria ::= GESTIONRECURSOS ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("libreria",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // clases ::= clase clases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // clases ::= clase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clases",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // clase ::= modificadoresacceso AGRUPACIONSECUNDARIA ID LLAVEABIERTA miembrosclase LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // modificadoresacceso ::= MODIFICADORACCESO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // modificadoresacceso ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificadoresacceso",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // miembrosclase ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // miembrosclase ::= enums 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // miembrosclase ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // miembrosclase ::= estructuras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // miembrosclase ::= interfaces 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // miembrosclase ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembrosclase",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // funciones ::= funciones funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // funcion ::= funcionesnormales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // funcion ::= funcionessinretorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // funcionessinretorno ::= modificadoresacceso DECLARACIONFUNCION ID PARENTESISABIERTO parametros PARENTESISCERRADO LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionessinretorno",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // funcionesnormales ::= modificadoresacceso tipofuncion DECLARACIONFUNCION ID PARENTESISABIERTO parametros PARENTESISCERRADO LLAVEABIERTA expresiones retornos LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesnormales",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipofuncion ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipofuncion ::= TIPOLOGICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipofuncion ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // retornos ::= RETORNAR valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornos",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor ::= PARENTESISABIERTO operaritmetics PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // estructuras ::= AGRUPACIONESTRUCTURA ID LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estructuras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // enums ::= AGRUPACIONENUMERATOR ID LLAVEABIERTA valores LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enums",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // interfaces ::= AGRUPACIONINTERFAZ ID LLAVEABIERTA declaraciones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interfaces",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declaraciones ::= declaracion declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracion ::= DEC tipos ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaracion ::= DEC tipos ID OPERADORASIGNAMIENTO valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // asignars ::= ID OPERADORASIGNAMIENTO valor PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignars",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // selectors ::= selector casos defectos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // selectors ::= selector defectos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // selectors ::= selector casos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectors",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // selector ::= SELECTOR PARENTESISABIERTO valor PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // casos ::= caso casos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // caso ::= CASO valor PUNTODOBLE LLAVEABIERTA expresiones retornoalto LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // retornoalto ::= retornos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // retornoalto ::= alto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retornoalto",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // defectos ::= DEFECTO PUNTODOBLE LLAVEABIERTA expresiones retornoalto LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defectos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // alto ::= PARAR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alto",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sis ::= si sinoshacer sinos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sis",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sinos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sinos ::= sino 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinos",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sinoshacer ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sinoshacer ::= sinohacer sinoshacer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinoshacer",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // si ::= SI PARENTESISABIERTO condiciones PARENTESISCERRADO LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sinohacer ::= SINOHACER PARENTESISABIERTO condiciones PARENTESISCERRADO LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sinohacer",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sino ::= SINO LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sino",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // mientras ::= MIENTRAS PARENTESISABIERTO condiciones PARENTESISCERRADO PUNTODOBLE LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientras",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // mientrashacer ::= HACER PARENTESISABIERTO condiciones PARENTESISCERRADO PUNTODOBLE LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientrashacer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // porpuro ::= POR PARENTESISABIERTO declaracion PARENTESISCERRADO PARENTESISABIERTO asignars PARENTESISCERRADO PARENTESISABIERTO aumentodecremento PARENTESISCERRADO CORCHETEABIERTO condiciones CORCHETECERRADO LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porpuro",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // aumentodecremento ::= ID OPERADORDESPLAZAMIENTO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aumentodecremento",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // porcadas ::= PORCADA PARENTESISABIERTO tipos ID PARAMETROENTRADA ID PARENTESISCERRADO PUNTODOBLE LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("porcadas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipos ::= TIPOCADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tipos ::= TIPOINFERIDO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipos ::= TIPONUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipos ::= TIPOCARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // intentos ::= INTENTAR LLAVEABIERTA expresiones LLAVECERRADA atraparterminar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intentos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // atraparterminar ::= atrapars terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // atraparterminar ::= atrapars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // atraparterminar ::= terminars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atraparterminar",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // atrapars ::= atrapar atrapars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // atrapars ::= atrapar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // atrapar ::= ATRAPAR LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atrapar",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // terminars ::= TERMINAR LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("terminars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // impresiones ::= IMPRIMIR PARENTESISABIERTO oraciones PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // oraciones ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // oraciones ::= oraciones MAS valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oraciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // escaneos ::= ESCANEAR PARENTESISABIERTO PARENTESISCERRADO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // declaracionarreglos ::= tipos CORCHETEABIERTO dimensionesopcional CORCHETECERRADO ID asignamientovariables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionarreglos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // asignamientovariables ::= OPERADORASIGNAMIENTO listabloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // asignamientovariables ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignamientovariables",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // listabloques ::= bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // listabloques ::= listabloques COMA bloquevalores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listabloques",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // bloquevalores ::= CORCHETEABIERTO listabloques CORCHETECERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // bloquevalores ::= LLAVEABIERTA valores LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquevalores",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // valores ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // valores ::= valores COMA valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // dimensionesopcional ::= dimensiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // dimensionesopcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensionesopcional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // dimensiones ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // dimensiones ::= dimensiones COMA NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declaracionlistas ::= LISTA CORCHETEABIERTO tipos CORCHETECERRADO ID OPERADORASIGNAMIENTO ID OPERADORRESULTADO listabloques PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlistas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // lambdas ::= idop lambda PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdas",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // lambda ::= PARENTESISABIERTO parametrolista PARENTESISCERRADO OPERADORRESULTADO cuerpolambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambda",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // lambda ::= PARENTESISABIERTO parametro PARENTESISCERRADO OPERADORRESULTADO cuerpolambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambda",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // cuerpolambda ::= LLAVEABIERTA expresiones LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // cuerpolambda ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpolambda",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ternarios ::= idop condiciones OPERADORTERNARIO expresiones PUNTODOBLE expresiones PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ternarios",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // operaritmetics ::= operaritmetics MAS operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // operaritmetics ::= operaritmetics MENOS operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // operaritmetics ::= operaritmetic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetics",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // operaritmetic ::= operaritmetic MULTI idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // operaritmetic ::= operaritmetic DIV idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // operaritmetic ::= idnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaritmetic",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // idnum ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // idnum ::= NUMERICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idnum",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

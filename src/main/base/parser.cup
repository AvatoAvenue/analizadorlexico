package com.codigo;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;

parser code {:
// Agrega esta línea al inicio del archivo .cup
    public Lexer lexer;
    private boolean sintaxiscorrecta = true;
    private List<String> errores = new ArrayList<>();

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public void syntax_error(Symbol s) {
        sintaxiscorrecta = false;
        String errorMsg = "Error de sintaxis en línea " + (s.left + 1) +
                        ", columna " + (s.right + 1) +
                        ". Token inesperado: '" + s.value + "'";
        System.err.println(errorMsg);
        errores.add(errorMsg);
        }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.sym == sym.EOF) {
                errores.add("Error inesperado al final del archivo");
                } else {
                    errores.add(message);
                }
        }
    }

    public boolean parseCode() {
        try {
            super.parse();
            if (sintaxiscorrecta) {
                System.out.println("compilación exitosa");
                return true;
                } else {
                    System.out.println(errores.size() + " errores encontrados:");
                    errores.forEach(System.out::println);
                    return false;
                }
            } catch (Exception e) {
                System.out.println("Error fatal " + e.getMessage());
                return false;
            }
    }
:};

action code {:
:}

/* Terminales */
terminal AGRUPACIONPRINCIPAL, DECLARACIONFUNCION
        , AGRUPACIONESTRUCTURA, AGRUPACIONENUMERATOR
        , AGRUPACIONINTERFAZ, AGRUPACIONSECUNDARIA;
terminal LISTA;
terminal POR, MIENTRAS, SELECTOR, CASO, DEFECTO, PORCADA, INTENTAR
        , ATRAPAR, TERMINAR, IMPRIMIR, ESCANEAR, SI, SINO, SINOHACER;
terminal RETORNAR, PARAR;
terminal TIPONUMERICO, TIPOLOGICO, TIPOCADENA, TIPOINFERIDO, TIPOCARACTER;
terminal OPERADORRELACIONAL, OPERADORASIGNAMIENTO
        , OPERADORRESULTADO, OPERADORDESPLAZAMIENTO, OPERADORTERNARIO
        , OPERADORCONLOGICO;
terminal PARAMETROENTRADA, GESTIONRECURSOS, MODIFICADORACCESO, DEC;
terminal CORCHETEABIERTO, CORCHETECERRADO, LLAVEABIERTA, LLAVECERRADA
        , PARENTESISABIERTO, PARENTESISCERRADO, NUMERICO, COMA, PUNTOCOMA
        , PUNTODOBLE, LITERAL, ID;
terminal MENOS, MAS, MULTI, DIV;

terminal PUNTO, ERRORL, HACER;

/* Inicio */
non terminal inicio, inicios;

/* instrucciones */

non terminal espacios, //
            librerias, //
            clases, //
            funciones, //
            estructuras, //
            enums, //
            interfaces,
            declaraciones, //
            sis, //
            mientras, //
            mientrashacer, //
            porpuro, //
            porcadas, //
            intentos, //
            impresiones, //
            escaneos, //
            declaracionarreglos, //
            declaracionlistas, //
            lambdas, //
            ternarios, //
            selectors; //

/* reglas */
non terminal casos, defectos, atrapars, terminars, retornos, asignars
            , rompers, oraciones, asignamientovariables, valores
            , tipos, listabloques, dimensiones, modificadoresacceso
            , miembrosclase, bloquevalores, libreriasopcional
            , declaracionesopcional, clasesopcional, dimensionesopcional, bloquedeclaraciones
            , funcionesnormales, funcionessinretorno, sinoshacer, bloqueexpresiones, bloqueparametros, bloquecondiciones;

non terminal condiciones
            , parametros, operaritmetics, expresiones;

non terminal caso, espacio, declaracion
            , parametro, expresion, operaritmetic, atraparterminar, atrapar
            , condicion, sinohacer, sinos, selector
            , alto, retornoalto, cuerpolambda, parametrolista
            , tipofuncion, valor, si, aumentodecremento, sino
            , idnum, libreria, clase, funcion, declarar
            , listadeclarar, declarador, lambdaasignar, lambdaexpr;

//non terminal funcionlocales, constructores;
/* Precedencias*/
precedence right OPERADORTERNARIO, PUNTODOBLE;
precedence left MAS, MENOS;
precedence left MULTI, DIV;
precedence left LLAVEABIERTA;
precedence left PARENTESISCERRADO;
precedence left SINO, SINOHACER;
precedence left MODIFICADORACCESO, DECLARACIONFUNCION;
precedence left RETORNAR;
precedence left NUMERICO, COMA;

/* gramatica */
start with inicios;

inicios ::= inicio inicios | inicio;
inicio ::= espacio;

bloqueexpresiones ::= LLAVEABIERTA expresiones LLAVECERRADA;
expresiones ::= expresion expresiones | expresion;
expresion ::= sis | mientras | mientrashacer | porpuro | porcadas | intentos
                | impresiones | escaneos | declaraciones | declaracionarreglos
                | declaracionlistas | lambdas | ternarios | retornos
                | rompers | asignars | selectors | enums;

bloquecondiciones ::= PARENTESISABIERTO condiciones PARENTESISCERRADO;
condiciones ::= condicion OPERADORCONLOGICO condiciones | condicion;
condicion ::= valor OPERADORRELACIONAL valor;

bloqueparametros ::= PARENTESISABIERTO parametrolista PARENTESISCERRADO;
parametros ::= parametrolista | /* empty */;
parametrolista ::= parametro | parametrolista COMA parametro;
parametro ::= tipos ID;

bloquedeclaraciones ::= LLAVEABIERTA declaraciones LLAVECERRADA;

/* namespace */

espacios ::= espacios espacio | espacio;
espacio ::= AGRUPACIONPRINCIPAL ID 
            LLAVEABIERTA libreriasopcional declaracionesopcional 
            clasesopcional LLAVECERRADA;
clasesopcional ::= clases | /* empty */;
libreriasopcional ::= librerias | /* empty */;
declaracionesopcional ::= declaraciones | /* empty */;

/* librerias */

librerias ::= librerias libreria | libreria;
libreria ::= GESTIONRECURSOS ID PUNTOCOMA;

/* clase */

clases ::= clases clase | clase;
clase ::= modificadoresacceso AGRUPACIONSECUNDARIA ID
        LLAVEABIERTA miembrosclase LLAVECERRADA;
modificadoresacceso ::= MODIFICADORACCESO | /* empty */;
miembrosclase ::= declaraciones miembrosclase| enums miembrosclase| funciones miembrosclase 
| estructuras miembrosclase | interfaces miembrosclase| /* empty */;

/* funcion */

funciones ::= funciones funcion | funcion;
funcion ::= funcionesnormales | funcionessinretorno;
funcionessinretorno ::= modificadoresacceso DECLARACIONFUNCION ID 
            PARENTESISABIERTO parametros PARENTESISCERRADO 
            bloqueexpresiones;
funcionesnormales ::= modificadoresacceso tipofuncion DECLARACIONFUNCION  ID 
            bloqueparametros
            LLAVEABIERTA expresiones retornos LLAVECERRADA;
tipofuncion ::= TIPONUMERICO | TIPOLOGICO | TIPOCADENA;
retornos ::= RETORNAR valor PUNTOCOMA;
valor ::= LITERAL | NUMERICO | ID 
                | PARENTESISABIERTO operaritmetics PARENTESISCERRADO;

/* estructura */

estructuras ::= AGRUPACIONESTRUCTURA ID bloquedeclaraciones;

/* enum */ 

enums ::= AGRUPACIONENUMERATOR ID OPERADORASIGNAMIENTO bloquevalores PUNTOCOMA;

/* interfaz */

interfaces ::= AGRUPACIONINTERFAZ ID bloquedeclaraciones;

/* declaracion */ 

declaraciones ::= declaracion | declaraciones declaracion;
declaracion ::= DEC tipos listadeclarar PUNTOCOMA;
listadeclarar ::= declarador | listadeclarar COMA declarador;
declarador ::= ID | ID OPERADORASIGNAMIENTO valor;
asignars ::= ID OPERADORASIGNAMIENTO valor PUNTOCOMA;

/* Selector */
selectors ::= selector casos defectos | selector defectos | selector casos;
selector::= SELECTOR PARENTESISABIERTO valor PARENTESISCERRADO;
casos ::= caso casos | caso ;
caso ::= CASO valor PUNTODOBLE LLAVEABIERTA expresiones retornoalto LLAVECERRADA;
retornoalto ::= retornos | alto;
defectos ::= DEFECTO PUNTODOBLE LLAVEABIERTA expresiones retornoalto LLAVECERRADA;
alto ::= PARAR PUNTOCOMA;

/* if */

sis ::= si sinoshacer sinos;

sinos ::= /* empty */ | sino;
sinoshacer ::= /* empty */ | sinohacer sinoshacer;


si ::= SI bloquecondiciones bloqueexpresiones;

sinohacer::= SINOHACER bloquecondiciones bloqueexpresiones;
sino ::= SINO bloqueexpresiones;

/* while */

mientras ::= MIENTRAS bloquecondiciones PUNTODOBLE bloqueexpresiones;

/* do while */

mientrashacer ::= HACER bloquecondiciones PUNTODOBLE bloqueexpresiones;

/* for */


porpuro ::= POR PARENTESISABIERTO declaracion 
aumentodecremento condiciones PARENTESISCERRADO bloqueexpresiones;
aumentodecremento ::= ID OPERADORDESPLAZAMIENTO PUNTOCOMA;

/* foreach */

porcadas ::= PORCADA 
            PARENTESISABIERTO tipos ID PARAMETROENTRADA ID PARENTESISCERRADO
            PUNTODOBLE bloqueexpresiones;
tipos ::= TIPOCADENA | TIPOINFERIDO | TIPONUMERICO | TIPOCARACTER;

/* try */

intentos ::= INTENTAR LLAVEABIERTA expresiones LLAVECERRADA atraparterminar;
atraparterminar::= atrapars terminars | atrapars | terminars;
atrapars ::= atrapar atrapars | atrapar;
atrapar ::= ATRAPAR LLAVEABIERTA expresiones LLAVECERRADA;
terminars ::= TERMINAR LLAVEABIERTA expresiones LLAVECERRADA;


/* imprimir */

impresiones ::= IMPRIMIR PARENTESISABIERTO oraciones PARENTESISCERRADO PUNTOCOMA;
oraciones ::= valor | oraciones MAS valor;

/* escanear */

escaneos ::= ESCANEAR PARENTESISABIERTO PARENTESISCERRADO PUNTOCOMA;

/* arreglo */

declaracionarreglos ::=tipos CORCHETEABIERTO dimensionesopcional CORCHETECERRADO 
                    ID asignamientovariables PUNTOCOMA;
asignamientovariables ::= OPERADORASIGNAMIENTO listabloques
                    | /* empty */;
listabloques ::= bloquevalores
                | listabloques COMA bloquevalores;
bloquevalores ::= CORCHETEABIERTO listabloques CORCHETECERRADO
                | LLAVEABIERTA valores LLAVECERRADA;
valores ::= valor | valores COMA valor;
dimensionesopcional::= dimensiones | /* empty */;
dimensiones ::= NUMERICO | dimensiones COMA NUMERICO;

/* lista */

declaracionlistas ::= LISTA CORCHETEABIERTO tipos CORCHETECERRADO
                    ID OPERADORASIGNAMIENTO ID OPERADORRESULTADO
                    listabloques PUNTOCOMA;

/* lambda */

lambdas ::= lambdaexpr;
lambdaexpr ::= bloqueparametros OPERADORRESULTADO cuerpolambda;
cuerpolambda ::= bloqueexpresiones 
                | PARENTESISABIERTO expresion PARENTESISCERRADO 
                | PARENTESISABIERTO operaritmetics PARENTESISCERRADO;

/* operacion ternaria */

ternarios ::= ID OPERADORASIGNAMIENTO bloquecondiciones OPERADORTERNARIO
                valor PUNTODOBLE valor PUNTOCOMA;

/* operacion aritmetica*/
operaritmetics ::= operaritmetics MAS operaritmetic
                | operaritmetics MENOS operaritmetic
                | operaritmetic;
operaritmetic ::= operaritmetic MULTI idnum | operaritmetic DIV idnum | idnum;
idnum ::= ID | NUMERICO;

package com.codigo;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;


parser code {:
    public Lexer lexer;
    private boolean sintaxisCorrecta = true;

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    public void syntax_error(Symbol s) {
        sintaxisCorrecta = false;
        String errorMsg = "Error de sintaxis en línea " + (s.left) +
                          ", columna " + (s.right) +
                          ". No se esperaba este componente: '" + s.value + "'";
        System.err.println(errorMsg);
    }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.sym == sym.EOF) {
                System.err.println("Error inesperado al final del archivo");
            } 
        }
    }

    public boolean parseCode() {
        try {
            super.parse();
            if (sintaxisCorrecta) {
                System.out.println("Compilación exitosa");
                return true;
            } else {
                System.out.println("Se encontró un error de sintaxis.");
                return false;
            }
        } catch (Exception e) {
            return false;
        }
    }
:};


action code {:
:}

/* Terminales */
terminal AGRUPACIONPRINCIPAL, DECLARACIONFUNCION
        , AGRUPACIONESTRUCTURA, AGRUPACIONENUMERATOR
        , AGRUPACIONINTERFAZ, AGRUPACIONSECUNDARIA;
terminal LISTA;
terminal POR, MIENTRAS, SELECTOR, CASO, DEFECTO, PORCADA, INTENTAR, HACER
        , ATRAPAR, TERMINAR, IMPRIMIR, ESCANEAR, SI, SINO, SINOHACER;
terminal RETORNAR, PARAR;
terminal TIPONUMERICO, TIPOLOGICO, TIPOCADENA, TIPOINFERIDO, TIPOCARACTER;
terminal OPERADORRELACIONAL, OPERADORASIGNAMIENTO
        , OPERADORRESULTADO, OPERADORDESPLAZAMIENTO, OPERADORTERNARIO
        , OPERADORCONLOGICO;
terminal PARAMETROENTRADA, GESTIONRECURSOS, MODIFICADORACCESO, DEC;
terminal CORCHETEABIERTO, CORCHETECERRADO, LLAVEABIERTA, LLAVECERRADA
        , PARENTESISABIERTO, PARENTESISCERRADO, NUMERICO, COMA, PUNTOCOMA
        , PUNTODOBLE, LITERAL, ID;
terminal MENOS, MAS, MULTI, DIV;

/* Inicio */
non terminal inicio, inicios;

/* instrucciones */

non terminal espacio,
            librerias,
            clases,
            funciones,
            estructuras,
            enums,
            interfaces,
            declaraciones,
            sis,
            mientras,
            mientrashacer,
            porpuro,
            porcadas,
            intentos,
            impresiones,
            escaneos,
            declaracionarreglos,
            declaracionlistas,
            lambdas,
            ternarios,
            selectors;

/* reglas */
non terminal casos, defectos, atrapars, terminars, retornos, asignars
            , oraciones, asignamientovariables, valores
            , tipos, listabloques, dimensiones, modificadoresacceso, declaradoropcional
            , miembrosclase, bloquevalores, libreriasopcional, declaracionopcional
            , declaracionesopcional, clasesopcional, dimensionesopcional, bloquedeclaraciones
            , sinoshacer, bloqueexpresiones, bloqueparametros, bloquecondiciones;

non terminal condiciones, iniciosopcional, expresionesopcional, casosopcional, atraparsopcional
            , parametros, operaritmetics, expresiones, libreriaopcional, selectoropcional, defectosopcional
            , valoresopcional, listadeclararopcional, operaritmeticopcional, operaritmeticsopcional;

non terminal caso, declaracion, condicionopcional, oracionesopcional, dimensionopcional
            , parametro, expresion, operaritmetic, atraparterminar, atrapar, bloqueparametrosopcional
            , condicion, sinohacer, sinos, selector, declaracionlista, terminarsopcional
            , alto, retornoalto, cuerpolambda, parametrolista, tipofuncionopcional
            , tipofuncion, valor, si, aumentodecremento, sino, retornoopcional
            , idnum, libreria, clase, bloqueoperaritmetics, miembroclase
            , declarador, cuerpolista, lambda, listadeclarar, casoopcional;

/* Precedencias*/
precedence right OPERADORTERNARIO, PUNTODOBLE;
precedence left MAS, MENOS;
precedence left MULTI, DIV;
precedence left LLAVEABIERTA;
precedence left PARENTESISCERRADO;
precedence left SINO, SINOHACER;
precedence left MODIFICADORACCESO, DECLARACIONFUNCION;
precedence left RETORNAR;
precedence left NUMERICO, COMA;
precedence left PARAR;

/* gramatica */
start with inicios;

inicios ::= inicio iniciosopcional;
iniciosopcional ::= inicio iniciosopcional | /* empty */;
inicio ::= espacio;

/* namespace */

espacio ::= AGRUPACIONPRINCIPAL ID 
            LLAVEABIERTA libreriaopcional declaracionesopcional 
            clasesopcional LLAVECERRADA;
clasesopcional ::= clases | /* empty */;
libreriaopcional ::= librerias | /* empty */;
declaracionesopcional ::= declaraciones | /* empty */;

/* librerias */

librerias ::= libreria libreriasopcional;
libreriasopcional ::= libreria libreriasopcional | /* empty */;
libreria ::= GESTIONRECURSOS ID PUNTOCOMA;

/* clases */

clases ::= clase clasesopcional;
clase ::= modificadoresacceso AGRUPACIONSECUNDARIA ID
        LLAVEABIERTA miembrosclase LLAVECERRADA;
modificadoresacceso ::= MODIFICADORACCESO | /* empty */;
miembrosclase ::= miembroclase miembrosclase | /* empty */;
miembroclase ::= declaracion | enums | funciones | estructuras | interfaces;

/* funcion */

funciones ::= modificadoresacceso tipofuncionopcional DECLARACIONFUNCION ID 
        bloqueparametrosopcional LLAVEABIERTA expresiones 
        retornoopcional LLAVECERRADA;
retornoopcional ::= retornos | /* empty */;
tipofuncionopcional ::= tipofuncion | /* empty */;
tipofuncion ::= TIPONUMERICO | TIPOLOGICO | TIPOCADENA;

retornos ::= RETORNAR valor PUNTOCOMA;

bloqueexpresiones ::= LLAVEABIERTA expresiones LLAVECERRADA;
expresiones ::= expresion expresionesopcional;
expresionesopcional ::= expresion expresionesopcional | /* empty */;
expresion ::= sis | mientras | mientrashacer | porpuro | porcadas | intentos
                | impresiones | escaneos | declaracion | declaracionarreglos
                | declaracionlistas | lambdas | ternarios | asignars 
                | selectors | enums;

bloqueparametros ::= PARENTESISABIERTO parametros PARENTESISCERRADO;
bloqueparametrosopcional ::= bloqueparametros | PARENTESISABIERTO PARENTESISCERRADO;
parametros ::= parametro parametrolista;
parametrolista ::= COMA parametro parametrolista | /* empty */;
parametro ::= tipos ID;

/* estructura */

estructuras ::= AGRUPACIONESTRUCTURA ID bloquedeclaraciones;

/* interfaz */

interfaces ::= AGRUPACIONINTERFAZ ID bloquedeclaraciones;

/* enum */ 

enums ::= AGRUPACIONENUMERATOR ID OPERADORASIGNAMIENTO bloquevalores PUNTOCOMA;

bloquevalores ::= CORCHETEABIERTO listabloques CORCHETECERRADO
                | LLAVEABIERTA valores LLAVECERRADA;

//valores ::= valor | valores COMA valor;
valores ::= valor valoresopcional;
valoresopcional ::= COMA valor valoresopcional | /* empty */;
valor ::= LITERAL | NUMERICO | ID | bloqueoperaritmetics;


/* declaracion */ 

bloquedeclaraciones ::= LLAVEABIERTA declaraciones LLAVECERRADA;

declaraciones ::= declaracion declaracionopcional;
declaracionopcional ::= declaracion declaracionopcional | /* empty */;

declaracion ::= DEC tipos listadeclarar PUNTOCOMA;

listadeclarar ::= declarador listadeclararopcional;
listadeclararopcional ::= COMA declarador listadeclararopcional | /* empty */;

declarador ::= ID declaradoropcional;
declaradoropcional ::= OPERADORASIGNAMIENTO valor | /* empty */;

asignars ::= ID OPERADORASIGNAMIENTO valor PUNTOCOMA;

/* arreglo */

declaracionarreglos ::= tipos CORCHETEABIERTO dimensionesopcional CORCHETECERRADO 
                    ID asignamientovariables PUNTOCOMA;
asignamientovariables ::= OPERADORASIGNAMIENTO listabloques
                    | /* empty */;

listabloques ::= bloquevalores
                | listabloques COMA bloquevalores;
dimensionesopcional::= dimensiones | /* empty */;
dimensiones ::= NUMERICO dimensionopcional;
dimensionopcional ::= COMA NUMERICO dimensionopcional | /* empty */;

/* lista */

declaracionlistas ::= cuerpolista declaracionlista PUNTOCOMA;
declaracionlista ::= OPERADORASIGNAMIENTO bloquevalores | /* empty */;
cuerpolista ::= LISTA CORCHETEABIERTO tipos CORCHETECERRADO ID;

/* lambda */

lambdas ::= ID OPERADORASIGNAMIENTO lambda PUNTOCOMA;
lambda ::= bloqueparametros OPERADORRESULTADO cuerpolambda;
cuerpolambda ::= bloqueexpresiones | bloqueoperaritmetics;

bloqueoperaritmetics ::= PARENTESISABIERTO operaritmetics PARENTESISCERRADO;

operaritmetics ::= operaritmetic operaritmeticsopcional;
operaritmeticsopcional ::= MAS operaritmetic operaritmeticsopcional 
                | MENOS operaritmetic operaritmeticsopcional 
                | /* empty */;
operaritmetic ::= idnum operaritmeticopcional;
operaritmeticopcional ::= MULTI operaritmetic operaritmeticsopcional 
                | DIV operaritmetic operaritmeticsopcional 
                | /* empty */;
idnum ::= ID | NUMERICO;

/* operacion ternaria */

ternarios ::= ID OPERADORASIGNAMIENTO bloquecondiciones OPERADORTERNARIO
                valor PUNTODOBLE valor PUNTOCOMA;

/* Selector */

selectors ::= selector selectoropcional;
selectoropcional ::= LLAVEABIERTA casoopcional defectosopcional LLAVECERRADA;
selector ::= SELECTOR PARENTESISABIERTO valor PARENTESISCERRADO;

casos ::= caso casosopcional;
casoopcional ::= casos | /* empty */;
casosopcional ::= caso casosopcional | /* empty */;
caso ::= CASO valor PUNTODOBLE expresiones retornoalto;

defectosopcional ::= defectos defectosopcional | /* empty */;
defectos ::= DEFECTO PUNTODOBLE expresiones retornoalto;

retornoalto ::= retornos | alto;
alto ::= PARAR PUNTOCOMA;

/* if */

sis ::= si sinoshacer sinos;

sinos ::= sino | /* empty */;
sinoshacer ::= sinohacer sinoshacer | /* empty */;

si ::= SI bloquecondiciones bloqueexpresiones;

sinohacer::= SINOHACER bloquecondiciones bloqueexpresiones;
sino ::= SINO bloqueexpresiones;

bloquecondiciones ::= PARENTESISABIERTO condiciones PARENTESISCERRADO;
condiciones ::= condicion condicionopcional;
condicionopcional ::= OPERADORCONLOGICO condicionopcional | /* empty */;
condicion ::= valor OPERADORRELACIONAL valor;

/* while */

mientras ::= MIENTRAS bloquecondiciones PUNTODOBLE bloqueexpresiones;

/* do while */

mientrashacer ::= HACER bloquecondiciones PUNTODOBLE bloqueexpresiones;

/* for */

porpuro ::= POR PARENTESISABIERTO declaracion 
aumentodecremento condiciones PARENTESISCERRADO bloqueexpresiones;
aumentodecremento ::= ID OPERADORDESPLAZAMIENTO PUNTOCOMA;

/* foreach */

porcadas ::= PORCADA 
            PARENTESISABIERTO tipos ID PARAMETROENTRADA ID PARENTESISCERRADO
            PUNTODOBLE bloqueexpresiones;
tipos ::= TIPOCADENA | TIPOINFERIDO | TIPONUMERICO | TIPOCARACTER;

/* try */

intentos ::= INTENTAR bloqueexpresiones atraparterminar;
atraparterminar::= terminars | atrapars terminarsopcional;
terminarsopcional ::= terminars | /* empty */;
atrapars ::= atrapar atraparsopcional;
atraparsopcional ::= atrapar atraparsopcional | /* empty */;
atrapar ::= ATRAPAR bloqueexpresiones;
terminars ::= TERMINAR bloqueexpresiones;

/* imprimir */

impresiones ::= IMPRIMIR 
PARENTESISABIERTO oraciones PARENTESISCERRADO PUNTOCOMA;
oraciones ::= valor oracionesopcional;
oracionesopcional ::= MAS valor oracionesopcional | /* empty */;

/* escanear */

escaneos ::= ESCANEAR PARENTESISABIERTO PARENTESISCERRADO PUNTOCOMA;
